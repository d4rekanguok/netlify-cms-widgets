"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _core = require("@emotion/core");

var _reactPolyglot = require("react-polyglot");

var _reactRouterDom = require("react-router-dom");

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _SettingsDropdown = _interopRequireDefault(require("../UI/SettingsDropdown"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

const styles = {
  buttonActive: /*#__PURE__*/(0, _core.css)("color:", _netlifyCmsUiDefault.colors.active, ";;label:buttonActive;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0FwcC9IZWFkZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBb0JtQiIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9BcHAvSGVhZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgSW1tdXRhYmxlUHJvcFR5cGVzIGZyb20gJ3JlYWN0LWltbXV0YWJsZS1wcm9wdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgeyB0cmFuc2xhdGUgfSBmcm9tICdyZWFjdC1wb2x5Z2xvdCc7XG5pbXBvcnQgeyBOYXZMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQge1xuICBJY29uLFxuICBEcm9wZG93bixcbiAgRHJvcGRvd25JdGVtLFxuICBTdHlsZWREcm9wZG93bkJ1dHRvbixcbiAgY29sb3JzLFxuICBsZW5ndGhzLFxuICBzaGFkb3dzLFxuICBidXR0b25zLFxufSBmcm9tICduZXRsaWZ5LWNtcy11aS1kZWZhdWx0JztcbmltcG9ydCBTZXR0aW5nc0Ryb3Bkb3duIGZyb20gJ1VJL1NldHRpbmdzRHJvcGRvd24nO1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gIGJ1dHRvbkFjdGl2ZTogY3NzYFxuICAgIGNvbG9yOiAke2NvbG9ycy5hY3RpdmV9O1xuICBgLFxufTtcblxuY29uc3QgQXBwSGVhZGVyID0gcHJvcHMgPT4gKFxuICA8aGVhZGVyXG4gICAgY3NzPXtjc3NgXG4gICAgICAke3NoYWRvd3MuZHJvcE1haW59O1xuICAgICAgcG9zaXRpb246IHN0aWNreTtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgdG9wOiAwO1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuZm9yZWdyb3VuZH07XG4gICAgICB6LWluZGV4OiAzMDA7XG4gICAgICBoZWlnaHQ6ICR7bGVuZ3Rocy50b3BCYXJIZWlnaHR9O1xuICAgIGB9XG4gICAgey4uLnByb3BzfVxuICAvPlxuKTtcblxuY29uc3QgQXBwSGVhZGVyQ29udGVudCA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgbWluLXdpZHRoOiA4MDBweDtcbiAgbWF4LXdpZHRoOiAxNDQwcHg7XG4gIHBhZGRpbmc6IDAgMTJweDtcbiAgbWFyZ2luOiAwIGF1dG87XG5gO1xuXG5jb25zdCBBcHBIZWFkZXJCdXR0b24gPSBzdHlsZWQuYnV0dG9uYFxuICAke2J1dHRvbnMuYnV0dG9ufTtcbiAgYmFja2dyb3VuZDogbm9uZTtcbiAgY29sb3I6ICM3YjgyOTA7XG4gIGZvbnQtZmFtaWx5OiBpbmhlcml0O1xuICBmb250LXNpemU6IDE2cHg7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICBwYWRkaW5nOiAxNnB4IDIwcHg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgJHtJY29ufSB7XG4gICAgbWFyZ2luLXJpZ2h0OiA0cHg7XG4gICAgY29sb3I6ICNiM2I5YzQ7XG4gIH1cblxuICAmOmhvdmVyLFxuICAmOmFjdGl2ZSxcbiAgJjpmb2N1cyB7XG4gICAgJHtzdHlsZXMuYnV0dG9uQWN0aXZlfTtcblxuICAgICR7SWNvbn0ge1xuICAgICAgJHtzdHlsZXMuYnV0dG9uQWN0aXZlfTtcbiAgICB9XG4gIH1cblxuICAke3Byb3BzID0+IGNzc2BcbiAgICAmLiR7cHJvcHMuYWN0aXZlQ2xhc3NOYW1lfSB7XG4gICAgICAke3N0eWxlcy5idXR0b25BY3RpdmV9O1xuXG4gICAgICAke0ljb259IHtcbiAgICAgICAgJHtzdHlsZXMuYnV0dG9uQWN0aXZlfTtcbiAgICAgIH1cbiAgICB9XG4gIGB9O1xuYDtcblxuY29uc3QgQXBwSGVhZGVyTmF2TGluayA9IEFwcEhlYWRlckJ1dHRvbi53aXRoQ29tcG9uZW50KE5hdkxpbmspO1xuXG5jb25zdCBBcHBIZWFkZXJBY3Rpb25zID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5gO1xuXG5jb25zdCBBcHBIZWFkZXJRdWlja05ld0J1dHRvbiA9IHN0eWxlZChTdHlsZWREcm9wZG93bkJ1dHRvbilgXG4gICR7YnV0dG9ucy5idXR0b259O1xuICAke2J1dHRvbnMubWVkaXVtfTtcbiAgJHtidXR0b25zLmdyYXl9O1xuICBtYXJnaW4tcmlnaHQ6IDhweDtcblxuICAmOmFmdGVyIHtcbiAgICB0b3A6IDExcHg7XG4gIH1cbmA7XG5cbmNvbnN0IEFwcEhlYWRlck5hdkxpc3QgPSBzdHlsZWQudWxgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIG1hcmdpbjogMDtcbiAgbGlzdC1zdHlsZTogbm9uZTtcbmA7XG5cbmNsYXNzIEhlYWRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgdXNlcjogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIGNvbGxlY3Rpb25zOiBJbW11dGFibGVQcm9wVHlwZXMub3JkZXJlZE1hcC5pc1JlcXVpcmVkLFxuICAgIG9uQ3JlYXRlRW50cnlDbGljazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkxvZ291dENsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9wZW5NZWRpYUxpYnJhcnk6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgaGFzV29ya2Zsb3c6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgZGlzcGxheVVybDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBpc1Rlc3RSZXBvOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIGhhbmRsZUNyZWF0ZVBvc3RDbGljayA9IGNvbGxlY3Rpb25OYW1lID0+IHtcbiAgICBjb25zdCB7IG9uQ3JlYXRlRW50cnlDbGljayB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAob25DcmVhdGVFbnRyeUNsaWNrKSB7XG4gICAgICBvbkNyZWF0ZUVudHJ5Q2xpY2soY29sbGVjdGlvbk5hbWUpO1xuICAgIH1cbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgdXNlcixcbiAgICAgIGNvbGxlY3Rpb25zLFxuICAgICAgb25Mb2dvdXRDbGljayxcbiAgICAgIG9wZW5NZWRpYUxpYnJhcnksXG4gICAgICBoYXNXb3JrZmxvdyxcbiAgICAgIGRpc3BsYXlVcmwsXG4gICAgICBpc1Rlc3RSZXBvLFxuICAgICAgdCxcbiAgICAgIHNob3dNZWRpYUJ1dHRvbixcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IGNyZWF0ZWFibGVDb2xsZWN0aW9ucyA9IGNvbGxlY3Rpb25zXG4gICAgICAuZmlsdGVyKGNvbGxlY3Rpb24gPT4gY29sbGVjdGlvbi5nZXQoJ2NyZWF0ZScpKVxuICAgICAgLnRvTGlzdCgpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxBcHBIZWFkZXI+XG4gICAgICAgIDxBcHBIZWFkZXJDb250ZW50PlxuICAgICAgICAgIDxuYXY+XG4gICAgICAgICAgICA8QXBwSGVhZGVyTmF2TGlzdD5cbiAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgIDxBcHBIZWFkZXJOYXZMaW5rXG4gICAgICAgICAgICAgICAgICB0bz1cIi9cIlxuICAgICAgICAgICAgICAgICAgYWN0aXZlQ2xhc3NOYW1lPVwiaGVhZGVyLWxpbmstYWN0aXZlXCJcbiAgICAgICAgICAgICAgICAgIGlzQWN0aXZlPXsobWF0Y2gsIGxvY2F0aW9uKSA9PiBsb2NhdGlvbi5wYXRobmFtZS5zdGFydHNXaXRoKCcvY29sbGVjdGlvbnMvJyl9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPEljb24gdHlwZT1cInBhZ2VcIiAvPlxuICAgICAgICAgICAgICAgICAge3QoJ2FwcC5oZWFkZXIuY29udGVudCcpfVxuICAgICAgICAgICAgICAgIDwvQXBwSGVhZGVyTmF2TGluaz5cbiAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAge2hhc1dvcmtmbG93ICYmIChcbiAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICA8QXBwSGVhZGVyTmF2TGluayB0bz1cIi93b3JrZmxvd1wiIGFjdGl2ZUNsYXNzTmFtZT1cImhlYWRlci1saW5rLWFjdGl2ZVwiPlxuICAgICAgICAgICAgICAgICAgICA8SWNvbiB0eXBlPVwid29ya2Zsb3dcIiAvPlxuICAgICAgICAgICAgICAgICAgICB7dCgnYXBwLmhlYWRlci53b3JrZmxvdycpfVxuICAgICAgICAgICAgICAgICAgPC9BcHBIZWFkZXJOYXZMaW5rPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIHtzaG93TWVkaWFCdXR0b24gJiYgKFxuICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgIDxBcHBIZWFkZXJCdXR0b24gb25DbGljaz17b3Blbk1lZGlhTGlicmFyeX0+XG4gICAgICAgICAgICAgICAgICAgIDxJY29uIHR5cGU9XCJtZWRpYS1hbHRcIiAvPlxuICAgICAgICAgICAgICAgICAgICB7dCgnYXBwLmhlYWRlci5tZWRpYScpfVxuICAgICAgICAgICAgICAgICAgPC9BcHBIZWFkZXJCdXR0b24+XG4gICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvQXBwSGVhZGVyTmF2TGlzdD5cbiAgICAgICAgICA8L25hdj5cbiAgICAgICAgICA8QXBwSGVhZGVyQWN0aW9ucz5cbiAgICAgICAgICAgIHtjcmVhdGVhYmxlQ29sbGVjdGlvbnMuc2l6ZSA+IDAgJiYgKFxuICAgICAgICAgICAgICA8RHJvcGRvd25cbiAgICAgICAgICAgICAgICByZW5kZXJCdXR0b249eygpID0+IChcbiAgICAgICAgICAgICAgICAgIDxBcHBIZWFkZXJRdWlja05ld0J1dHRvbj4ge3QoJ2FwcC5oZWFkZXIucXVpY2tBZGQnKX08L0FwcEhlYWRlclF1aWNrTmV3QnV0dG9uPlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgZHJvcGRvd25Ub3BPdmVybGFwPVwiMzBweFwiXG4gICAgICAgICAgICAgICAgZHJvcGRvd25XaWR0aD1cIjE2MHB4XCJcbiAgICAgICAgICAgICAgICBkcm9wZG93blBvc2l0aW9uPVwibGVmdFwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7Y3JlYXRlYWJsZUNvbGxlY3Rpb25zLm1hcChjb2xsZWN0aW9uID0+IChcbiAgICAgICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgICAgICAga2V5PXtjb2xsZWN0aW9uLmdldCgnbmFtZScpfVxuICAgICAgICAgICAgICAgICAgICBsYWJlbD17Y29sbGVjdGlvbi5nZXQoJ2xhYmVsX3Npbmd1bGFyJykgfHwgY29sbGVjdGlvbi5nZXQoJ2xhYmVsJyl9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMuaGFuZGxlQ3JlYXRlUG9zdENsaWNrKGNvbGxlY3Rpb24uZ2V0KCduYW1lJykpfVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgPC9Ecm9wZG93bj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8U2V0dGluZ3NEcm9wZG93blxuICAgICAgICAgICAgICBkaXNwbGF5VXJsPXtkaXNwbGF5VXJsfVxuICAgICAgICAgICAgICBpc1Rlc3RSZXBvPXtpc1Rlc3RSZXBvfVxuICAgICAgICAgICAgICBpbWFnZVVybD17dXNlci5nZXQoJ2F2YXRhcl91cmwnKX1cbiAgICAgICAgICAgICAgb25Mb2dvdXRDbGljaz17b25Mb2dvdXRDbGlja31cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9BcHBIZWFkZXJBY3Rpb25zPlxuICAgICAgICA8L0FwcEhlYWRlckNvbnRlbnQ+XG4gICAgICA8L0FwcEhlYWRlcj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRyYW5zbGF0ZSgpKEhlYWRlcik7XG4iXX0= */"))
};

const AppHeader = props => (0, _core.jsx)("header", _extends({
  css: /*#__PURE__*/(0, _core.css)(_netlifyCmsUiDefault.shadows.dropMain, ";position:sticky;width:100%;top:0;background-color:", _netlifyCmsUiDefault.colors.foreground, ";z-index:300;height:", _netlifyCmsUiDefault.lengths.topBarHeight, ";;label:AppHeader;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0FwcC9IZWFkZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMkJZIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0FwcC9IZWFkZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IE5hdkxpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7XG4gIEljb24sXG4gIERyb3Bkb3duLFxuICBEcm9wZG93bkl0ZW0sXG4gIFN0eWxlZERyb3Bkb3duQnV0dG9uLFxuICBjb2xvcnMsXG4gIGxlbmd0aHMsXG4gIHNoYWRvd3MsXG4gIGJ1dHRvbnMsXG59IGZyb20gJ25ldGxpZnktY21zLXVpLWRlZmF1bHQnO1xuaW1wb3J0IFNldHRpbmdzRHJvcGRvd24gZnJvbSAnVUkvU2V0dGluZ3NEcm9wZG93bic7XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgYnV0dG9uQWN0aXZlOiBjc3NgXG4gICAgY29sb3I6ICR7Y29sb3JzLmFjdGl2ZX07XG4gIGAsXG59O1xuXG5jb25zdCBBcHBIZWFkZXIgPSBwcm9wcyA9PiAoXG4gIDxoZWFkZXJcbiAgICBjc3M9e2Nzc2BcbiAgICAgICR7c2hhZG93cy5kcm9wTWFpbn07XG4gICAgICBwb3NpdGlvbjogc3RpY2t5O1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICB0b3A6IDA7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5mb3JlZ3JvdW5kfTtcbiAgICAgIHotaW5kZXg6IDMwMDtcbiAgICAgIGhlaWdodDogJHtsZW5ndGhzLnRvcEJhckhlaWdodH07XG4gICAgYH1cbiAgICB7Li4ucHJvcHN9XG4gIC8+XG4pO1xuXG5jb25zdCBBcHBIZWFkZXJDb250ZW50ID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBtaW4td2lkdGg6IDgwMHB4O1xuICBtYXgtd2lkdGg6IDE0NDBweDtcbiAgcGFkZGluZzogMCAxMnB4O1xuICBtYXJnaW46IDAgYXV0bztcbmA7XG5cbmNvbnN0IEFwcEhlYWRlckJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gICR7YnV0dG9ucy5idXR0b259O1xuICBiYWNrZ3JvdW5kOiBub25lO1xuICBjb2xvcjogIzdiODI5MDtcbiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gIHBhZGRpbmc6IDE2cHggMjBweDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcblxuICAke0ljb259IHtcbiAgICBtYXJnaW4tcmlnaHQ6IDRweDtcbiAgICBjb2xvcjogI2IzYjljNDtcbiAgfVxuXG4gICY6aG92ZXIsXG4gICY6YWN0aXZlLFxuICAmOmZvY3VzIHtcbiAgICAke3N0eWxlcy5idXR0b25BY3RpdmV9O1xuXG4gICAgJHtJY29ufSB7XG4gICAgICAke3N0eWxlcy5idXR0b25BY3RpdmV9O1xuICAgIH1cbiAgfVxuXG4gICR7cHJvcHMgPT4gY3NzYFxuICAgICYuJHtwcm9wcy5hY3RpdmVDbGFzc05hbWV9IHtcbiAgICAgICR7c3R5bGVzLmJ1dHRvbkFjdGl2ZX07XG5cbiAgICAgICR7SWNvbn0ge1xuICAgICAgICAke3N0eWxlcy5idXR0b25BY3RpdmV9O1xuICAgICAgfVxuICAgIH1cbiAgYH07XG5gO1xuXG5jb25zdCBBcHBIZWFkZXJOYXZMaW5rID0gQXBwSGVhZGVyQnV0dG9uLndpdGhDb21wb25lbnQoTmF2TGluayk7XG5cbmNvbnN0IEFwcEhlYWRlckFjdGlvbnMgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbmA7XG5cbmNvbnN0IEFwcEhlYWRlclF1aWNrTmV3QnV0dG9uID0gc3R5bGVkKFN0eWxlZERyb3Bkb3duQnV0dG9uKWBcbiAgJHtidXR0b25zLmJ1dHRvbn07XG4gICR7YnV0dG9ucy5tZWRpdW19O1xuICAke2J1dHRvbnMuZ3JheX07XG4gIG1hcmdpbi1yaWdodDogOHB4O1xuXG4gICY6YWZ0ZXIge1xuICAgIHRvcDogMTFweDtcbiAgfVxuYDtcblxuY29uc3QgQXBwSGVhZGVyTmF2TGlzdCA9IHN0eWxlZC51bGBcbiAgZGlzcGxheTogZmxleDtcbiAgbWFyZ2luOiAwO1xuICBsaXN0LXN0eWxlOiBub25lO1xuYDtcblxuY2xhc3MgSGVhZGVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICB1c2VyOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gICAgY29sbGVjdGlvbnM6IEltbXV0YWJsZVByb3BUeXBlcy5vcmRlcmVkTWFwLmlzUmVxdWlyZWQsXG4gICAgb25DcmVhdGVFbnRyeUNsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uTG9nb3V0Q2xpY2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb3Blbk1lZGlhTGlicmFyeTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBoYXNXb3JrZmxvdzogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgICBkaXNwbGF5VXJsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGlzVGVzdFJlcG86IFByb3BUeXBlcy5ib29sLFxuICAgIHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgaGFuZGxlQ3JlYXRlUG9zdENsaWNrID0gY29sbGVjdGlvbk5hbWUgPT4ge1xuICAgIGNvbnN0IHsgb25DcmVhdGVFbnRyeUNsaWNrIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChvbkNyZWF0ZUVudHJ5Q2xpY2spIHtcbiAgICAgIG9uQ3JlYXRlRW50cnlDbGljayhjb2xsZWN0aW9uTmFtZSk7XG4gICAgfVxuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICB1c2VyLFxuICAgICAgY29sbGVjdGlvbnMsXG4gICAgICBvbkxvZ291dENsaWNrLFxuICAgICAgb3Blbk1lZGlhTGlicmFyeSxcbiAgICAgIGhhc1dvcmtmbG93LFxuICAgICAgZGlzcGxheVVybCxcbiAgICAgIGlzVGVzdFJlcG8sXG4gICAgICB0LFxuICAgICAgc2hvd01lZGlhQnV0dG9uLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgY3JlYXRlYWJsZUNvbGxlY3Rpb25zID0gY29sbGVjdGlvbnNcbiAgICAgIC5maWx0ZXIoY29sbGVjdGlvbiA9PiBjb2xsZWN0aW9uLmdldCgnY3JlYXRlJykpXG4gICAgICAudG9MaXN0KCk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPEFwcEhlYWRlcj5cbiAgICAgICAgPEFwcEhlYWRlckNvbnRlbnQ+XG4gICAgICAgICAgPG5hdj5cbiAgICAgICAgICAgIDxBcHBIZWFkZXJOYXZMaXN0PlxuICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgPEFwcEhlYWRlck5hdkxpbmtcbiAgICAgICAgICAgICAgICAgIHRvPVwiL1wiXG4gICAgICAgICAgICAgICAgICBhY3RpdmVDbGFzc05hbWU9XCJoZWFkZXItbGluay1hY3RpdmVcIlxuICAgICAgICAgICAgICAgICAgaXNBY3RpdmU9eyhtYXRjaCwgbG9jYXRpb24pID0+IGxvY2F0aW9uLnBhdGhuYW1lLnN0YXJ0c1dpdGgoJy9jb2xsZWN0aW9ucy8nKX1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICA8SWNvbiB0eXBlPVwicGFnZVwiIC8+XG4gICAgICAgICAgICAgICAgICB7dCgnYXBwLmhlYWRlci5jb250ZW50Jyl9XG4gICAgICAgICAgICAgICAgPC9BcHBIZWFkZXJOYXZMaW5rPlxuICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICB7aGFzV29ya2Zsb3cgJiYgKFxuICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgIDxBcHBIZWFkZXJOYXZMaW5rIHRvPVwiL3dvcmtmbG93XCIgYWN0aXZlQ2xhc3NOYW1lPVwiaGVhZGVyLWxpbmstYWN0aXZlXCI+XG4gICAgICAgICAgICAgICAgICAgIDxJY29uIHR5cGU9XCJ3b3JrZmxvd1wiIC8+XG4gICAgICAgICAgICAgICAgICAgIHt0KCdhcHAuaGVhZGVyLndvcmtmbG93Jyl9XG4gICAgICAgICAgICAgICAgICA8L0FwcEhlYWRlck5hdkxpbms+XG4gICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAge3Nob3dNZWRpYUJ1dHRvbiAmJiAoXG4gICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgPEFwcEhlYWRlckJ1dHRvbiBvbkNsaWNrPXtvcGVuTWVkaWFMaWJyYXJ5fT5cbiAgICAgICAgICAgICAgICAgICAgPEljb24gdHlwZT1cIm1lZGlhLWFsdFwiIC8+XG4gICAgICAgICAgICAgICAgICAgIHt0KCdhcHAuaGVhZGVyLm1lZGlhJyl9XG4gICAgICAgICAgICAgICAgICA8L0FwcEhlYWRlckJ1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9BcHBIZWFkZXJOYXZMaXN0PlxuICAgICAgICAgIDwvbmF2PlxuICAgICAgICAgIDxBcHBIZWFkZXJBY3Rpb25zPlxuICAgICAgICAgICAge2NyZWF0ZWFibGVDb2xsZWN0aW9ucy5zaXplID4gMCAmJiAoXG4gICAgICAgICAgICAgIDxEcm9wZG93blxuICAgICAgICAgICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gKFxuICAgICAgICAgICAgICAgICAgPEFwcEhlYWRlclF1aWNrTmV3QnV0dG9uPiB7dCgnYXBwLmhlYWRlci5xdWlja0FkZCcpfTwvQXBwSGVhZGVyUXVpY2tOZXdCdXR0b24+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCIzMHB4XCJcbiAgICAgICAgICAgICAgICBkcm9wZG93bldpZHRoPVwiMTYwcHhcIlxuICAgICAgICAgICAgICAgIGRyb3Bkb3duUG9zaXRpb249XCJsZWZ0XCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtjcmVhdGVhYmxlQ29sbGVjdGlvbnMubWFwKGNvbGxlY3Rpb24gPT4gKFxuICAgICAgICAgICAgICAgICAgPERyb3Bkb3duSXRlbVxuICAgICAgICAgICAgICAgICAgICBrZXk9e2NvbGxlY3Rpb24uZ2V0KCduYW1lJyl9XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsPXtjb2xsZWN0aW9uLmdldCgnbGFiZWxfc2luZ3VsYXInKSB8fCBjb2xsZWN0aW9uLmdldCgnbGFiZWwnKX1cbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gdGhpcy5oYW5kbGVDcmVhdGVQb3N0Q2xpY2soY29sbGVjdGlvbi5nZXQoJ25hbWUnKSl9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICA8L0Ryb3Bkb3duPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDxTZXR0aW5nc0Ryb3Bkb3duXG4gICAgICAgICAgICAgIGRpc3BsYXlVcmw9e2Rpc3BsYXlVcmx9XG4gICAgICAgICAgICAgIGlzVGVzdFJlcG89e2lzVGVzdFJlcG99XG4gICAgICAgICAgICAgIGltYWdlVXJsPXt1c2VyLmdldCgnYXZhdGFyX3VybCcpfVxuICAgICAgICAgICAgICBvbkxvZ291dENsaWNrPXtvbkxvZ291dENsaWNrfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L0FwcEhlYWRlckFjdGlvbnM+XG4gICAgICAgIDwvQXBwSGVhZGVyQ29udGVudD5cbiAgICAgIDwvQXBwSGVhZGVyPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgdHJhbnNsYXRlKCkoSGVhZGVyKTtcbiJdfQ== */"))
}, props));

const AppHeaderContent = (0, _styledBase.default)("div", {
  target: "e16dayda0",
  label: "AppHeaderContent"
})(process.env.NODE_ENV === "production" ? {
  name: "oh6t3a",
  styles: "display:flex;justify-content:space-between;min-width:800px;max-width:1440px;padding:0 12px;margin:0 auto;"
} : {
  name: "oh6t3a",
  styles: "display:flex;justify-content:space-between;min-width:800px;max-width:1440px;padding:0 12px;margin:0 auto;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0FwcC9IZWFkZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBd0NtQyIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9BcHAvSGVhZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgSW1tdXRhYmxlUHJvcFR5cGVzIGZyb20gJ3JlYWN0LWltbXV0YWJsZS1wcm9wdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgeyB0cmFuc2xhdGUgfSBmcm9tICdyZWFjdC1wb2x5Z2xvdCc7XG5pbXBvcnQgeyBOYXZMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQge1xuICBJY29uLFxuICBEcm9wZG93bixcbiAgRHJvcGRvd25JdGVtLFxuICBTdHlsZWREcm9wZG93bkJ1dHRvbixcbiAgY29sb3JzLFxuICBsZW5ndGhzLFxuICBzaGFkb3dzLFxuICBidXR0b25zLFxufSBmcm9tICduZXRsaWZ5LWNtcy11aS1kZWZhdWx0JztcbmltcG9ydCBTZXR0aW5nc0Ryb3Bkb3duIGZyb20gJ1VJL1NldHRpbmdzRHJvcGRvd24nO1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gIGJ1dHRvbkFjdGl2ZTogY3NzYFxuICAgIGNvbG9yOiAke2NvbG9ycy5hY3RpdmV9O1xuICBgLFxufTtcblxuY29uc3QgQXBwSGVhZGVyID0gcHJvcHMgPT4gKFxuICA8aGVhZGVyXG4gICAgY3NzPXtjc3NgXG4gICAgICAke3NoYWRvd3MuZHJvcE1haW59O1xuICAgICAgcG9zaXRpb246IHN0aWNreTtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgdG9wOiAwO1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuZm9yZWdyb3VuZH07XG4gICAgICB6LWluZGV4OiAzMDA7XG4gICAgICBoZWlnaHQ6ICR7bGVuZ3Rocy50b3BCYXJIZWlnaHR9O1xuICAgIGB9XG4gICAgey4uLnByb3BzfVxuICAvPlxuKTtcblxuY29uc3QgQXBwSGVhZGVyQ29udGVudCA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgbWluLXdpZHRoOiA4MDBweDtcbiAgbWF4LXdpZHRoOiAxNDQwcHg7XG4gIHBhZGRpbmc6IDAgMTJweDtcbiAgbWFyZ2luOiAwIGF1dG87XG5gO1xuXG5jb25zdCBBcHBIZWFkZXJCdXR0b24gPSBzdHlsZWQuYnV0dG9uYFxuICAke2J1dHRvbnMuYnV0dG9ufTtcbiAgYmFja2dyb3VuZDogbm9uZTtcbiAgY29sb3I6ICM3YjgyOTA7XG4gIGZvbnQtZmFtaWx5OiBpbmhlcml0O1xuICBmb250LXNpemU6IDE2cHg7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICBwYWRkaW5nOiAxNnB4IDIwcHg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgJHtJY29ufSB7XG4gICAgbWFyZ2luLXJpZ2h0OiA0cHg7XG4gICAgY29sb3I6ICNiM2I5YzQ7XG4gIH1cblxuICAmOmhvdmVyLFxuICAmOmFjdGl2ZSxcbiAgJjpmb2N1cyB7XG4gICAgJHtzdHlsZXMuYnV0dG9uQWN0aXZlfTtcblxuICAgICR7SWNvbn0ge1xuICAgICAgJHtzdHlsZXMuYnV0dG9uQWN0aXZlfTtcbiAgICB9XG4gIH1cblxuICAke3Byb3BzID0+IGNzc2BcbiAgICAmLiR7cHJvcHMuYWN0aXZlQ2xhc3NOYW1lfSB7XG4gICAgICAke3N0eWxlcy5idXR0b25BY3RpdmV9O1xuXG4gICAgICAke0ljb259IHtcbiAgICAgICAgJHtzdHlsZXMuYnV0dG9uQWN0aXZlfTtcbiAgICAgIH1cbiAgICB9XG4gIGB9O1xuYDtcblxuY29uc3QgQXBwSGVhZGVyTmF2TGluayA9IEFwcEhlYWRlckJ1dHRvbi53aXRoQ29tcG9uZW50KE5hdkxpbmspO1xuXG5jb25zdCBBcHBIZWFkZXJBY3Rpb25zID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5gO1xuXG5jb25zdCBBcHBIZWFkZXJRdWlja05ld0J1dHRvbiA9IHN0eWxlZChTdHlsZWREcm9wZG93bkJ1dHRvbilgXG4gICR7YnV0dG9ucy5idXR0b259O1xuICAke2J1dHRvbnMubWVkaXVtfTtcbiAgJHtidXR0b25zLmdyYXl9O1xuICBtYXJnaW4tcmlnaHQ6IDhweDtcblxuICAmOmFmdGVyIHtcbiAgICB0b3A6IDExcHg7XG4gIH1cbmA7XG5cbmNvbnN0IEFwcEhlYWRlck5hdkxpc3QgPSBzdHlsZWQudWxgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIG1hcmdpbjogMDtcbiAgbGlzdC1zdHlsZTogbm9uZTtcbmA7XG5cbmNsYXNzIEhlYWRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgdXNlcjogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIGNvbGxlY3Rpb25zOiBJbW11dGFibGVQcm9wVHlwZXMub3JkZXJlZE1hcC5pc1JlcXVpcmVkLFxuICAgIG9uQ3JlYXRlRW50cnlDbGljazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkxvZ291dENsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9wZW5NZWRpYUxpYnJhcnk6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgaGFzV29ya2Zsb3c6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgZGlzcGxheVVybDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBpc1Rlc3RSZXBvOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIGhhbmRsZUNyZWF0ZVBvc3RDbGljayA9IGNvbGxlY3Rpb25OYW1lID0+IHtcbiAgICBjb25zdCB7IG9uQ3JlYXRlRW50cnlDbGljayB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAob25DcmVhdGVFbnRyeUNsaWNrKSB7XG4gICAgICBvbkNyZWF0ZUVudHJ5Q2xpY2soY29sbGVjdGlvbk5hbWUpO1xuICAgIH1cbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgdXNlcixcbiAgICAgIGNvbGxlY3Rpb25zLFxuICAgICAgb25Mb2dvdXRDbGljayxcbiAgICAgIG9wZW5NZWRpYUxpYnJhcnksXG4gICAgICBoYXNXb3JrZmxvdyxcbiAgICAgIGRpc3BsYXlVcmwsXG4gICAgICBpc1Rlc3RSZXBvLFxuICAgICAgdCxcbiAgICAgIHNob3dNZWRpYUJ1dHRvbixcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IGNyZWF0ZWFibGVDb2xsZWN0aW9ucyA9IGNvbGxlY3Rpb25zXG4gICAgICAuZmlsdGVyKGNvbGxlY3Rpb24gPT4gY29sbGVjdGlvbi5nZXQoJ2NyZWF0ZScpKVxuICAgICAgLnRvTGlzdCgpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxBcHBIZWFkZXI+XG4gICAgICAgIDxBcHBIZWFkZXJDb250ZW50PlxuICAgICAgICAgIDxuYXY+XG4gICAgICAgICAgICA8QXBwSGVhZGVyTmF2TGlzdD5cbiAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgIDxBcHBIZWFkZXJOYXZMaW5rXG4gICAgICAgICAgICAgICAgICB0bz1cIi9cIlxuICAgICAgICAgICAgICAgICAgYWN0aXZlQ2xhc3NOYW1lPVwiaGVhZGVyLWxpbmstYWN0aXZlXCJcbiAgICAgICAgICAgICAgICAgIGlzQWN0aXZlPXsobWF0Y2gsIGxvY2F0aW9uKSA9PiBsb2NhdGlvbi5wYXRobmFtZS5zdGFydHNXaXRoKCcvY29sbGVjdGlvbnMvJyl9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPEljb24gdHlwZT1cInBhZ2VcIiAvPlxuICAgICAgICAgICAgICAgICAge3QoJ2FwcC5oZWFkZXIuY29udGVudCcpfVxuICAgICAgICAgICAgICAgIDwvQXBwSGVhZGVyTmF2TGluaz5cbiAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAge2hhc1dvcmtmbG93ICYmIChcbiAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICA8QXBwSGVhZGVyTmF2TGluayB0bz1cIi93b3JrZmxvd1wiIGFjdGl2ZUNsYXNzTmFtZT1cImhlYWRlci1saW5rLWFjdGl2ZVwiPlxuICAgICAgICAgICAgICAgICAgICA8SWNvbiB0eXBlPVwid29ya2Zsb3dcIiAvPlxuICAgICAgICAgICAgICAgICAgICB7dCgnYXBwLmhlYWRlci53b3JrZmxvdycpfVxuICAgICAgICAgICAgICAgICAgPC9BcHBIZWFkZXJOYXZMaW5rPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIHtzaG93TWVkaWFCdXR0b24gJiYgKFxuICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgIDxBcHBIZWFkZXJCdXR0b24gb25DbGljaz17b3Blbk1lZGlhTGlicmFyeX0+XG4gICAgICAgICAgICAgICAgICAgIDxJY29uIHR5cGU9XCJtZWRpYS1hbHRcIiAvPlxuICAgICAgICAgICAgICAgICAgICB7dCgnYXBwLmhlYWRlci5tZWRpYScpfVxuICAgICAgICAgICAgICAgICAgPC9BcHBIZWFkZXJCdXR0b24+XG4gICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvQXBwSGVhZGVyTmF2TGlzdD5cbiAgICAgICAgICA8L25hdj5cbiAgICAgICAgICA8QXBwSGVhZGVyQWN0aW9ucz5cbiAgICAgICAgICAgIHtjcmVhdGVhYmxlQ29sbGVjdGlvbnMuc2l6ZSA+IDAgJiYgKFxuICAgICAgICAgICAgICA8RHJvcGRvd25cbiAgICAgICAgICAgICAgICByZW5kZXJCdXR0b249eygpID0+IChcbiAgICAgICAgICAgICAgICAgIDxBcHBIZWFkZXJRdWlja05ld0J1dHRvbj4ge3QoJ2FwcC5oZWFkZXIucXVpY2tBZGQnKX08L0FwcEhlYWRlclF1aWNrTmV3QnV0dG9uPlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgZHJvcGRvd25Ub3BPdmVybGFwPVwiMzBweFwiXG4gICAgICAgICAgICAgICAgZHJvcGRvd25XaWR0aD1cIjE2MHB4XCJcbiAgICAgICAgICAgICAgICBkcm9wZG93blBvc2l0aW9uPVwibGVmdFwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7Y3JlYXRlYWJsZUNvbGxlY3Rpb25zLm1hcChjb2xsZWN0aW9uID0+IChcbiAgICAgICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgICAgICAga2V5PXtjb2xsZWN0aW9uLmdldCgnbmFtZScpfVxuICAgICAgICAgICAgICAgICAgICBsYWJlbD17Y29sbGVjdGlvbi5nZXQoJ2xhYmVsX3Npbmd1bGFyJykgfHwgY29sbGVjdGlvbi5nZXQoJ2xhYmVsJyl9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMuaGFuZGxlQ3JlYXRlUG9zdENsaWNrKGNvbGxlY3Rpb24uZ2V0KCduYW1lJykpfVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgPC9Ecm9wZG93bj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8U2V0dGluZ3NEcm9wZG93blxuICAgICAgICAgICAgICBkaXNwbGF5VXJsPXtkaXNwbGF5VXJsfVxuICAgICAgICAgICAgICBpc1Rlc3RSZXBvPXtpc1Rlc3RSZXBvfVxuICAgICAgICAgICAgICBpbWFnZVVybD17dXNlci5nZXQoJ2F2YXRhcl91cmwnKX1cbiAgICAgICAgICAgICAgb25Mb2dvdXRDbGljaz17b25Mb2dvdXRDbGlja31cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9BcHBIZWFkZXJBY3Rpb25zPlxuICAgICAgICA8L0FwcEhlYWRlckNvbnRlbnQ+XG4gICAgICA8L0FwcEhlYWRlcj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRyYW5zbGF0ZSgpKEhlYWRlcik7XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const AppHeaderButton = (0, _styledBase.default)("button", {
  target: "e16dayda1",
  label: "AppHeaderButton"
})(_netlifyCmsUiDefault.buttons.button, ";background:none;color:#7b8290;font-family:inherit;font-size:16px;font-weight:500;display:inline-flex;padding:16px 20px;align-items:center;", _netlifyCmsUiDefault.Icon, "{margin-right:4px;color:#b3b9c4;}&:hover,&:active,&:focus{", styles.buttonActive, ";", _netlifyCmsUiDefault.Icon, "{", styles.buttonActive, ";}}", props => /*#__PURE__*/(0, _core.css)("&.", props.activeClassName, "{", styles.buttonActive, ";", _netlifyCmsUiDefault.Icon, "{", styles.buttonActive, ";}};label:AppHeaderButton;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0FwcC9IZWFkZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMkVnQiIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9BcHAvSGVhZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgSW1tdXRhYmxlUHJvcFR5cGVzIGZyb20gJ3JlYWN0LWltbXV0YWJsZS1wcm9wdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgeyB0cmFuc2xhdGUgfSBmcm9tICdyZWFjdC1wb2x5Z2xvdCc7XG5pbXBvcnQgeyBOYXZMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQge1xuICBJY29uLFxuICBEcm9wZG93bixcbiAgRHJvcGRvd25JdGVtLFxuICBTdHlsZWREcm9wZG93bkJ1dHRvbixcbiAgY29sb3JzLFxuICBsZW5ndGhzLFxuICBzaGFkb3dzLFxuICBidXR0b25zLFxufSBmcm9tICduZXRsaWZ5LWNtcy11aS1kZWZhdWx0JztcbmltcG9ydCBTZXR0aW5nc0Ryb3Bkb3duIGZyb20gJ1VJL1NldHRpbmdzRHJvcGRvd24nO1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gIGJ1dHRvbkFjdGl2ZTogY3NzYFxuICAgIGNvbG9yOiAke2NvbG9ycy5hY3RpdmV9O1xuICBgLFxufTtcblxuY29uc3QgQXBwSGVhZGVyID0gcHJvcHMgPT4gKFxuICA8aGVhZGVyXG4gICAgY3NzPXtjc3NgXG4gICAgICAke3NoYWRvd3MuZHJvcE1haW59O1xuICAgICAgcG9zaXRpb246IHN0aWNreTtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgdG9wOiAwO1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuZm9yZWdyb3VuZH07XG4gICAgICB6LWluZGV4OiAzMDA7XG4gICAgICBoZWlnaHQ6ICR7bGVuZ3Rocy50b3BCYXJIZWlnaHR9O1xuICAgIGB9XG4gICAgey4uLnByb3BzfVxuICAvPlxuKTtcblxuY29uc3QgQXBwSGVhZGVyQ29udGVudCA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgbWluLXdpZHRoOiA4MDBweDtcbiAgbWF4LXdpZHRoOiAxNDQwcHg7XG4gIHBhZGRpbmc6IDAgMTJweDtcbiAgbWFyZ2luOiAwIGF1dG87XG5gO1xuXG5jb25zdCBBcHBIZWFkZXJCdXR0b24gPSBzdHlsZWQuYnV0dG9uYFxuICAke2J1dHRvbnMuYnV0dG9ufTtcbiAgYmFja2dyb3VuZDogbm9uZTtcbiAgY29sb3I6ICM3YjgyOTA7XG4gIGZvbnQtZmFtaWx5OiBpbmhlcml0O1xuICBmb250LXNpemU6IDE2cHg7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICBwYWRkaW5nOiAxNnB4IDIwcHg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgJHtJY29ufSB7XG4gICAgbWFyZ2luLXJpZ2h0OiA0cHg7XG4gICAgY29sb3I6ICNiM2I5YzQ7XG4gIH1cblxuICAmOmhvdmVyLFxuICAmOmFjdGl2ZSxcbiAgJjpmb2N1cyB7XG4gICAgJHtzdHlsZXMuYnV0dG9uQWN0aXZlfTtcblxuICAgICR7SWNvbn0ge1xuICAgICAgJHtzdHlsZXMuYnV0dG9uQWN0aXZlfTtcbiAgICB9XG4gIH1cblxuICAke3Byb3BzID0+IGNzc2BcbiAgICAmLiR7cHJvcHMuYWN0aXZlQ2xhc3NOYW1lfSB7XG4gICAgICAke3N0eWxlcy5idXR0b25BY3RpdmV9O1xuXG4gICAgICAke0ljb259IHtcbiAgICAgICAgJHtzdHlsZXMuYnV0dG9uQWN0aXZlfTtcbiAgICAgIH1cbiAgICB9XG4gIGB9O1xuYDtcblxuY29uc3QgQXBwSGVhZGVyTmF2TGluayA9IEFwcEhlYWRlckJ1dHRvbi53aXRoQ29tcG9uZW50KE5hdkxpbmspO1xuXG5jb25zdCBBcHBIZWFkZXJBY3Rpb25zID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5gO1xuXG5jb25zdCBBcHBIZWFkZXJRdWlja05ld0J1dHRvbiA9IHN0eWxlZChTdHlsZWREcm9wZG93bkJ1dHRvbilgXG4gICR7YnV0dG9ucy5idXR0b259O1xuICAke2J1dHRvbnMubWVkaXVtfTtcbiAgJHtidXR0b25zLmdyYXl9O1xuICBtYXJnaW4tcmlnaHQ6IDhweDtcblxuICAmOmFmdGVyIHtcbiAgICB0b3A6IDExcHg7XG4gIH1cbmA7XG5cbmNvbnN0IEFwcEhlYWRlck5hdkxpc3QgPSBzdHlsZWQudWxgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIG1hcmdpbjogMDtcbiAgbGlzdC1zdHlsZTogbm9uZTtcbmA7XG5cbmNsYXNzIEhlYWRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgdXNlcjogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIGNvbGxlY3Rpb25zOiBJbW11dGFibGVQcm9wVHlwZXMub3JkZXJlZE1hcC5pc1JlcXVpcmVkLFxuICAgIG9uQ3JlYXRlRW50cnlDbGljazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkxvZ291dENsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9wZW5NZWRpYUxpYnJhcnk6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgaGFzV29ya2Zsb3c6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgZGlzcGxheVVybDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBpc1Rlc3RSZXBvOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIGhhbmRsZUNyZWF0ZVBvc3RDbGljayA9IGNvbGxlY3Rpb25OYW1lID0+IHtcbiAgICBjb25zdCB7IG9uQ3JlYXRlRW50cnlDbGljayB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAob25DcmVhdGVFbnRyeUNsaWNrKSB7XG4gICAgICBvbkNyZWF0ZUVudHJ5Q2xpY2soY29sbGVjdGlvbk5hbWUpO1xuICAgIH1cbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgdXNlcixcbiAgICAgIGNvbGxlY3Rpb25zLFxuICAgICAgb25Mb2dvdXRDbGljayxcbiAgICAgIG9wZW5NZWRpYUxpYnJhcnksXG4gICAgICBoYXNXb3JrZmxvdyxcbiAgICAgIGRpc3BsYXlVcmwsXG4gICAgICBpc1Rlc3RSZXBvLFxuICAgICAgdCxcbiAgICAgIHNob3dNZWRpYUJ1dHRvbixcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IGNyZWF0ZWFibGVDb2xsZWN0aW9ucyA9IGNvbGxlY3Rpb25zXG4gICAgICAuZmlsdGVyKGNvbGxlY3Rpb24gPT4gY29sbGVjdGlvbi5nZXQoJ2NyZWF0ZScpKVxuICAgICAgLnRvTGlzdCgpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxBcHBIZWFkZXI+XG4gICAgICAgIDxBcHBIZWFkZXJDb250ZW50PlxuICAgICAgICAgIDxuYXY+XG4gICAgICAgICAgICA8QXBwSGVhZGVyTmF2TGlzdD5cbiAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgIDxBcHBIZWFkZXJOYXZMaW5rXG4gICAgICAgICAgICAgICAgICB0bz1cIi9cIlxuICAgICAgICAgICAgICAgICAgYWN0aXZlQ2xhc3NOYW1lPVwiaGVhZGVyLWxpbmstYWN0aXZlXCJcbiAgICAgICAgICAgICAgICAgIGlzQWN0aXZlPXsobWF0Y2gsIGxvY2F0aW9uKSA9PiBsb2NhdGlvbi5wYXRobmFtZS5zdGFydHNXaXRoKCcvY29sbGVjdGlvbnMvJyl9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPEljb24gdHlwZT1cInBhZ2VcIiAvPlxuICAgICAgICAgICAgICAgICAge3QoJ2FwcC5oZWFkZXIuY29udGVudCcpfVxuICAgICAgICAgICAgICAgIDwvQXBwSGVhZGVyTmF2TGluaz5cbiAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAge2hhc1dvcmtmbG93ICYmIChcbiAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICA8QXBwSGVhZGVyTmF2TGluayB0bz1cIi93b3JrZmxvd1wiIGFjdGl2ZUNsYXNzTmFtZT1cImhlYWRlci1saW5rLWFjdGl2ZVwiPlxuICAgICAgICAgICAgICAgICAgICA8SWNvbiB0eXBlPVwid29ya2Zsb3dcIiAvPlxuICAgICAgICAgICAgICAgICAgICB7dCgnYXBwLmhlYWRlci53b3JrZmxvdycpfVxuICAgICAgICAgICAgICAgICAgPC9BcHBIZWFkZXJOYXZMaW5rPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIHtzaG93TWVkaWFCdXR0b24gJiYgKFxuICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgIDxBcHBIZWFkZXJCdXR0b24gb25DbGljaz17b3Blbk1lZGlhTGlicmFyeX0+XG4gICAgICAgICAgICAgICAgICAgIDxJY29uIHR5cGU9XCJtZWRpYS1hbHRcIiAvPlxuICAgICAgICAgICAgICAgICAgICB7dCgnYXBwLmhlYWRlci5tZWRpYScpfVxuICAgICAgICAgICAgICAgICAgPC9BcHBIZWFkZXJCdXR0b24+XG4gICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvQXBwSGVhZGVyTmF2TGlzdD5cbiAgICAgICAgICA8L25hdj5cbiAgICAgICAgICA8QXBwSGVhZGVyQWN0aW9ucz5cbiAgICAgICAgICAgIHtjcmVhdGVhYmxlQ29sbGVjdGlvbnMuc2l6ZSA+IDAgJiYgKFxuICAgICAgICAgICAgICA8RHJvcGRvd25cbiAgICAgICAgICAgICAgICByZW5kZXJCdXR0b249eygpID0+IChcbiAgICAgICAgICAgICAgICAgIDxBcHBIZWFkZXJRdWlja05ld0J1dHRvbj4ge3QoJ2FwcC5oZWFkZXIucXVpY2tBZGQnKX08L0FwcEhlYWRlclF1aWNrTmV3QnV0dG9uPlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgZHJvcGRvd25Ub3BPdmVybGFwPVwiMzBweFwiXG4gICAgICAgICAgICAgICAgZHJvcGRvd25XaWR0aD1cIjE2MHB4XCJcbiAgICAgICAgICAgICAgICBkcm9wZG93blBvc2l0aW9uPVwibGVmdFwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7Y3JlYXRlYWJsZUNvbGxlY3Rpb25zLm1hcChjb2xsZWN0aW9uID0+IChcbiAgICAgICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgICAgICAga2V5PXtjb2xsZWN0aW9uLmdldCgnbmFtZScpfVxuICAgICAgICAgICAgICAgICAgICBsYWJlbD17Y29sbGVjdGlvbi5nZXQoJ2xhYmVsX3Npbmd1bGFyJykgfHwgY29sbGVjdGlvbi5nZXQoJ2xhYmVsJyl9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMuaGFuZGxlQ3JlYXRlUG9zdENsaWNrKGNvbGxlY3Rpb24uZ2V0KCduYW1lJykpfVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgPC9Ecm9wZG93bj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8U2V0dGluZ3NEcm9wZG93blxuICAgICAgICAgICAgICBkaXNwbGF5VXJsPXtkaXNwbGF5VXJsfVxuICAgICAgICAgICAgICBpc1Rlc3RSZXBvPXtpc1Rlc3RSZXBvfVxuICAgICAgICAgICAgICBpbWFnZVVybD17dXNlci5nZXQoJ2F2YXRhcl91cmwnKX1cbiAgICAgICAgICAgICAgb25Mb2dvdXRDbGljaz17b25Mb2dvdXRDbGlja31cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9BcHBIZWFkZXJBY3Rpb25zPlxuICAgICAgICA8L0FwcEhlYWRlckNvbnRlbnQ+XG4gICAgICA8L0FwcEhlYWRlcj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRyYW5zbGF0ZSgpKEhlYWRlcik7XG4iXX0= */")), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0FwcC9IZWFkZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaURxQyIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9BcHAvSGVhZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgSW1tdXRhYmxlUHJvcFR5cGVzIGZyb20gJ3JlYWN0LWltbXV0YWJsZS1wcm9wdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgeyB0cmFuc2xhdGUgfSBmcm9tICdyZWFjdC1wb2x5Z2xvdCc7XG5pbXBvcnQgeyBOYXZMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQge1xuICBJY29uLFxuICBEcm9wZG93bixcbiAgRHJvcGRvd25JdGVtLFxuICBTdHlsZWREcm9wZG93bkJ1dHRvbixcbiAgY29sb3JzLFxuICBsZW5ndGhzLFxuICBzaGFkb3dzLFxuICBidXR0b25zLFxufSBmcm9tICduZXRsaWZ5LWNtcy11aS1kZWZhdWx0JztcbmltcG9ydCBTZXR0aW5nc0Ryb3Bkb3duIGZyb20gJ1VJL1NldHRpbmdzRHJvcGRvd24nO1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gIGJ1dHRvbkFjdGl2ZTogY3NzYFxuICAgIGNvbG9yOiAke2NvbG9ycy5hY3RpdmV9O1xuICBgLFxufTtcblxuY29uc3QgQXBwSGVhZGVyID0gcHJvcHMgPT4gKFxuICA8aGVhZGVyXG4gICAgY3NzPXtjc3NgXG4gICAgICAke3NoYWRvd3MuZHJvcE1haW59O1xuICAgICAgcG9zaXRpb246IHN0aWNreTtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgdG9wOiAwO1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuZm9yZWdyb3VuZH07XG4gICAgICB6LWluZGV4OiAzMDA7XG4gICAgICBoZWlnaHQ6ICR7bGVuZ3Rocy50b3BCYXJIZWlnaHR9O1xuICAgIGB9XG4gICAgey4uLnByb3BzfVxuICAvPlxuKTtcblxuY29uc3QgQXBwSGVhZGVyQ29udGVudCA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgbWluLXdpZHRoOiA4MDBweDtcbiAgbWF4LXdpZHRoOiAxNDQwcHg7XG4gIHBhZGRpbmc6IDAgMTJweDtcbiAgbWFyZ2luOiAwIGF1dG87XG5gO1xuXG5jb25zdCBBcHBIZWFkZXJCdXR0b24gPSBzdHlsZWQuYnV0dG9uYFxuICAke2J1dHRvbnMuYnV0dG9ufTtcbiAgYmFja2dyb3VuZDogbm9uZTtcbiAgY29sb3I6ICM3YjgyOTA7XG4gIGZvbnQtZmFtaWx5OiBpbmhlcml0O1xuICBmb250LXNpemU6IDE2cHg7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICBwYWRkaW5nOiAxNnB4IDIwcHg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgJHtJY29ufSB7XG4gICAgbWFyZ2luLXJpZ2h0OiA0cHg7XG4gICAgY29sb3I6ICNiM2I5YzQ7XG4gIH1cblxuICAmOmhvdmVyLFxuICAmOmFjdGl2ZSxcbiAgJjpmb2N1cyB7XG4gICAgJHtzdHlsZXMuYnV0dG9uQWN0aXZlfTtcblxuICAgICR7SWNvbn0ge1xuICAgICAgJHtzdHlsZXMuYnV0dG9uQWN0aXZlfTtcbiAgICB9XG4gIH1cblxuICAke3Byb3BzID0+IGNzc2BcbiAgICAmLiR7cHJvcHMuYWN0aXZlQ2xhc3NOYW1lfSB7XG4gICAgICAke3N0eWxlcy5idXR0b25BY3RpdmV9O1xuXG4gICAgICAke0ljb259IHtcbiAgICAgICAgJHtzdHlsZXMuYnV0dG9uQWN0aXZlfTtcbiAgICAgIH1cbiAgICB9XG4gIGB9O1xuYDtcblxuY29uc3QgQXBwSGVhZGVyTmF2TGluayA9IEFwcEhlYWRlckJ1dHRvbi53aXRoQ29tcG9uZW50KE5hdkxpbmspO1xuXG5jb25zdCBBcHBIZWFkZXJBY3Rpb25zID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5gO1xuXG5jb25zdCBBcHBIZWFkZXJRdWlja05ld0J1dHRvbiA9IHN0eWxlZChTdHlsZWREcm9wZG93bkJ1dHRvbilgXG4gICR7YnV0dG9ucy5idXR0b259O1xuICAke2J1dHRvbnMubWVkaXVtfTtcbiAgJHtidXR0b25zLmdyYXl9O1xuICBtYXJnaW4tcmlnaHQ6IDhweDtcblxuICAmOmFmdGVyIHtcbiAgICB0b3A6IDExcHg7XG4gIH1cbmA7XG5cbmNvbnN0IEFwcEhlYWRlck5hdkxpc3QgPSBzdHlsZWQudWxgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIG1hcmdpbjogMDtcbiAgbGlzdC1zdHlsZTogbm9uZTtcbmA7XG5cbmNsYXNzIEhlYWRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgdXNlcjogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIGNvbGxlY3Rpb25zOiBJbW11dGFibGVQcm9wVHlwZXMub3JkZXJlZE1hcC5pc1JlcXVpcmVkLFxuICAgIG9uQ3JlYXRlRW50cnlDbGljazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkxvZ291dENsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9wZW5NZWRpYUxpYnJhcnk6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgaGFzV29ya2Zsb3c6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgZGlzcGxheVVybDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBpc1Rlc3RSZXBvOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIGhhbmRsZUNyZWF0ZVBvc3RDbGljayA9IGNvbGxlY3Rpb25OYW1lID0+IHtcbiAgICBjb25zdCB7IG9uQ3JlYXRlRW50cnlDbGljayB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAob25DcmVhdGVFbnRyeUNsaWNrKSB7XG4gICAgICBvbkNyZWF0ZUVudHJ5Q2xpY2soY29sbGVjdGlvbk5hbWUpO1xuICAgIH1cbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgdXNlcixcbiAgICAgIGNvbGxlY3Rpb25zLFxuICAgICAgb25Mb2dvdXRDbGljayxcbiAgICAgIG9wZW5NZWRpYUxpYnJhcnksXG4gICAgICBoYXNXb3JrZmxvdyxcbiAgICAgIGRpc3BsYXlVcmwsXG4gICAgICBpc1Rlc3RSZXBvLFxuICAgICAgdCxcbiAgICAgIHNob3dNZWRpYUJ1dHRvbixcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IGNyZWF0ZWFibGVDb2xsZWN0aW9ucyA9IGNvbGxlY3Rpb25zXG4gICAgICAuZmlsdGVyKGNvbGxlY3Rpb24gPT4gY29sbGVjdGlvbi5nZXQoJ2NyZWF0ZScpKVxuICAgICAgLnRvTGlzdCgpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxBcHBIZWFkZXI+XG4gICAgICAgIDxBcHBIZWFkZXJDb250ZW50PlxuICAgICAgICAgIDxuYXY+XG4gICAgICAgICAgICA8QXBwSGVhZGVyTmF2TGlzdD5cbiAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgIDxBcHBIZWFkZXJOYXZMaW5rXG4gICAgICAgICAgICAgICAgICB0bz1cIi9cIlxuICAgICAgICAgICAgICAgICAgYWN0aXZlQ2xhc3NOYW1lPVwiaGVhZGVyLWxpbmstYWN0aXZlXCJcbiAgICAgICAgICAgICAgICAgIGlzQWN0aXZlPXsobWF0Y2gsIGxvY2F0aW9uKSA9PiBsb2NhdGlvbi5wYXRobmFtZS5zdGFydHNXaXRoKCcvY29sbGVjdGlvbnMvJyl9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPEljb24gdHlwZT1cInBhZ2VcIiAvPlxuICAgICAgICAgICAgICAgICAge3QoJ2FwcC5oZWFkZXIuY29udGVudCcpfVxuICAgICAgICAgICAgICAgIDwvQXBwSGVhZGVyTmF2TGluaz5cbiAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAge2hhc1dvcmtmbG93ICYmIChcbiAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICA8QXBwSGVhZGVyTmF2TGluayB0bz1cIi93b3JrZmxvd1wiIGFjdGl2ZUNsYXNzTmFtZT1cImhlYWRlci1saW5rLWFjdGl2ZVwiPlxuICAgICAgICAgICAgICAgICAgICA8SWNvbiB0eXBlPVwid29ya2Zsb3dcIiAvPlxuICAgICAgICAgICAgICAgICAgICB7dCgnYXBwLmhlYWRlci53b3JrZmxvdycpfVxuICAgICAgICAgICAgICAgICAgPC9BcHBIZWFkZXJOYXZMaW5rPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIHtzaG93TWVkaWFCdXR0b24gJiYgKFxuICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgIDxBcHBIZWFkZXJCdXR0b24gb25DbGljaz17b3Blbk1lZGlhTGlicmFyeX0+XG4gICAgICAgICAgICAgICAgICAgIDxJY29uIHR5cGU9XCJtZWRpYS1hbHRcIiAvPlxuICAgICAgICAgICAgICAgICAgICB7dCgnYXBwLmhlYWRlci5tZWRpYScpfVxuICAgICAgICAgICAgICAgICAgPC9BcHBIZWFkZXJCdXR0b24+XG4gICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvQXBwSGVhZGVyTmF2TGlzdD5cbiAgICAgICAgICA8L25hdj5cbiAgICAgICAgICA8QXBwSGVhZGVyQWN0aW9ucz5cbiAgICAgICAgICAgIHtjcmVhdGVhYmxlQ29sbGVjdGlvbnMuc2l6ZSA+IDAgJiYgKFxuICAgICAgICAgICAgICA8RHJvcGRvd25cbiAgICAgICAgICAgICAgICByZW5kZXJCdXR0b249eygpID0+IChcbiAgICAgICAgICAgICAgICAgIDxBcHBIZWFkZXJRdWlja05ld0J1dHRvbj4ge3QoJ2FwcC5oZWFkZXIucXVpY2tBZGQnKX08L0FwcEhlYWRlclF1aWNrTmV3QnV0dG9uPlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgZHJvcGRvd25Ub3BPdmVybGFwPVwiMzBweFwiXG4gICAgICAgICAgICAgICAgZHJvcGRvd25XaWR0aD1cIjE2MHB4XCJcbiAgICAgICAgICAgICAgICBkcm9wZG93blBvc2l0aW9uPVwibGVmdFwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7Y3JlYXRlYWJsZUNvbGxlY3Rpb25zLm1hcChjb2xsZWN0aW9uID0+IChcbiAgICAgICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgICAgICAga2V5PXtjb2xsZWN0aW9uLmdldCgnbmFtZScpfVxuICAgICAgICAgICAgICAgICAgICBsYWJlbD17Y29sbGVjdGlvbi5nZXQoJ2xhYmVsX3Npbmd1bGFyJykgfHwgY29sbGVjdGlvbi5nZXQoJ2xhYmVsJyl9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMuaGFuZGxlQ3JlYXRlUG9zdENsaWNrKGNvbGxlY3Rpb24uZ2V0KCduYW1lJykpfVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgPC9Ecm9wZG93bj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8U2V0dGluZ3NEcm9wZG93blxuICAgICAgICAgICAgICBkaXNwbGF5VXJsPXtkaXNwbGF5VXJsfVxuICAgICAgICAgICAgICBpc1Rlc3RSZXBvPXtpc1Rlc3RSZXBvfVxuICAgICAgICAgICAgICBpbWFnZVVybD17dXNlci5nZXQoJ2F2YXRhcl91cmwnKX1cbiAgICAgICAgICAgICAgb25Mb2dvdXRDbGljaz17b25Mb2dvdXRDbGlja31cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9BcHBIZWFkZXJBY3Rpb25zPlxuICAgICAgICA8L0FwcEhlYWRlckNvbnRlbnQ+XG4gICAgICA8L0FwcEhlYWRlcj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRyYW5zbGF0ZSgpKEhlYWRlcik7XG4iXX0= */"));
const AppHeaderNavLink = AppHeaderButton.withComponent(_reactRouterDom.NavLink, {
  target: "e16dayda5",
  label: "AppHeaderNavLink"
});
const AppHeaderActions = (0, _styledBase.default)("div", {
  target: "e16dayda2",
  label: "AppHeaderActions"
})(process.env.NODE_ENV === "production" ? {
  name: "18biwo",
  styles: "display:inline-flex;align-items:center;"
} : {
  name: "18biwo",
  styles: "display:inline-flex;align-items:center;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0FwcC9IZWFkZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBd0ZtQyIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9BcHAvSGVhZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgSW1tdXRhYmxlUHJvcFR5cGVzIGZyb20gJ3JlYWN0LWltbXV0YWJsZS1wcm9wdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgeyB0cmFuc2xhdGUgfSBmcm9tICdyZWFjdC1wb2x5Z2xvdCc7XG5pbXBvcnQgeyBOYXZMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQge1xuICBJY29uLFxuICBEcm9wZG93bixcbiAgRHJvcGRvd25JdGVtLFxuICBTdHlsZWREcm9wZG93bkJ1dHRvbixcbiAgY29sb3JzLFxuICBsZW5ndGhzLFxuICBzaGFkb3dzLFxuICBidXR0b25zLFxufSBmcm9tICduZXRsaWZ5LWNtcy11aS1kZWZhdWx0JztcbmltcG9ydCBTZXR0aW5nc0Ryb3Bkb3duIGZyb20gJ1VJL1NldHRpbmdzRHJvcGRvd24nO1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gIGJ1dHRvbkFjdGl2ZTogY3NzYFxuICAgIGNvbG9yOiAke2NvbG9ycy5hY3RpdmV9O1xuICBgLFxufTtcblxuY29uc3QgQXBwSGVhZGVyID0gcHJvcHMgPT4gKFxuICA8aGVhZGVyXG4gICAgY3NzPXtjc3NgXG4gICAgICAke3NoYWRvd3MuZHJvcE1haW59O1xuICAgICAgcG9zaXRpb246IHN0aWNreTtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgdG9wOiAwO1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuZm9yZWdyb3VuZH07XG4gICAgICB6LWluZGV4OiAzMDA7XG4gICAgICBoZWlnaHQ6ICR7bGVuZ3Rocy50b3BCYXJIZWlnaHR9O1xuICAgIGB9XG4gICAgey4uLnByb3BzfVxuICAvPlxuKTtcblxuY29uc3QgQXBwSGVhZGVyQ29udGVudCA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgbWluLXdpZHRoOiA4MDBweDtcbiAgbWF4LXdpZHRoOiAxNDQwcHg7XG4gIHBhZGRpbmc6IDAgMTJweDtcbiAgbWFyZ2luOiAwIGF1dG87XG5gO1xuXG5jb25zdCBBcHBIZWFkZXJCdXR0b24gPSBzdHlsZWQuYnV0dG9uYFxuICAke2J1dHRvbnMuYnV0dG9ufTtcbiAgYmFja2dyb3VuZDogbm9uZTtcbiAgY29sb3I6ICM3YjgyOTA7XG4gIGZvbnQtZmFtaWx5OiBpbmhlcml0O1xuICBmb250LXNpemU6IDE2cHg7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICBwYWRkaW5nOiAxNnB4IDIwcHg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgJHtJY29ufSB7XG4gICAgbWFyZ2luLXJpZ2h0OiA0cHg7XG4gICAgY29sb3I6ICNiM2I5YzQ7XG4gIH1cblxuICAmOmhvdmVyLFxuICAmOmFjdGl2ZSxcbiAgJjpmb2N1cyB7XG4gICAgJHtzdHlsZXMuYnV0dG9uQWN0aXZlfTtcblxuICAgICR7SWNvbn0ge1xuICAgICAgJHtzdHlsZXMuYnV0dG9uQWN0aXZlfTtcbiAgICB9XG4gIH1cblxuICAke3Byb3BzID0+IGNzc2BcbiAgICAmLiR7cHJvcHMuYWN0aXZlQ2xhc3NOYW1lfSB7XG4gICAgICAke3N0eWxlcy5idXR0b25BY3RpdmV9O1xuXG4gICAgICAke0ljb259IHtcbiAgICAgICAgJHtzdHlsZXMuYnV0dG9uQWN0aXZlfTtcbiAgICAgIH1cbiAgICB9XG4gIGB9O1xuYDtcblxuY29uc3QgQXBwSGVhZGVyTmF2TGluayA9IEFwcEhlYWRlckJ1dHRvbi53aXRoQ29tcG9uZW50KE5hdkxpbmspO1xuXG5jb25zdCBBcHBIZWFkZXJBY3Rpb25zID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5gO1xuXG5jb25zdCBBcHBIZWFkZXJRdWlja05ld0J1dHRvbiA9IHN0eWxlZChTdHlsZWREcm9wZG93bkJ1dHRvbilgXG4gICR7YnV0dG9ucy5idXR0b259O1xuICAke2J1dHRvbnMubWVkaXVtfTtcbiAgJHtidXR0b25zLmdyYXl9O1xuICBtYXJnaW4tcmlnaHQ6IDhweDtcblxuICAmOmFmdGVyIHtcbiAgICB0b3A6IDExcHg7XG4gIH1cbmA7XG5cbmNvbnN0IEFwcEhlYWRlck5hdkxpc3QgPSBzdHlsZWQudWxgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIG1hcmdpbjogMDtcbiAgbGlzdC1zdHlsZTogbm9uZTtcbmA7XG5cbmNsYXNzIEhlYWRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgdXNlcjogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIGNvbGxlY3Rpb25zOiBJbW11dGFibGVQcm9wVHlwZXMub3JkZXJlZE1hcC5pc1JlcXVpcmVkLFxuICAgIG9uQ3JlYXRlRW50cnlDbGljazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkxvZ291dENsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9wZW5NZWRpYUxpYnJhcnk6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgaGFzV29ya2Zsb3c6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgZGlzcGxheVVybDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBpc1Rlc3RSZXBvOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIGhhbmRsZUNyZWF0ZVBvc3RDbGljayA9IGNvbGxlY3Rpb25OYW1lID0+IHtcbiAgICBjb25zdCB7IG9uQ3JlYXRlRW50cnlDbGljayB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAob25DcmVhdGVFbnRyeUNsaWNrKSB7XG4gICAgICBvbkNyZWF0ZUVudHJ5Q2xpY2soY29sbGVjdGlvbk5hbWUpO1xuICAgIH1cbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgdXNlcixcbiAgICAgIGNvbGxlY3Rpb25zLFxuICAgICAgb25Mb2dvdXRDbGljayxcbiAgICAgIG9wZW5NZWRpYUxpYnJhcnksXG4gICAgICBoYXNXb3JrZmxvdyxcbiAgICAgIGRpc3BsYXlVcmwsXG4gICAgICBpc1Rlc3RSZXBvLFxuICAgICAgdCxcbiAgICAgIHNob3dNZWRpYUJ1dHRvbixcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IGNyZWF0ZWFibGVDb2xsZWN0aW9ucyA9IGNvbGxlY3Rpb25zXG4gICAgICAuZmlsdGVyKGNvbGxlY3Rpb24gPT4gY29sbGVjdGlvbi5nZXQoJ2NyZWF0ZScpKVxuICAgICAgLnRvTGlzdCgpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxBcHBIZWFkZXI+XG4gICAgICAgIDxBcHBIZWFkZXJDb250ZW50PlxuICAgICAgICAgIDxuYXY+XG4gICAgICAgICAgICA8QXBwSGVhZGVyTmF2TGlzdD5cbiAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgIDxBcHBIZWFkZXJOYXZMaW5rXG4gICAgICAgICAgICAgICAgICB0bz1cIi9cIlxuICAgICAgICAgICAgICAgICAgYWN0aXZlQ2xhc3NOYW1lPVwiaGVhZGVyLWxpbmstYWN0aXZlXCJcbiAgICAgICAgICAgICAgICAgIGlzQWN0aXZlPXsobWF0Y2gsIGxvY2F0aW9uKSA9PiBsb2NhdGlvbi5wYXRobmFtZS5zdGFydHNXaXRoKCcvY29sbGVjdGlvbnMvJyl9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPEljb24gdHlwZT1cInBhZ2VcIiAvPlxuICAgICAgICAgICAgICAgICAge3QoJ2FwcC5oZWFkZXIuY29udGVudCcpfVxuICAgICAgICAgICAgICAgIDwvQXBwSGVhZGVyTmF2TGluaz5cbiAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAge2hhc1dvcmtmbG93ICYmIChcbiAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICA8QXBwSGVhZGVyTmF2TGluayB0bz1cIi93b3JrZmxvd1wiIGFjdGl2ZUNsYXNzTmFtZT1cImhlYWRlci1saW5rLWFjdGl2ZVwiPlxuICAgICAgICAgICAgICAgICAgICA8SWNvbiB0eXBlPVwid29ya2Zsb3dcIiAvPlxuICAgICAgICAgICAgICAgICAgICB7dCgnYXBwLmhlYWRlci53b3JrZmxvdycpfVxuICAgICAgICAgICAgICAgICAgPC9BcHBIZWFkZXJOYXZMaW5rPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIHtzaG93TWVkaWFCdXR0b24gJiYgKFxuICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgIDxBcHBIZWFkZXJCdXR0b24gb25DbGljaz17b3Blbk1lZGlhTGlicmFyeX0+XG4gICAgICAgICAgICAgICAgICAgIDxJY29uIHR5cGU9XCJtZWRpYS1hbHRcIiAvPlxuICAgICAgICAgICAgICAgICAgICB7dCgnYXBwLmhlYWRlci5tZWRpYScpfVxuICAgICAgICAgICAgICAgICAgPC9BcHBIZWFkZXJCdXR0b24+XG4gICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvQXBwSGVhZGVyTmF2TGlzdD5cbiAgICAgICAgICA8L25hdj5cbiAgICAgICAgICA8QXBwSGVhZGVyQWN0aW9ucz5cbiAgICAgICAgICAgIHtjcmVhdGVhYmxlQ29sbGVjdGlvbnMuc2l6ZSA+IDAgJiYgKFxuICAgICAgICAgICAgICA8RHJvcGRvd25cbiAgICAgICAgICAgICAgICByZW5kZXJCdXR0b249eygpID0+IChcbiAgICAgICAgICAgICAgICAgIDxBcHBIZWFkZXJRdWlja05ld0J1dHRvbj4ge3QoJ2FwcC5oZWFkZXIucXVpY2tBZGQnKX08L0FwcEhlYWRlclF1aWNrTmV3QnV0dG9uPlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgZHJvcGRvd25Ub3BPdmVybGFwPVwiMzBweFwiXG4gICAgICAgICAgICAgICAgZHJvcGRvd25XaWR0aD1cIjE2MHB4XCJcbiAgICAgICAgICAgICAgICBkcm9wZG93blBvc2l0aW9uPVwibGVmdFwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7Y3JlYXRlYWJsZUNvbGxlY3Rpb25zLm1hcChjb2xsZWN0aW9uID0+IChcbiAgICAgICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgICAgICAga2V5PXtjb2xsZWN0aW9uLmdldCgnbmFtZScpfVxuICAgICAgICAgICAgICAgICAgICBsYWJlbD17Y29sbGVjdGlvbi5nZXQoJ2xhYmVsX3Npbmd1bGFyJykgfHwgY29sbGVjdGlvbi5nZXQoJ2xhYmVsJyl9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMuaGFuZGxlQ3JlYXRlUG9zdENsaWNrKGNvbGxlY3Rpb24uZ2V0KCduYW1lJykpfVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgPC9Ecm9wZG93bj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8U2V0dGluZ3NEcm9wZG93blxuICAgICAgICAgICAgICBkaXNwbGF5VXJsPXtkaXNwbGF5VXJsfVxuICAgICAgICAgICAgICBpc1Rlc3RSZXBvPXtpc1Rlc3RSZXBvfVxuICAgICAgICAgICAgICBpbWFnZVVybD17dXNlci5nZXQoJ2F2YXRhcl91cmwnKX1cbiAgICAgICAgICAgICAgb25Mb2dvdXRDbGljaz17b25Mb2dvdXRDbGlja31cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9BcHBIZWFkZXJBY3Rpb25zPlxuICAgICAgICA8L0FwcEhlYWRlckNvbnRlbnQ+XG4gICAgICA8L0FwcEhlYWRlcj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRyYW5zbGF0ZSgpKEhlYWRlcik7XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const AppHeaderQuickNewButton = ( /*#__PURE__*/0, _styledBase.default)(_netlifyCmsUiDefault.StyledDropdownButton, {
  target: "e16dayda3",
  label: "AppHeaderQuickNewButton"
})(_netlifyCmsUiDefault.buttons.button, ";", _netlifyCmsUiDefault.buttons.medium, ";", _netlifyCmsUiDefault.buttons.gray, ";margin-right:8px;&:after{top:11px;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0FwcC9IZWFkZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNkY0RCIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9BcHAvSGVhZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgSW1tdXRhYmxlUHJvcFR5cGVzIGZyb20gJ3JlYWN0LWltbXV0YWJsZS1wcm9wdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgeyB0cmFuc2xhdGUgfSBmcm9tICdyZWFjdC1wb2x5Z2xvdCc7XG5pbXBvcnQgeyBOYXZMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQge1xuICBJY29uLFxuICBEcm9wZG93bixcbiAgRHJvcGRvd25JdGVtLFxuICBTdHlsZWREcm9wZG93bkJ1dHRvbixcbiAgY29sb3JzLFxuICBsZW5ndGhzLFxuICBzaGFkb3dzLFxuICBidXR0b25zLFxufSBmcm9tICduZXRsaWZ5LWNtcy11aS1kZWZhdWx0JztcbmltcG9ydCBTZXR0aW5nc0Ryb3Bkb3duIGZyb20gJ1VJL1NldHRpbmdzRHJvcGRvd24nO1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gIGJ1dHRvbkFjdGl2ZTogY3NzYFxuICAgIGNvbG9yOiAke2NvbG9ycy5hY3RpdmV9O1xuICBgLFxufTtcblxuY29uc3QgQXBwSGVhZGVyID0gcHJvcHMgPT4gKFxuICA8aGVhZGVyXG4gICAgY3NzPXtjc3NgXG4gICAgICAke3NoYWRvd3MuZHJvcE1haW59O1xuICAgICAgcG9zaXRpb246IHN0aWNreTtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgdG9wOiAwO1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuZm9yZWdyb3VuZH07XG4gICAgICB6LWluZGV4OiAzMDA7XG4gICAgICBoZWlnaHQ6ICR7bGVuZ3Rocy50b3BCYXJIZWlnaHR9O1xuICAgIGB9XG4gICAgey4uLnByb3BzfVxuICAvPlxuKTtcblxuY29uc3QgQXBwSGVhZGVyQ29udGVudCA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgbWluLXdpZHRoOiA4MDBweDtcbiAgbWF4LXdpZHRoOiAxNDQwcHg7XG4gIHBhZGRpbmc6IDAgMTJweDtcbiAgbWFyZ2luOiAwIGF1dG87XG5gO1xuXG5jb25zdCBBcHBIZWFkZXJCdXR0b24gPSBzdHlsZWQuYnV0dG9uYFxuICAke2J1dHRvbnMuYnV0dG9ufTtcbiAgYmFja2dyb3VuZDogbm9uZTtcbiAgY29sb3I6ICM3YjgyOTA7XG4gIGZvbnQtZmFtaWx5OiBpbmhlcml0O1xuICBmb250LXNpemU6IDE2cHg7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICBwYWRkaW5nOiAxNnB4IDIwcHg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgJHtJY29ufSB7XG4gICAgbWFyZ2luLXJpZ2h0OiA0cHg7XG4gICAgY29sb3I6ICNiM2I5YzQ7XG4gIH1cblxuICAmOmhvdmVyLFxuICAmOmFjdGl2ZSxcbiAgJjpmb2N1cyB7XG4gICAgJHtzdHlsZXMuYnV0dG9uQWN0aXZlfTtcblxuICAgICR7SWNvbn0ge1xuICAgICAgJHtzdHlsZXMuYnV0dG9uQWN0aXZlfTtcbiAgICB9XG4gIH1cblxuICAke3Byb3BzID0+IGNzc2BcbiAgICAmLiR7cHJvcHMuYWN0aXZlQ2xhc3NOYW1lfSB7XG4gICAgICAke3N0eWxlcy5idXR0b25BY3RpdmV9O1xuXG4gICAgICAke0ljb259IHtcbiAgICAgICAgJHtzdHlsZXMuYnV0dG9uQWN0aXZlfTtcbiAgICAgIH1cbiAgICB9XG4gIGB9O1xuYDtcblxuY29uc3QgQXBwSGVhZGVyTmF2TGluayA9IEFwcEhlYWRlckJ1dHRvbi53aXRoQ29tcG9uZW50KE5hdkxpbmspO1xuXG5jb25zdCBBcHBIZWFkZXJBY3Rpb25zID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5gO1xuXG5jb25zdCBBcHBIZWFkZXJRdWlja05ld0J1dHRvbiA9IHN0eWxlZChTdHlsZWREcm9wZG93bkJ1dHRvbilgXG4gICR7YnV0dG9ucy5idXR0b259O1xuICAke2J1dHRvbnMubWVkaXVtfTtcbiAgJHtidXR0b25zLmdyYXl9O1xuICBtYXJnaW4tcmlnaHQ6IDhweDtcblxuICAmOmFmdGVyIHtcbiAgICB0b3A6IDExcHg7XG4gIH1cbmA7XG5cbmNvbnN0IEFwcEhlYWRlck5hdkxpc3QgPSBzdHlsZWQudWxgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIG1hcmdpbjogMDtcbiAgbGlzdC1zdHlsZTogbm9uZTtcbmA7XG5cbmNsYXNzIEhlYWRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgdXNlcjogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIGNvbGxlY3Rpb25zOiBJbW11dGFibGVQcm9wVHlwZXMub3JkZXJlZE1hcC5pc1JlcXVpcmVkLFxuICAgIG9uQ3JlYXRlRW50cnlDbGljazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkxvZ291dENsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9wZW5NZWRpYUxpYnJhcnk6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgaGFzV29ya2Zsb3c6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgZGlzcGxheVVybDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBpc1Rlc3RSZXBvOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIGhhbmRsZUNyZWF0ZVBvc3RDbGljayA9IGNvbGxlY3Rpb25OYW1lID0+IHtcbiAgICBjb25zdCB7IG9uQ3JlYXRlRW50cnlDbGljayB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAob25DcmVhdGVFbnRyeUNsaWNrKSB7XG4gICAgICBvbkNyZWF0ZUVudHJ5Q2xpY2soY29sbGVjdGlvbk5hbWUpO1xuICAgIH1cbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgdXNlcixcbiAgICAgIGNvbGxlY3Rpb25zLFxuICAgICAgb25Mb2dvdXRDbGljayxcbiAgICAgIG9wZW5NZWRpYUxpYnJhcnksXG4gICAgICBoYXNXb3JrZmxvdyxcbiAgICAgIGRpc3BsYXlVcmwsXG4gICAgICBpc1Rlc3RSZXBvLFxuICAgICAgdCxcbiAgICAgIHNob3dNZWRpYUJ1dHRvbixcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IGNyZWF0ZWFibGVDb2xsZWN0aW9ucyA9IGNvbGxlY3Rpb25zXG4gICAgICAuZmlsdGVyKGNvbGxlY3Rpb24gPT4gY29sbGVjdGlvbi5nZXQoJ2NyZWF0ZScpKVxuICAgICAgLnRvTGlzdCgpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxBcHBIZWFkZXI+XG4gICAgICAgIDxBcHBIZWFkZXJDb250ZW50PlxuICAgICAgICAgIDxuYXY+XG4gICAgICAgICAgICA8QXBwSGVhZGVyTmF2TGlzdD5cbiAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgIDxBcHBIZWFkZXJOYXZMaW5rXG4gICAgICAgICAgICAgICAgICB0bz1cIi9cIlxuICAgICAgICAgICAgICAgICAgYWN0aXZlQ2xhc3NOYW1lPVwiaGVhZGVyLWxpbmstYWN0aXZlXCJcbiAgICAgICAgICAgICAgICAgIGlzQWN0aXZlPXsobWF0Y2gsIGxvY2F0aW9uKSA9PiBsb2NhdGlvbi5wYXRobmFtZS5zdGFydHNXaXRoKCcvY29sbGVjdGlvbnMvJyl9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPEljb24gdHlwZT1cInBhZ2VcIiAvPlxuICAgICAgICAgICAgICAgICAge3QoJ2FwcC5oZWFkZXIuY29udGVudCcpfVxuICAgICAgICAgICAgICAgIDwvQXBwSGVhZGVyTmF2TGluaz5cbiAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAge2hhc1dvcmtmbG93ICYmIChcbiAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICA8QXBwSGVhZGVyTmF2TGluayB0bz1cIi93b3JrZmxvd1wiIGFjdGl2ZUNsYXNzTmFtZT1cImhlYWRlci1saW5rLWFjdGl2ZVwiPlxuICAgICAgICAgICAgICAgICAgICA8SWNvbiB0eXBlPVwid29ya2Zsb3dcIiAvPlxuICAgICAgICAgICAgICAgICAgICB7dCgnYXBwLmhlYWRlci53b3JrZmxvdycpfVxuICAgICAgICAgICAgICAgICAgPC9BcHBIZWFkZXJOYXZMaW5rPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIHtzaG93TWVkaWFCdXR0b24gJiYgKFxuICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgIDxBcHBIZWFkZXJCdXR0b24gb25DbGljaz17b3Blbk1lZGlhTGlicmFyeX0+XG4gICAgICAgICAgICAgICAgICAgIDxJY29uIHR5cGU9XCJtZWRpYS1hbHRcIiAvPlxuICAgICAgICAgICAgICAgICAgICB7dCgnYXBwLmhlYWRlci5tZWRpYScpfVxuICAgICAgICAgICAgICAgICAgPC9BcHBIZWFkZXJCdXR0b24+XG4gICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvQXBwSGVhZGVyTmF2TGlzdD5cbiAgICAgICAgICA8L25hdj5cbiAgICAgICAgICA8QXBwSGVhZGVyQWN0aW9ucz5cbiAgICAgICAgICAgIHtjcmVhdGVhYmxlQ29sbGVjdGlvbnMuc2l6ZSA+IDAgJiYgKFxuICAgICAgICAgICAgICA8RHJvcGRvd25cbiAgICAgICAgICAgICAgICByZW5kZXJCdXR0b249eygpID0+IChcbiAgICAgICAgICAgICAgICAgIDxBcHBIZWFkZXJRdWlja05ld0J1dHRvbj4ge3QoJ2FwcC5oZWFkZXIucXVpY2tBZGQnKX08L0FwcEhlYWRlclF1aWNrTmV3QnV0dG9uPlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgZHJvcGRvd25Ub3BPdmVybGFwPVwiMzBweFwiXG4gICAgICAgICAgICAgICAgZHJvcGRvd25XaWR0aD1cIjE2MHB4XCJcbiAgICAgICAgICAgICAgICBkcm9wZG93blBvc2l0aW9uPVwibGVmdFwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7Y3JlYXRlYWJsZUNvbGxlY3Rpb25zLm1hcChjb2xsZWN0aW9uID0+IChcbiAgICAgICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgICAgICAga2V5PXtjb2xsZWN0aW9uLmdldCgnbmFtZScpfVxuICAgICAgICAgICAgICAgICAgICBsYWJlbD17Y29sbGVjdGlvbi5nZXQoJ2xhYmVsX3Npbmd1bGFyJykgfHwgY29sbGVjdGlvbi5nZXQoJ2xhYmVsJyl9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMuaGFuZGxlQ3JlYXRlUG9zdENsaWNrKGNvbGxlY3Rpb24uZ2V0KCduYW1lJykpfVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgPC9Ecm9wZG93bj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8U2V0dGluZ3NEcm9wZG93blxuICAgICAgICAgICAgICBkaXNwbGF5VXJsPXtkaXNwbGF5VXJsfVxuICAgICAgICAgICAgICBpc1Rlc3RSZXBvPXtpc1Rlc3RSZXBvfVxuICAgICAgICAgICAgICBpbWFnZVVybD17dXNlci5nZXQoJ2F2YXRhcl91cmwnKX1cbiAgICAgICAgICAgICAgb25Mb2dvdXRDbGljaz17b25Mb2dvdXRDbGlja31cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9BcHBIZWFkZXJBY3Rpb25zPlxuICAgICAgICA8L0FwcEhlYWRlckNvbnRlbnQ+XG4gICAgICA8L0FwcEhlYWRlcj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRyYW5zbGF0ZSgpKEhlYWRlcik7XG4iXX0= */"));
const AppHeaderNavList = (0, _styledBase.default)("ul", {
  target: "e16dayda4",
  label: "AppHeaderNavList"
})(process.env.NODE_ENV === "production" ? {
  name: "lsxu3a",
  styles: "display:flex;margin:0;list-style:none;"
} : {
  name: "lsxu3a",
  styles: "display:flex;margin:0;list-style:none;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0FwcC9IZWFkZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBd0drQyIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9BcHAvSGVhZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgSW1tdXRhYmxlUHJvcFR5cGVzIGZyb20gJ3JlYWN0LWltbXV0YWJsZS1wcm9wdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgeyB0cmFuc2xhdGUgfSBmcm9tICdyZWFjdC1wb2x5Z2xvdCc7XG5pbXBvcnQgeyBOYXZMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQge1xuICBJY29uLFxuICBEcm9wZG93bixcbiAgRHJvcGRvd25JdGVtLFxuICBTdHlsZWREcm9wZG93bkJ1dHRvbixcbiAgY29sb3JzLFxuICBsZW5ndGhzLFxuICBzaGFkb3dzLFxuICBidXR0b25zLFxufSBmcm9tICduZXRsaWZ5LWNtcy11aS1kZWZhdWx0JztcbmltcG9ydCBTZXR0aW5nc0Ryb3Bkb3duIGZyb20gJ1VJL1NldHRpbmdzRHJvcGRvd24nO1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gIGJ1dHRvbkFjdGl2ZTogY3NzYFxuICAgIGNvbG9yOiAke2NvbG9ycy5hY3RpdmV9O1xuICBgLFxufTtcblxuY29uc3QgQXBwSGVhZGVyID0gcHJvcHMgPT4gKFxuICA8aGVhZGVyXG4gICAgY3NzPXtjc3NgXG4gICAgICAke3NoYWRvd3MuZHJvcE1haW59O1xuICAgICAgcG9zaXRpb246IHN0aWNreTtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgdG9wOiAwO1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuZm9yZWdyb3VuZH07XG4gICAgICB6LWluZGV4OiAzMDA7XG4gICAgICBoZWlnaHQ6ICR7bGVuZ3Rocy50b3BCYXJIZWlnaHR9O1xuICAgIGB9XG4gICAgey4uLnByb3BzfVxuICAvPlxuKTtcblxuY29uc3QgQXBwSGVhZGVyQ29udGVudCA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgbWluLXdpZHRoOiA4MDBweDtcbiAgbWF4LXdpZHRoOiAxNDQwcHg7XG4gIHBhZGRpbmc6IDAgMTJweDtcbiAgbWFyZ2luOiAwIGF1dG87XG5gO1xuXG5jb25zdCBBcHBIZWFkZXJCdXR0b24gPSBzdHlsZWQuYnV0dG9uYFxuICAke2J1dHRvbnMuYnV0dG9ufTtcbiAgYmFja2dyb3VuZDogbm9uZTtcbiAgY29sb3I6ICM3YjgyOTA7XG4gIGZvbnQtZmFtaWx5OiBpbmhlcml0O1xuICBmb250LXNpemU6IDE2cHg7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICBwYWRkaW5nOiAxNnB4IDIwcHg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgJHtJY29ufSB7XG4gICAgbWFyZ2luLXJpZ2h0OiA0cHg7XG4gICAgY29sb3I6ICNiM2I5YzQ7XG4gIH1cblxuICAmOmhvdmVyLFxuICAmOmFjdGl2ZSxcbiAgJjpmb2N1cyB7XG4gICAgJHtzdHlsZXMuYnV0dG9uQWN0aXZlfTtcblxuICAgICR7SWNvbn0ge1xuICAgICAgJHtzdHlsZXMuYnV0dG9uQWN0aXZlfTtcbiAgICB9XG4gIH1cblxuICAke3Byb3BzID0+IGNzc2BcbiAgICAmLiR7cHJvcHMuYWN0aXZlQ2xhc3NOYW1lfSB7XG4gICAgICAke3N0eWxlcy5idXR0b25BY3RpdmV9O1xuXG4gICAgICAke0ljb259IHtcbiAgICAgICAgJHtzdHlsZXMuYnV0dG9uQWN0aXZlfTtcbiAgICAgIH1cbiAgICB9XG4gIGB9O1xuYDtcblxuY29uc3QgQXBwSGVhZGVyTmF2TGluayA9IEFwcEhlYWRlckJ1dHRvbi53aXRoQ29tcG9uZW50KE5hdkxpbmspO1xuXG5jb25zdCBBcHBIZWFkZXJBY3Rpb25zID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5gO1xuXG5jb25zdCBBcHBIZWFkZXJRdWlja05ld0J1dHRvbiA9IHN0eWxlZChTdHlsZWREcm9wZG93bkJ1dHRvbilgXG4gICR7YnV0dG9ucy5idXR0b259O1xuICAke2J1dHRvbnMubWVkaXVtfTtcbiAgJHtidXR0b25zLmdyYXl9O1xuICBtYXJnaW4tcmlnaHQ6IDhweDtcblxuICAmOmFmdGVyIHtcbiAgICB0b3A6IDExcHg7XG4gIH1cbmA7XG5cbmNvbnN0IEFwcEhlYWRlck5hdkxpc3QgPSBzdHlsZWQudWxgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIG1hcmdpbjogMDtcbiAgbGlzdC1zdHlsZTogbm9uZTtcbmA7XG5cbmNsYXNzIEhlYWRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgdXNlcjogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIGNvbGxlY3Rpb25zOiBJbW11dGFibGVQcm9wVHlwZXMub3JkZXJlZE1hcC5pc1JlcXVpcmVkLFxuICAgIG9uQ3JlYXRlRW50cnlDbGljazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkxvZ291dENsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9wZW5NZWRpYUxpYnJhcnk6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgaGFzV29ya2Zsb3c6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgZGlzcGxheVVybDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBpc1Rlc3RSZXBvOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIGhhbmRsZUNyZWF0ZVBvc3RDbGljayA9IGNvbGxlY3Rpb25OYW1lID0+IHtcbiAgICBjb25zdCB7IG9uQ3JlYXRlRW50cnlDbGljayB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAob25DcmVhdGVFbnRyeUNsaWNrKSB7XG4gICAgICBvbkNyZWF0ZUVudHJ5Q2xpY2soY29sbGVjdGlvbk5hbWUpO1xuICAgIH1cbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgdXNlcixcbiAgICAgIGNvbGxlY3Rpb25zLFxuICAgICAgb25Mb2dvdXRDbGljayxcbiAgICAgIG9wZW5NZWRpYUxpYnJhcnksXG4gICAgICBoYXNXb3JrZmxvdyxcbiAgICAgIGRpc3BsYXlVcmwsXG4gICAgICBpc1Rlc3RSZXBvLFxuICAgICAgdCxcbiAgICAgIHNob3dNZWRpYUJ1dHRvbixcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IGNyZWF0ZWFibGVDb2xsZWN0aW9ucyA9IGNvbGxlY3Rpb25zXG4gICAgICAuZmlsdGVyKGNvbGxlY3Rpb24gPT4gY29sbGVjdGlvbi5nZXQoJ2NyZWF0ZScpKVxuICAgICAgLnRvTGlzdCgpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxBcHBIZWFkZXI+XG4gICAgICAgIDxBcHBIZWFkZXJDb250ZW50PlxuICAgICAgICAgIDxuYXY+XG4gICAgICAgICAgICA8QXBwSGVhZGVyTmF2TGlzdD5cbiAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgIDxBcHBIZWFkZXJOYXZMaW5rXG4gICAgICAgICAgICAgICAgICB0bz1cIi9cIlxuICAgICAgICAgICAgICAgICAgYWN0aXZlQ2xhc3NOYW1lPVwiaGVhZGVyLWxpbmstYWN0aXZlXCJcbiAgICAgICAgICAgICAgICAgIGlzQWN0aXZlPXsobWF0Y2gsIGxvY2F0aW9uKSA9PiBsb2NhdGlvbi5wYXRobmFtZS5zdGFydHNXaXRoKCcvY29sbGVjdGlvbnMvJyl9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPEljb24gdHlwZT1cInBhZ2VcIiAvPlxuICAgICAgICAgICAgICAgICAge3QoJ2FwcC5oZWFkZXIuY29udGVudCcpfVxuICAgICAgICAgICAgICAgIDwvQXBwSGVhZGVyTmF2TGluaz5cbiAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAge2hhc1dvcmtmbG93ICYmIChcbiAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICA8QXBwSGVhZGVyTmF2TGluayB0bz1cIi93b3JrZmxvd1wiIGFjdGl2ZUNsYXNzTmFtZT1cImhlYWRlci1saW5rLWFjdGl2ZVwiPlxuICAgICAgICAgICAgICAgICAgICA8SWNvbiB0eXBlPVwid29ya2Zsb3dcIiAvPlxuICAgICAgICAgICAgICAgICAgICB7dCgnYXBwLmhlYWRlci53b3JrZmxvdycpfVxuICAgICAgICAgICAgICAgICAgPC9BcHBIZWFkZXJOYXZMaW5rPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIHtzaG93TWVkaWFCdXR0b24gJiYgKFxuICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgIDxBcHBIZWFkZXJCdXR0b24gb25DbGljaz17b3Blbk1lZGlhTGlicmFyeX0+XG4gICAgICAgICAgICAgICAgICAgIDxJY29uIHR5cGU9XCJtZWRpYS1hbHRcIiAvPlxuICAgICAgICAgICAgICAgICAgICB7dCgnYXBwLmhlYWRlci5tZWRpYScpfVxuICAgICAgICAgICAgICAgICAgPC9BcHBIZWFkZXJCdXR0b24+XG4gICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvQXBwSGVhZGVyTmF2TGlzdD5cbiAgICAgICAgICA8L25hdj5cbiAgICAgICAgICA8QXBwSGVhZGVyQWN0aW9ucz5cbiAgICAgICAgICAgIHtjcmVhdGVhYmxlQ29sbGVjdGlvbnMuc2l6ZSA+IDAgJiYgKFxuICAgICAgICAgICAgICA8RHJvcGRvd25cbiAgICAgICAgICAgICAgICByZW5kZXJCdXR0b249eygpID0+IChcbiAgICAgICAgICAgICAgICAgIDxBcHBIZWFkZXJRdWlja05ld0J1dHRvbj4ge3QoJ2FwcC5oZWFkZXIucXVpY2tBZGQnKX08L0FwcEhlYWRlclF1aWNrTmV3QnV0dG9uPlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgZHJvcGRvd25Ub3BPdmVybGFwPVwiMzBweFwiXG4gICAgICAgICAgICAgICAgZHJvcGRvd25XaWR0aD1cIjE2MHB4XCJcbiAgICAgICAgICAgICAgICBkcm9wZG93blBvc2l0aW9uPVwibGVmdFwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7Y3JlYXRlYWJsZUNvbGxlY3Rpb25zLm1hcChjb2xsZWN0aW9uID0+IChcbiAgICAgICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgICAgICAga2V5PXtjb2xsZWN0aW9uLmdldCgnbmFtZScpfVxuICAgICAgICAgICAgICAgICAgICBsYWJlbD17Y29sbGVjdGlvbi5nZXQoJ2xhYmVsX3Npbmd1bGFyJykgfHwgY29sbGVjdGlvbi5nZXQoJ2xhYmVsJyl9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMuaGFuZGxlQ3JlYXRlUG9zdENsaWNrKGNvbGxlY3Rpb24uZ2V0KCduYW1lJykpfVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgPC9Ecm9wZG93bj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8U2V0dGluZ3NEcm9wZG93blxuICAgICAgICAgICAgICBkaXNwbGF5VXJsPXtkaXNwbGF5VXJsfVxuICAgICAgICAgICAgICBpc1Rlc3RSZXBvPXtpc1Rlc3RSZXBvfVxuICAgICAgICAgICAgICBpbWFnZVVybD17dXNlci5nZXQoJ2F2YXRhcl91cmwnKX1cbiAgICAgICAgICAgICAgb25Mb2dvdXRDbGljaz17b25Mb2dvdXRDbGlja31cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9BcHBIZWFkZXJBY3Rpb25zPlxuICAgICAgICA8L0FwcEhlYWRlckNvbnRlbnQ+XG4gICAgICA8L0FwcEhlYWRlcj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRyYW5zbGF0ZSgpKEhlYWRlcik7XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

class Header extends _react.default.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "handleCreatePostClick", collectionName => {
      const {
        onCreateEntryClick
      } = this.props;

      if (onCreateEntryClick) {
        onCreateEntryClick(collectionName);
      }
    });
  }

  render() {
    const {
      user,
      collections,
      onLogoutClick,
      openMediaLibrary,
      hasWorkflow,
      displayUrl,
      isTestRepo,
      t,
      showMediaButton
    } = this.props;
    const createableCollections = collections.filter(collection => collection.get('create')).toList();
    return (0, _core.jsx)(AppHeader, null, (0, _core.jsx)(AppHeaderContent, null, (0, _core.jsx)("nav", null, (0, _core.jsx)(AppHeaderNavList, null, (0, _core.jsx)("li", null, (0, _core.jsx)(AppHeaderNavLink, {
      to: "/",
      activeClassName: "header-link-active",
      isActive: (match, location) => location.pathname.startsWith('/collections/')
    }, (0, _core.jsx)(_netlifyCmsUiDefault.Icon, {
      type: "page"
    }), t('app.header.content'))), hasWorkflow && (0, _core.jsx)("li", null, (0, _core.jsx)(AppHeaderNavLink, {
      to: "/workflow",
      activeClassName: "header-link-active"
    }, (0, _core.jsx)(_netlifyCmsUiDefault.Icon, {
      type: "workflow"
    }), t('app.header.workflow'))), showMediaButton && (0, _core.jsx)("li", null, (0, _core.jsx)(AppHeaderButton, {
      onClick: openMediaLibrary
    }, (0, _core.jsx)(_netlifyCmsUiDefault.Icon, {
      type: "media-alt"
    }), t('app.header.media'))))), (0, _core.jsx)(AppHeaderActions, null, createableCollections.size > 0 && (0, _core.jsx)(_netlifyCmsUiDefault.Dropdown, {
      renderButton: () => (0, _core.jsx)(AppHeaderQuickNewButton, null, " ", t('app.header.quickAdd')),
      dropdownTopOverlap: "30px",
      dropdownWidth: "160px",
      dropdownPosition: "left"
    }, createableCollections.map(collection => (0, _core.jsx)(_netlifyCmsUiDefault.DropdownItem, {
      key: collection.get('name'),
      label: collection.get('label_singular') || collection.get('label'),
      onClick: () => this.handleCreatePostClick(collection.get('name'))
    }))), (0, _core.jsx)(_SettingsDropdown.default, {
      displayUrl: displayUrl,
      isTestRepo: isTestRepo,
      imageUrl: user.get('avatar_url'),
      onLogoutClick: onLogoutClick
    }))));
  }

}

_defineProperty(Header, "propTypes", {
  user: _reactImmutableProptypes.default.map.isRequired,
  collections: _reactImmutableProptypes.default.orderedMap.isRequired,
  onCreateEntryClick: _propTypes.default.func.isRequired,
  onLogoutClick: _propTypes.default.func.isRequired,
  openMediaLibrary: _propTypes.default.func.isRequired,
  hasWorkflow: _propTypes.default.bool.isRequired,
  displayUrl: _propTypes.default.string,
  isTestRepo: _propTypes.default.bool,
  t: _propTypes.default.func.isRequired
});

var _default = (0, _reactPolyglot.translate)()(Header);

exports.default = _default;