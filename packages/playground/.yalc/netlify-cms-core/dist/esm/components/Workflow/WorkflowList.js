"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _css2 = _interopRequireDefault(require("@emotion/css"));

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _core = require("@emotion/core");

var _moment = _interopRequireDefault(require("moment"));

var _reactPolyglot = require("react-polyglot");

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _publishModes = require("../../constants/publishModes");

var _UI = require("../UI");

var _WorkflowCard = _interopRequireDefault(require("./WorkflowCard"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

const WorkflowListContainer = (0, _styledBase.default)("div", {
  target: "e1sboua10",
  label: "WorkflowListContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "1booyhj",
  styles: "min-height:60%;display:grid;grid-template-columns:33.3% 33.3% 33.3%;"
} : {
  name: "1booyhj",
  styles: "min-height:60%;display:grid;grid-template-columns:33.3% 33.3% 33.3%;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const WorkflowListContainerOpenAuthoring = (0, _styledBase.default)("div", {
  target: "e1sboua11",
  label: "WorkflowListContainerOpenAuthoring"
})(process.env.NODE_ENV === "production" ? {
  name: "1q1dzdp",
  styles: "min-height:60%;display:grid;grid-template-columns:50% 50% 0%;"
} : {
  name: "1q1dzdp",
  styles: "min-height:60%;display:grid;grid-template-columns:50% 50% 0%;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var _ref = process.env.NODE_ENV === "production" ? {
  name: "qbubgm",
  styles: "margin-left:0;"
} : {
  name: "qbubgm",
  styles: "margin-left:0;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref2 = process.env.NODE_ENV === "production" ? {
  name: "1xzanuf",
  styles: "margin-right:0;"
} : {
  name: "1xzanuf",
  styles: "margin-right:0;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

const styles = {
  columnPosition: idx => idx === 0 && _ref || idx === 2 && _ref2 || /*#__PURE__*/(0, _core.css)("&:before,&:after{content:'';display:block;position:absolute;width:2px;height:80%;top:76px;background-color:", _netlifyCmsUiDefault.colors.textFieldBorder, ";}&:before{left:-23px;}&:after{right:-23px;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
  column: process.env.NODE_ENV === "production" ? {
    name: "f8lkbe-column",
    styles: "margin:0 20px;transition:background-color 0.5s ease;border:2px dashed transparent;border-radius:4px;position:relative;height:100%;;label:column;"
  } : {
    name: "f8lkbe-column",
    styles: "margin:0 20px;transition:background-color 0.5s ease;border:2px dashed transparent;border-radius:4px;position:relative;height:100%;;label:column;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  },
  columnHovered: /*#__PURE__*/(0, _core.css)("border-color:", _netlifyCmsUiDefault.colors.active, ";;label:columnHovered;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
  hiddenColumn: process.env.NODE_ENV === "production" ? {
    name: "9wvypa-hiddenColumn",
    styles: "display:none;;label:hiddenColumn;"
  } : {
    name: "9wvypa-hiddenColumn",
    styles: "display:none;;label:hiddenColumn;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  },
  hiddenRightBorder: process.env.NODE_ENV === "production" ? {
    name: "hg8806-hiddenRightBorder",
    styles: "&:not(:first-child):not(:last-child){&:after{display:none;}};label:hiddenRightBorder;"
  } : {
    name: "hg8806-hiddenRightBorder",
    styles: "&:not(:first-child):not(:last-child){&:after{display:none;}};label:hiddenRightBorder;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  }
};
const ColumnHeader = (0, _styledBase.default)("h2", {
  target: "e1sboua12",
  label: "ColumnHeader"
})("font-size:20px;font-weight:normal;padding:4px 14px;border-radius:", _netlifyCmsUiDefault.lengths.borderRadius, ";margin-bottom:28px;", props => props.name === 'draft' && /*#__PURE__*/(0, _core.css)("background-color:", _netlifyCmsUiDefault.colors.statusDraftBackground, ";color:", _netlifyCmsUiDefault.colors.statusDraftText, ";;label:ColumnHeader;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), " ", props => props.name === 'pending_review' && /*#__PURE__*/(0, _core.css)("background-color:", _netlifyCmsUiDefault.colors.statusReviewBackground, ";color:", _netlifyCmsUiDefault.colors.statusReviewText, ";;label:ColumnHeader;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), " ", props => props.name === 'pending_publish' && /*#__PURE__*/(0, _core.css)("background-color:", _netlifyCmsUiDefault.colors.statusReadyBackground, ";color:", _netlifyCmsUiDefault.colors.statusReadyText, ";;label:ColumnHeader;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
const ColumnCount = (0, _styledBase.default)("p", {
  target: "e1sboua13",
  label: "ColumnCount"
})("font-size:13px;font-weight:500;color:", _netlifyCmsUiDefault.colors.text, ";text-transform:uppercase;margin-bottom:6px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1dvcmtmbG93L1dvcmtmbG93TGlzdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEwRzRCIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1dvcmtmbG93L1dvcmtmbG93TGlzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEltbXV0YWJsZVByb3BUeXBlcyBmcm9tICdyZWFjdC1pbW11dGFibGUtcHJvcHR5cGVzJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHsgdHJhbnNsYXRlIH0gZnJvbSAncmVhY3QtcG9seWdsb3QnO1xuaW1wb3J0IHsgY29sb3JzLCBsZW5ndGhzIH0gZnJvbSAnbmV0bGlmeS1jbXMtdWktZGVmYXVsdCc7XG5pbXBvcnQgeyBzdGF0dXMgfSBmcm9tICdDb25zdGFudHMvcHVibGlzaE1vZGVzJztcbmltcG9ydCB7IERyYWdTb3VyY2UsIERyb3BUYXJnZXQsIEhUTUw1RHJhZ0Ryb3AgfSBmcm9tICdVSSc7XG5pbXBvcnQgV29ya2Zsb3dDYXJkIGZyb20gJy4vV29ya2Zsb3dDYXJkJztcblxuY29uc3QgV29ya2Zsb3dMaXN0Q29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgbWluLWhlaWdodDogNjAlO1xuICBkaXNwbGF5OiBncmlkO1xuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDMzLjMlIDMzLjMlIDMzLjMlO1xuYDtcblxuY29uc3QgV29ya2Zsb3dMaXN0Q29udGFpbmVyT3BlbkF1dGhvcmluZyA9IHN0eWxlZC5kaXZgXG4gIG1pbi1oZWlnaHQ6IDYwJTtcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiA1MCUgNTAlIDAlO1xuYDtcblxuY29uc3Qgc3R5bGVzID0ge1xuICBjb2x1bW5Qb3NpdGlvbjogaWR4ID0+XG4gICAgKGlkeCA9PT0gMCAmJlxuICAgICAgY3NzYFxuICAgICAgICBtYXJnaW4tbGVmdDogMDtcbiAgICAgIGApIHx8XG4gICAgKGlkeCA9PT0gMiAmJlxuICAgICAgY3NzYFxuICAgICAgICBtYXJnaW4tcmlnaHQ6IDA7XG4gICAgICBgKSB8fFxuICAgIGNzc2BcbiAgICAgICY6YmVmb3JlLFxuICAgICAgJjphZnRlciB7XG4gICAgICAgIGNvbnRlbnQ6ICcnO1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB3aWR0aDogMnB4O1xuICAgICAgICBoZWlnaHQ6IDgwJTtcbiAgICAgICAgdG9wOiA3NnB4O1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy50ZXh0RmllbGRCb3JkZXJ9O1xuICAgICAgfVxuXG4gICAgICAmOmJlZm9yZSB7XG4gICAgICAgIGxlZnQ6IC0yM3B4O1xuICAgICAgfVxuXG4gICAgICAmOmFmdGVyIHtcbiAgICAgICAgcmlnaHQ6IC0yM3B4O1xuICAgICAgfVxuICAgIGAsXG4gIGNvbHVtbjogY3NzYFxuICAgIG1hcmdpbjogMCAyMHB4O1xuICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMC41cyBlYXNlO1xuICAgIGJvcmRlcjogMnB4IGRhc2hlZCB0cmFuc3BhcmVudDtcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGhlaWdodDogMTAwJTtcbiAgYCxcbiAgY29sdW1uSG92ZXJlZDogY3NzYFxuICAgIGJvcmRlci1jb2xvcjogJHtjb2xvcnMuYWN0aXZlfTtcbiAgYCxcbiAgaGlkZGVuQ29sdW1uOiBjc3NgXG4gICAgZGlzcGxheTogbm9uZTtcbiAgYCxcbiAgaGlkZGVuUmlnaHRCb3JkZXI6IGNzc2BcbiAgICAmOm5vdCg6Zmlyc3QtY2hpbGQpOm5vdCg6bGFzdC1jaGlsZCkge1xuICAgICAgJjphZnRlciB7XG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICB9XG4gICAgfVxuICBgLFxufTtcblxuY29uc3QgQ29sdW1uSGVhZGVyID0gc3R5bGVkLmgyYFxuICBmb250LXNpemU6IDIwcHg7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIHBhZGRpbmc6IDRweCAxNHB4O1xuICBib3JkZXItcmFkaXVzOiAke2xlbmd0aHMuYm9yZGVyUmFkaXVzfTtcbiAgbWFyZ2luLWJvdHRvbTogMjhweDtcblxuICAke3Byb3BzID0+XG4gICAgcHJvcHMubmFtZSA9PT0gJ2RyYWZ0JyAmJlxuICAgIGNzc2BcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLnN0YXR1c0RyYWZ0QmFja2dyb3VuZH07XG4gICAgICBjb2xvcjogJHtjb2xvcnMuc3RhdHVzRHJhZnRUZXh0fTtcbiAgICBgfVxuXG4gICR7cHJvcHMgPT5cbiAgICBwcm9wcy5uYW1lID09PSAncGVuZGluZ19yZXZpZXcnICYmXG4gICAgY3NzYFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuc3RhdHVzUmV2aWV3QmFja2dyb3VuZH07XG4gICAgICBjb2xvcjogJHtjb2xvcnMuc3RhdHVzUmV2aWV3VGV4dH07XG4gICAgYH1cblxuICAke3Byb3BzID0+XG4gICAgcHJvcHMubmFtZSA9PT0gJ3BlbmRpbmdfcHVibGlzaCcgJiZcbiAgICBjc3NgXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5zdGF0dXNSZWFkeUJhY2tncm91bmR9O1xuICAgICAgY29sb3I6ICR7Y29sb3JzLnN0YXR1c1JlYWR5VGV4dH07XG4gICAgYH1cbmA7XG5cbmNvbnN0IENvbHVtbkNvdW50ID0gc3R5bGVkLnBgXG4gIGZvbnQtc2l6ZTogMTNweDtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgY29sb3I6ICR7Y29sb3JzLnRleHR9O1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBtYXJnaW4tYm90dG9tOiA2cHg7XG5gO1xuXG4vLyBUaGlzIGlzIGEgbmFtZXNwYWNlIHNvIHRoYXQgd2UgY2FuIG9ubHkgZHJvcCB0aGVzZSBlbGVtZW50cyBvbiBhIERyb3BUYXJnZXQgd2l0aCB0aGUgc2FtZVxuY29uc3QgRE5ETmFtZXNwYWNlID0gJ2Ntcy13b3JrZmxvdyc7XG5cbmNvbnN0IGdldENvbHVtbkhlYWRlclRleHQgPSAoY29sdW1uTmFtZSwgdCkgPT4ge1xuICBzd2l0Y2ggKGNvbHVtbk5hbWUpIHtcbiAgICBjYXNlICdkcmFmdCc6XG4gICAgICByZXR1cm4gdCgnd29ya2Zsb3cud29ya2Zsb3dMaXN0LmRyYWZ0SGVhZGVyJyk7XG4gICAgY2FzZSAncGVuZGluZ19yZXZpZXcnOlxuICAgICAgcmV0dXJuIHQoJ3dvcmtmbG93LndvcmtmbG93TGlzdC5pblJldmlld0hlYWRlcicpO1xuICAgIGNhc2UgJ3BlbmRpbmdfcHVibGlzaCc6XG4gICAgICByZXR1cm4gdCgnd29ya2Zsb3cud29ya2Zsb3dMaXN0LnJlYWR5SGVhZGVyJyk7XG4gIH1cbn07XG5cbmNsYXNzIFdvcmtmbG93TGlzdCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgZW50cmllczogSW1tdXRhYmxlUHJvcFR5cGVzLm9yZGVyZWRNYXAsXG4gICAgaGFuZGxlQ2hhbmdlU3RhdHVzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGhhbmRsZVB1Ymxpc2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgaGFuZGxlRGVsZXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgaXNPcGVuQXV0aG9yaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBjb2xsZWN0aW9uczogSW1tdXRhYmxlUHJvcFR5cGVzLm9yZGVyZWRNYXAsXG4gIH07XG5cbiAgaGFuZGxlQ2hhbmdlU3RhdHVzID0gKG5ld1N0YXR1cywgZHJhZ1Byb3BzKSA9PiB7XG4gICAgY29uc3Qgc2x1ZyA9IGRyYWdQcm9wcy5zbHVnO1xuICAgIGNvbnN0IGNvbGxlY3Rpb24gPSBkcmFnUHJvcHMuY29sbGVjdGlvbjtcbiAgICBjb25zdCBvbGRTdGF0dXMgPSBkcmFnUHJvcHMub3duU3RhdHVzO1xuICAgIHRoaXMucHJvcHMuaGFuZGxlQ2hhbmdlU3RhdHVzKGNvbGxlY3Rpb24sIHNsdWcsIG9sZFN0YXR1cywgbmV3U3RhdHVzKTtcbiAgfTtcblxuICByZXF1ZXN0RGVsZXRlID0gKGNvbGxlY3Rpb24sIHNsdWcsIG93blN0YXR1cykgPT4ge1xuICAgIGlmICh3aW5kb3cuY29uZmlybSh0aGlzLnByb3BzLnQoJ3dvcmtmbG93LndvcmtmbG93TGlzdC5vbkRlbGV0ZUVudHJ5JykpKSB7XG4gICAgICB0aGlzLnByb3BzLmhhbmRsZURlbGV0ZShjb2xsZWN0aW9uLCBzbHVnLCBvd25TdGF0dXMpO1xuICAgIH1cbiAgfTtcblxuICByZXF1ZXN0UHVibGlzaCA9IChjb2xsZWN0aW9uLCBzbHVnLCBvd25TdGF0dXMpID0+IHtcbiAgICBpZiAob3duU3RhdHVzICE9PSBzdGF0dXMubGFzdCgpKSB7XG4gICAgICB3aW5kb3cuYWxlcnQodGhpcy5wcm9wcy50KCd3b3JrZmxvdy53b3JrZmxvd0xpc3Qub25QdWJsaXNoaW5nTm90UmVhZHlFbnRyeScpKTtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2UgaWYgKCF3aW5kb3cuY29uZmlybSh0aGlzLnByb3BzLnQoJ3dvcmtmbG93LndvcmtmbG93TGlzdC5vblB1Ymxpc2hFbnRyeScpKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnByb3BzLmhhbmRsZVB1Ymxpc2goY29sbGVjdGlvbiwgc2x1Zyk7XG4gIH07XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2Rpc3BsYXktbmFtZVxuICByZW5kZXJDb2x1bW5zID0gKGVudHJpZXMsIGNvbHVtbikgPT4ge1xuICAgIGNvbnN0IHsgaXNPcGVuQXV0aG9yaW5nLCBjb2xsZWN0aW9ucywgdCB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoIWVudHJpZXMpIHJldHVybiBudWxsO1xuXG4gICAgaWYgKCFjb2x1bW4pIHtcbiAgICAgIHJldHVybiBlbnRyaWVzLmVudHJ5U2VxKCkubWFwKChbY3VyckNvbHVtbiwgY3VyckVudHJpZXNdLCBpZHgpID0+IChcbiAgICAgICAgPERyb3BUYXJnZXRcbiAgICAgICAgICBuYW1lc3BhY2U9e0RORE5hbWVzcGFjZX1cbiAgICAgICAgICBrZXk9e2N1cnJDb2x1bW59XG4gICAgICAgICAgb25Ecm9wPXt0aGlzLmhhbmRsZUNoYW5nZVN0YXR1cy5iaW5kKHRoaXMsIGN1cnJDb2x1bW4pfVxuICAgICAgICA+XG4gICAgICAgICAgeyhjb25uZWN0LCB7IGlzSG92ZXJlZCB9KSA9PlxuICAgICAgICAgICAgY29ubmVjdChcbiAgICAgICAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6ICcxMDAlJyB9fT5cbiAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICBjc3M9e1tcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVzLmNvbHVtbixcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVzLmNvbHVtblBvc2l0aW9uKGlkeCksXG4gICAgICAgICAgICAgICAgICAgIGlzSG92ZXJlZCAmJiBzdHlsZXMuY29sdW1uSG92ZXJlZCxcbiAgICAgICAgICAgICAgICAgICAgaXNPcGVuQXV0aG9yaW5nICYmIGN1cnJDb2x1bW4gPT09ICdwZW5kaW5nX3B1Ymxpc2gnICYmIHN0eWxlcy5oaWRkZW5Db2x1bW4sXG4gICAgICAgICAgICAgICAgICAgIGlzT3BlbkF1dGhvcmluZyAmJiBjdXJyQ29sdW1uID09PSAncGVuZGluZ19yZXZpZXcnICYmIHN0eWxlcy5oaWRkZW5SaWdodEJvcmRlcixcbiAgICAgICAgICAgICAgICAgIF19XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPENvbHVtbkhlYWRlciBuYW1lPXtjdXJyQ29sdW1ufT5cbiAgICAgICAgICAgICAgICAgICAge2dldENvbHVtbkhlYWRlclRleHQoY3VyckNvbHVtbiwgdGhpcy5wcm9wcy50KX1cbiAgICAgICAgICAgICAgICAgIDwvQ29sdW1uSGVhZGVyPlxuICAgICAgICAgICAgICAgICAgPENvbHVtbkNvdW50PlxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy50KCd3b3JrZmxvdy53b3JrZmxvd0xpc3QuY3VycmVudEVudHJpZXMnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgc21hcnRfY291bnQ6IGN1cnJFbnRyaWVzLnNpemUsXG4gICAgICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgICAgPC9Db2x1bW5Db3VudD5cbiAgICAgICAgICAgICAgICAgIHt0aGlzLnJlbmRlckNvbHVtbnMoY3VyckVudHJpZXMsIGN1cnJDb2x1bW4pfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj4sXG4gICAgICAgICAgICApXG4gICAgICAgICAgfVxuICAgICAgICA8L0Ryb3BUYXJnZXQ+XG4gICAgICApKTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIHtlbnRyaWVzLm1hcChlbnRyeSA9PiB7XG4gICAgICAgICAgY29uc3QgdGltZXN0YW1wID0gbW9tZW50KGVudHJ5LmdldEluKFsnbWV0YURhdGEnLCAndGltZVN0YW1wJ10pKS5mb3JtYXQoXG4gICAgICAgICAgICB0KCd3b3JrZmxvdy53b3JrZmxvdy5kYXRlRm9ybWF0JyksXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjb25zdCBzbHVnID0gZW50cnkuZ2V0KCdzbHVnJyk7XG4gICAgICAgICAgY29uc3QgZWRpdExpbmsgPSBgY29sbGVjdGlvbnMvJHtlbnRyeS5nZXRJbihbJ21ldGFEYXRhJywgJ2NvbGxlY3Rpb24nXSl9L2VudHJpZXMvJHtzbHVnfWA7XG4gICAgICAgICAgY29uc3Qgb3duU3RhdHVzID0gZW50cnkuZ2V0SW4oWydtZXRhRGF0YScsICdzdGF0dXMnXSk7XG4gICAgICAgICAgY29uc3QgY29sbGVjdGlvbk5hbWUgPSBlbnRyeS5nZXRJbihbJ21ldGFEYXRhJywgJ2NvbGxlY3Rpb24nXSk7XG4gICAgICAgICAgY29uc3QgY29sbGVjdGlvbkxhYmVsID0gY29sbGVjdGlvbnNcbiAgICAgICAgICAgID8uZmluZChjb2xsZWN0aW9uID0+IGNvbGxlY3Rpb24uZ2V0KCduYW1lJykgPT09IGNvbGxlY3Rpb25OYW1lKVxuICAgICAgICAgICAgPy5nZXQoJ2xhYmVsJyk7XG4gICAgICAgICAgY29uc3QgaXNNb2RpZmljYXRpb24gPSBlbnRyeS5nZXQoJ2lzTW9kaWZpY2F0aW9uJyk7XG4gICAgICAgICAgY29uc3QgY2FuUHVibGlzaCA9IG93blN0YXR1cyA9PT0gc3RhdHVzLmxhc3QoKSAmJiAhZW50cnkuZ2V0KCdpc1BlcnNpc3RpbmcnLCBmYWxzZSk7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxEcmFnU291cmNlXG4gICAgICAgICAgICAgIG5hbWVzcGFjZT17RE5ETmFtZXNwYWNlfVxuICAgICAgICAgICAgICBrZXk9e2Ake2NvbGxlY3Rpb25OYW1lfS0ke3NsdWd9YH1cbiAgICAgICAgICAgICAgc2x1Zz17c2x1Z31cbiAgICAgICAgICAgICAgY29sbGVjdGlvbj17Y29sbGVjdGlvbk5hbWV9XG4gICAgICAgICAgICAgIG93blN0YXR1cz17b3duU3RhdHVzfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7Y29ubmVjdCA9PlxuICAgICAgICAgICAgICAgIGNvbm5lY3QoXG4gICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICA8V29ya2Zsb3dDYXJkXG4gICAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbkxhYmVsPXtjb2xsZWN0aW9uTGFiZWwgfHwgY29sbGVjdGlvbk5hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgdGl0bGU9e2VudHJ5LmdldCgnbGFiZWwnKSB8fCBlbnRyeS5nZXRJbihbJ2RhdGEnLCAndGl0bGUnXSl9XG4gICAgICAgICAgICAgICAgICAgICAgYXV0aG9yTGFzdENoYW5nZT17ZW50cnkuZ2V0SW4oWydtZXRhRGF0YScsICd1c2VyJ10pfVxuICAgICAgICAgICAgICAgICAgICAgIGJvZHk9e2VudHJ5LmdldEluKFsnZGF0YScsICdib2R5J10pfVxuICAgICAgICAgICAgICAgICAgICAgIGlzTW9kaWZpY2F0aW9uPXtpc01vZGlmaWNhdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgICBlZGl0TGluaz17ZWRpdExpbmt9XG4gICAgICAgICAgICAgICAgICAgICAgdGltZXN0YW1wPXt0aW1lc3RhbXB9XG4gICAgICAgICAgICAgICAgICAgICAgb25EZWxldGU9e3RoaXMucmVxdWVzdERlbGV0ZS5iaW5kKHRoaXMsIGNvbGxlY3Rpb25OYW1lLCBzbHVnLCBvd25TdGF0dXMpfVxuICAgICAgICAgICAgICAgICAgICAgIGNhblB1Ymxpc2g9e2NhblB1Ymxpc2h9XG4gICAgICAgICAgICAgICAgICAgICAgb25QdWJsaXNoPXt0aGlzLnJlcXVlc3RQdWJsaXNoLmJpbmQodGhpcywgY29sbGVjdGlvbk5hbWUsIHNsdWcsIG93blN0YXR1cyl9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj4sXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA8L0RyYWdTb3VyY2U+XG4gICAgICAgICAgKTtcbiAgICAgICAgfSl9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBjb2x1bW5zID0gdGhpcy5yZW5kZXJDb2x1bW5zKHRoaXMucHJvcHMuZW50cmllcyk7XG4gICAgY29uc3QgTGlzdENvbnRhaW5lciA9IHRoaXMucHJvcHMuaXNPcGVuQXV0aG9yaW5nXG4gICAgICA/IFdvcmtmbG93TGlzdENvbnRhaW5lck9wZW5BdXRob3JpbmdcbiAgICAgIDogV29ya2Zsb3dMaXN0Q29udGFpbmVyO1xuICAgIHJldHVybiA8TGlzdENvbnRhaW5lcj57Y29sdW1uc308L0xpc3RDb250YWluZXI+O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEhUTUw1RHJhZ0Ryb3AodHJhbnNsYXRlKCkoV29ya2Zsb3dMaXN0KSk7XG4iXX0= */")); // This is a namespace so that we can only drop these elements on a DropTarget with the same

const DNDNamespace = 'cms-workflow';

const getColumnHeaderText = (columnName, t) => {
  switch (columnName) {
    case 'draft':
      return t('workflow.workflowList.draftHeader');

    case 'pending_review':
      return t('workflow.workflowList.inReviewHeader');

    case 'pending_publish':
      return t('workflow.workflowList.readyHeader');
  }
};

class WorkflowList extends _react.default.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "handleChangeStatus", (newStatus, dragProps) => {
      const slug = dragProps.slug;
      const collection = dragProps.collection;
      const oldStatus = dragProps.ownStatus;
      this.props.handleChangeStatus(collection, slug, oldStatus, newStatus);
    });

    _defineProperty(this, "requestDelete", (collection, slug, ownStatus) => {
      if (window.confirm(this.props.t('workflow.workflowList.onDeleteEntry'))) {
        this.props.handleDelete(collection, slug, ownStatus);
      }
    });

    _defineProperty(this, "requestPublish", (collection, slug, ownStatus) => {
      if (ownStatus !== _publishModes.status.last()) {
        window.alert(this.props.t('workflow.workflowList.onPublishingNotReadyEntry'));
        return;
      } else if (!window.confirm(this.props.t('workflow.workflowList.onPublishEntry'))) {
        return;
      }

      this.props.handlePublish(collection, slug);
    });

    _defineProperty(this, "renderColumns", (entries, column) => {
      const {
        isOpenAuthoring,
        collections,
        t
      } = this.props;
      if (!entries) return null;

      if (!column) {
        return entries.entrySeq().map(([currColumn, currEntries], idx) => (0, _core.jsx)(_UI.DropTarget, {
          namespace: DNDNamespace,
          key: currColumn,
          onDrop: this.handleChangeStatus.bind(this, currColumn)
        }, (connect, {
          isHovered
        }) => connect((0, _core.jsx)("div", {
          style: {
            height: '100%'
          }
        }, (0, _core.jsx)("div", {
          css: /*#__PURE__*/(0, _css2.default)([styles.column, styles.columnPosition(idx), isHovered && styles.columnHovered, isOpenAuthoring && currColumn === 'pending_publish' && styles.hiddenColumn, isOpenAuthoring && currColumn === 'pending_review' && styles.hiddenRightBorder], ";label:WorkflowList;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
        }, (0, _core.jsx)(ColumnHeader, {
          name: currColumn
        }, getColumnHeaderText(currColumn, this.props.t)), (0, _core.jsx)(ColumnCount, null, this.props.t('workflow.workflowList.currentEntries', {
          smart_count: currEntries.size
        })), this.renderColumns(currEntries, currColumn))))));
      }

      return (0, _core.jsx)("div", null, entries.map(entry => {
        var _collections$find;

        const timestamp = (0, _moment.default)(entry.getIn(['metaData', 'timeStamp'])).format(t('workflow.workflow.dateFormat'));
        const slug = entry.get('slug');
        const editLink = "collections/".concat(entry.getIn(['metaData', 'collection']), "/entries/").concat(slug);
        const ownStatus = entry.getIn(['metaData', 'status']);
        const collectionName = entry.getIn(['metaData', 'collection']);
        const collectionLabel = collections === null || collections === void 0 ? void 0 : (_collections$find = collections.find(collection => collection.get('name') === collectionName)) === null || _collections$find === void 0 ? void 0 : _collections$find.get('label');
        const isModification = entry.get('isModification');
        const canPublish = ownStatus === _publishModes.status.last() && !entry.get('isPersisting', false);
        return (0, _core.jsx)(_UI.DragSource, {
          namespace: DNDNamespace,
          key: "".concat(collectionName, "-").concat(slug),
          slug: slug,
          collection: collectionName,
          ownStatus: ownStatus
        }, connect => connect((0, _core.jsx)("div", null, (0, _core.jsx)(_WorkflowCard.default, {
          collectionLabel: collectionLabel || collectionName,
          title: entry.get('label') || entry.getIn(['data', 'title']),
          authorLastChange: entry.getIn(['metaData', 'user']),
          body: entry.getIn(['data', 'body']),
          isModification: isModification,
          editLink: editLink,
          timestamp: timestamp,
          onDelete: this.requestDelete.bind(this, collectionName, slug, ownStatus),
          canPublish: canPublish,
          onPublish: this.requestPublish.bind(this, collectionName, slug, ownStatus)
        }))));
      }));
    });
  }

  render() {
    const columns = this.renderColumns(this.props.entries);
    const ListContainer = this.props.isOpenAuthoring ? WorkflowListContainerOpenAuthoring : WorkflowListContainer;
    return (0, _core.jsx)(ListContainer, null, columns);
  }

}

_defineProperty(WorkflowList, "propTypes", {
  entries: _reactImmutableProptypes.default.orderedMap,
  handleChangeStatus: _propTypes.default.func.isRequired,
  handlePublish: _propTypes.default.func.isRequired,
  handleDelete: _propTypes.default.func.isRequired,
  t: _propTypes.default.func.isRequired,
  isOpenAuthoring: _propTypes.default.bool,
  collections: _reactImmutableProptypes.default.orderedMap
});

var _default = (0, _UI.HTML5DragDrop)((0, _reactPolyglot.translate)()(WorkflowList));

exports.default = _default;