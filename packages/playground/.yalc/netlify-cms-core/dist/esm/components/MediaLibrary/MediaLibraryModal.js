"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.fileShape = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _isEmpty2 = _interopRequireDefault(require("lodash/isEmpty"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _immutable = require("immutable");

var _reactPolyglot = require("react-polyglot");

var _UI = require("../UI");

var _MediaLibrarySearch = _interopRequireDefault(require("./MediaLibrarySearch"));

var _MediaLibraryHeader = _interopRequireDefault(require("./MediaLibraryHeader"));

var _MediaLibraryActions = _interopRequireDefault(require("./MediaLibraryActions"));

var _MediaLibraryCardGrid = _interopRequireDefault(require("./MediaLibraryCardGrid"));

var _EmptyMessage = _interopRequireDefault(require("./EmptyMessage"));

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _core = require("@emotion/core");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

/**
 * Responsive styling needs to be overhauled. Current setup requires specifying
 * widths per breakpoint.
 */
const cardWidth = "280px";
const cardHeight = "240px";
const cardMargin = "10px";
/**
 * cardWidth + cardMargin * 2 = cardOutsideWidth
 * (not using calc because this will be nested in other calcs)
 */

const cardOutsideWidth = "300px";
const LibraryTop = (0, _styledBase.default)("div", {
  target: "ep5ukwb0",
  label: "LibraryTop"
})(process.env.NODE_ENV === "production" ? {
  name: "16tn2ye",
  styles: "position:relative;display:flex;justify-content:space-between;"
} : {
  name: "16tn2ye",
  styles: "position:relative;display:flex;justify-content:space-between;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const StyledModal = ( /*#__PURE__*/0, _styledBase.default)(_UI.Modal, {
  target: "ep5ukwb1",
  label: "StyledModal"
})("display:grid;grid-template-rows:120px auto;width:calc(", cardOutsideWidth, " + 20px);background-color:", props => props.isPrivate && _netlifyCmsUiDefault.colors.grayDark, ";@media (min-width:800px){width:calc(", cardOutsideWidth, " * 2 + 20px);}@media (min-width:1120px){width:calc(", cardOutsideWidth, " * 3 + 20px);}@media (min-width:1440px){width:calc(", cardOutsideWidth, " * 4 + 20px);}@media (min-width:1760px){width:calc(", cardOutsideWidth, " * 5 + 20px);}@media (min-width:2080px){width:calc(", cardOutsideWidth, " * 6 + 20px);}h1{color:", props => props.isPrivate && _netlifyCmsUiDefault.colors.textFieldBorder, ";}button:disabled,label[disabled]{background-color:", props => props.isPrivate && "rgba(217, 217, 217, 0.15)", ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lZGlhTGlicmFyeS9NZWRpYUxpYnJhcnlNb2RhbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrQ2lDIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lZGlhTGlicmFyeS9NZWRpYUxpYnJhcnlNb2RhbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgTWFwIH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCB7IGlzRW1wdHkgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgdHJhbnNsYXRlIH0gZnJvbSAncmVhY3QtcG9seWdsb3QnO1xuaW1wb3J0IHsgTW9kYWwgfSBmcm9tICdVSSc7XG5pbXBvcnQgTWVkaWFMaWJyYXJ5U2VhcmNoIGZyb20gJy4vTWVkaWFMaWJyYXJ5U2VhcmNoJztcbmltcG9ydCBNZWRpYUxpYnJhcnlIZWFkZXIgZnJvbSAnLi9NZWRpYUxpYnJhcnlIZWFkZXInO1xuaW1wb3J0IE1lZGlhTGlicmFyeUFjdGlvbnMgZnJvbSAnLi9NZWRpYUxpYnJhcnlBY3Rpb25zJztcbmltcG9ydCBNZWRpYUxpYnJhcnlDYXJkR3JpZCBmcm9tICcuL01lZGlhTGlicmFyeUNhcmRHcmlkJztcbmltcG9ydCBFbXB0eU1lc3NhZ2UgZnJvbSAnLi9FbXB0eU1lc3NhZ2UnO1xuaW1wb3J0IHsgY29sb3JzIH0gZnJvbSAnbmV0bGlmeS1jbXMtdWktZGVmYXVsdCc7XG5cbi8qKlxuICogUmVzcG9uc2l2ZSBzdHlsaW5nIG5lZWRzIHRvIGJlIG92ZXJoYXVsZWQuIEN1cnJlbnQgc2V0dXAgcmVxdWlyZXMgc3BlY2lmeWluZ1xuICogd2lkdGhzIHBlciBicmVha3BvaW50LlxuICovXG5jb25zdCBjYXJkV2lkdGggPSBgMjgwcHhgO1xuY29uc3QgY2FyZEhlaWdodCA9IGAyNDBweGA7XG5jb25zdCBjYXJkTWFyZ2luID0gYDEwcHhgO1xuXG4vKipcbiAqIGNhcmRXaWR0aCArIGNhcmRNYXJnaW4gKiAyID0gY2FyZE91dHNpZGVXaWR0aFxuICogKG5vdCB1c2luZyBjYWxjIGJlY2F1c2UgdGhpcyB3aWxsIGJlIG5lc3RlZCBpbiBvdGhlciBjYWxjcylcbiAqL1xuY29uc3QgY2FyZE91dHNpZGVXaWR0aCA9IGAzMDBweGA7XG5cbmNvbnN0IExpYnJhcnlUb3AgPSBzdHlsZWQuZGl2YFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbmA7XG5cbmNvbnN0IFN0eWxlZE1vZGFsID0gc3R5bGVkKE1vZGFsKWBcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiAxMjBweCBhdXRvO1xuICB3aWR0aDogY2FsYygke2NhcmRPdXRzaWRlV2lkdGh9ICsgMjBweCk7XG4gIGJhY2tncm91bmQtY29sb3I6ICR7cHJvcHMgPT4gcHJvcHMuaXNQcml2YXRlICYmIGNvbG9ycy5ncmF5RGFya307XG5cbiAgQG1lZGlhIChtaW4td2lkdGg6IDgwMHB4KSB7XG4gICAgd2lkdGg6IGNhbGMoJHtjYXJkT3V0c2lkZVdpZHRofSAqIDIgKyAyMHB4KTtcbiAgfVxuXG4gIEBtZWRpYSAobWluLXdpZHRoOiAxMTIwcHgpIHtcbiAgICB3aWR0aDogY2FsYygke2NhcmRPdXRzaWRlV2lkdGh9ICogMyArIDIwcHgpO1xuICB9XG5cbiAgQG1lZGlhIChtaW4td2lkdGg6IDE0NDBweCkge1xuICAgIHdpZHRoOiBjYWxjKCR7Y2FyZE91dHNpZGVXaWR0aH0gKiA0ICsgMjBweCk7XG4gIH1cblxuICBAbWVkaWEgKG1pbi13aWR0aDogMTc2MHB4KSB7XG4gICAgd2lkdGg6IGNhbGMoJHtjYXJkT3V0c2lkZVdpZHRofSAqIDUgKyAyMHB4KTtcbiAgfVxuXG4gIEBtZWRpYSAobWluLXdpZHRoOiAyMDgwcHgpIHtcbiAgICB3aWR0aDogY2FsYygke2NhcmRPdXRzaWRlV2lkdGh9ICogNiArIDIwcHgpO1xuICB9XG5cbiAgaDEge1xuICAgIGNvbG9yOiAke3Byb3BzID0+IHByb3BzLmlzUHJpdmF0ZSAmJiBjb2xvcnMudGV4dEZpZWxkQm9yZGVyfTtcbiAgfVxuXG4gIGJ1dHRvbjpkaXNhYmxlZCxcbiAgbGFiZWxbZGlzYWJsZWRdIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3Byb3BzID0+IHByb3BzLmlzUHJpdmF0ZSAmJiBgcmdiYSgyMTcsIDIxNywgMjE3LCAwLjE1KWB9O1xuICB9XG5gO1xuXG5jb25zdCBNZWRpYUxpYnJhcnlNb2RhbCA9ICh7XG4gIGlzVmlzaWJsZSxcbiAgY2FuSW5zZXJ0LFxuICBmaWxlcyxcbiAgZHluYW1pY1NlYXJjaCxcbiAgZHluYW1pY1NlYXJjaEFjdGl2ZSxcbiAgZm9ySW1hZ2UsXG4gIGlzTG9hZGluZyxcbiAgaXNQZXJzaXN0aW5nLFxuICBpc0RlbGV0aW5nLFxuICBoYXNOZXh0UGFnZSxcbiAgaXNQYWdpbmF0aW5nLFxuICBwcml2YXRlVXBsb2FkLFxuICBxdWVyeSxcbiAgc2VsZWN0ZWRGaWxlLFxuICBoYW5kbGVGaWx0ZXIsXG4gIGhhbmRsZVF1ZXJ5LFxuICB0b1RhYmxlRGF0YSxcbiAgaGFuZGxlQ2xvc2UsXG4gIGhhbmRsZVNlYXJjaENoYW5nZSxcbiAgaGFuZGxlU2VhcmNoS2V5RG93bixcbiAgaGFuZGxlUGVyc2lzdCxcbiAgaGFuZGxlRGVsZXRlLFxuICBoYW5kbGVJbnNlcnQsXG4gIHNldFNjcm9sbENvbnRhaW5lclJlZixcbiAgaGFuZGxlQXNzZXRDbGljayxcbiAgaGFuZGxlTG9hZE1vcmUsXG4gIGxvYWREaXNwbGF5VVJMLFxuICBkaXNwbGF5VVJMcyxcbiAgdCxcbn0pID0+IHtcbiAgY29uc3QgZmlsdGVyZWRGaWxlcyA9IGZvckltYWdlID8gaGFuZGxlRmlsdGVyKGZpbGVzKSA6IGZpbGVzO1xuICBjb25zdCBxdWVyaWVkRmlsZXMgPSAhZHluYW1pY1NlYXJjaCAmJiBxdWVyeSA/IGhhbmRsZVF1ZXJ5KHF1ZXJ5LCBmaWx0ZXJlZEZpbGVzKSA6IGZpbHRlcmVkRmlsZXM7XG4gIGNvbnN0IHRhYmxlRGF0YSA9IHRvVGFibGVEYXRhKHF1ZXJpZWRGaWxlcyk7XG4gIGNvbnN0IGhhc0ZpbGVzID0gZmlsZXMgJiYgISFmaWxlcy5sZW5ndGg7XG4gIGNvbnN0IGhhc0ZpbHRlcmVkRmlsZXMgPSBmaWx0ZXJlZEZpbGVzICYmICEhZmlsdGVyZWRGaWxlcy5sZW5ndGg7XG4gIGNvbnN0IGhhc1NlYXJjaFJlc3VsdHMgPSBxdWVyaWVkRmlsZXMgJiYgISFxdWVyaWVkRmlsZXMubGVuZ3RoO1xuICBjb25zdCBoYXNNZWRpYSA9IGhhc1NlYXJjaFJlc3VsdHM7XG4gIGNvbnN0IHNob3VsZFNob3dFbXB0eU1lc3NhZ2UgPSAhaGFzTWVkaWE7XG4gIGNvbnN0IGVtcHR5TWVzc2FnZSA9XG4gICAgKGlzTG9hZGluZyAmJiAhaGFzTWVkaWEgJiYgdCgnbWVkaWFMaWJyYXJ5Lm1lZGlhTGlicmFyeU1vZGFsLmxvYWRpbmcnKSkgfHxcbiAgICAoZHluYW1pY1NlYXJjaEFjdGl2ZSAmJiB0KCdtZWRpYUxpYnJhcnkubWVkaWFMaWJyYXJ5TW9kYWwubm9SZXN1bHRzJykpIHx8XG4gICAgKCFoYXNGaWxlcyAmJiB0KCdtZWRpYUxpYnJhcnkubWVkaWFMaWJyYXJ5TW9kYWwubm9Bc3NldHNGb3VuZCcpKSB8fFxuICAgICghaGFzRmlsdGVyZWRGaWxlcyAmJiB0KCdtZWRpYUxpYnJhcnkubWVkaWFMaWJyYXJ5TW9kYWwubm9JbWFnZXNGb3VuZCcpKSB8fFxuICAgICghaGFzU2VhcmNoUmVzdWx0cyAmJiB0KCdtZWRpYUxpYnJhcnkubWVkaWFMaWJyYXJ5TW9kYWwubm9SZXN1bHRzJykpO1xuICBjb25zdCBoYXNTZWxlY3Rpb24gPSBoYXNNZWRpYSAmJiAhaXNFbXB0eShzZWxlY3RlZEZpbGUpO1xuICBjb25zdCBzaG91bGRTaG93QnV0dG9uTG9hZGVyID0gaXNQZXJzaXN0aW5nIHx8IGlzRGVsZXRpbmc7XG5cbiAgcmV0dXJuIChcbiAgICA8U3R5bGVkTW9kYWwgaXNPcGVuPXtpc1Zpc2libGV9IG9uQ2xvc2U9e2hhbmRsZUNsb3NlfSBpc1ByaXZhdGU9e3ByaXZhdGVVcGxvYWR9PlxuICAgICAgPExpYnJhcnlUb3A+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPE1lZGlhTGlicmFyeUhlYWRlclxuICAgICAgICAgICAgb25DbG9zZT17aGFuZGxlQ2xvc2V9XG4gICAgICAgICAgICB0aXRsZT17YCR7cHJpdmF0ZVVwbG9hZCA/IHQoJ21lZGlhTGlicmFyeS5tZWRpYUxpYnJhcnlNb2RhbC5wcml2YXRlJykgOiAnJ30ke1xuICAgICAgICAgICAgICBmb3JJbWFnZVxuICAgICAgICAgICAgICAgID8gdCgnbWVkaWFMaWJyYXJ5Lm1lZGlhTGlicmFyeU1vZGFsLmltYWdlcycpXG4gICAgICAgICAgICAgICAgOiB0KCdtZWRpYUxpYnJhcnkubWVkaWFMaWJyYXJ5TW9kYWwubWVkaWFBc3NldHMnKVxuICAgICAgICAgICAgfWB9XG4gICAgICAgICAgICBpc1ByaXZhdGU9e3ByaXZhdGVVcGxvYWR9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8TWVkaWFMaWJyYXJ5U2VhcmNoXG4gICAgICAgICAgICB2YWx1ZT17cXVlcnl9XG4gICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlU2VhcmNoQ2hhbmdlfVxuICAgICAgICAgICAgb25LZXlEb3duPXtoYW5kbGVTZWFyY2hLZXlEb3dufVxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9e3QoJ21lZGlhTGlicmFyeS5tZWRpYUxpYnJhcnlNb2RhbC5zZWFyY2gnKX1cbiAgICAgICAgICAgIGRpc2FibGVkPXshZHluYW1pY1NlYXJjaEFjdGl2ZSAmJiAhaGFzRmlsdGVyZWRGaWxlc31cbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPE1lZGlhTGlicmFyeUFjdGlvbnNcbiAgICAgICAgICB1cGxvYWRCdXR0b25MYWJlbD17XG4gICAgICAgICAgICBpc1BlcnNpc3RpbmdcbiAgICAgICAgICAgICAgPyB0KCdtZWRpYUxpYnJhcnkubWVkaWFMaWJyYXJ5TW9kYWwudXBsb2FkaW5nJylcbiAgICAgICAgICAgICAgOiB0KCdtZWRpYUxpYnJhcnkubWVkaWFMaWJyYXJ5TW9kYWwudXBsb2FkTmV3JylcbiAgICAgICAgICB9XG4gICAgICAgICAgZGVsZXRlQnV0dG9uTGFiZWw9e1xuICAgICAgICAgICAgaXNEZWxldGluZ1xuICAgICAgICAgICAgICA/IHQoJ21lZGlhTGlicmFyeS5tZWRpYUxpYnJhcnlNb2RhbC5kZWxldGluZycpXG4gICAgICAgICAgICAgIDogdCgnbWVkaWFMaWJyYXJ5Lm1lZGlhTGlicmFyeU1vZGFsLmRlbGV0ZVNlbGVjdGVkJylcbiAgICAgICAgICB9XG4gICAgICAgICAgaW5zZXJ0QnV0dG9uTGFiZWw9e3QoJ21lZGlhTGlicmFyeS5tZWRpYUxpYnJhcnlNb2RhbC5jaG9vc2VTZWxlY3RlZCcpfVxuICAgICAgICAgIHVwbG9hZEVuYWJsZWQ9eyFzaG91bGRTaG93QnV0dG9uTG9hZGVyfVxuICAgICAgICAgIGRlbGV0ZUVuYWJsZWQ9eyFzaG91bGRTaG93QnV0dG9uTG9hZGVyICYmIGhhc1NlbGVjdGlvbn1cbiAgICAgICAgICBpbnNlcnRFbmFibGVkPXtoYXNTZWxlY3Rpb259XG4gICAgICAgICAgaW5zZXJ0VmlzaWJsZT17Y2FuSW5zZXJ0fVxuICAgICAgICAgIGltYWdlc09ubHk9e2ZvckltYWdlfVxuICAgICAgICAgIG9uUGVyc2lzdD17aGFuZGxlUGVyc2lzdH1cbiAgICAgICAgICBvbkRlbGV0ZT17aGFuZGxlRGVsZXRlfVxuICAgICAgICAgIG9uSW5zZXJ0PXtoYW5kbGVJbnNlcnR9XG4gICAgICAgIC8+XG4gICAgICA8L0xpYnJhcnlUb3A+XG4gICAgICB7IXNob3VsZFNob3dFbXB0eU1lc3NhZ2UgPyBudWxsIDogKFxuICAgICAgICA8RW1wdHlNZXNzYWdlIGNvbnRlbnQ9e2VtcHR5TWVzc2FnZX0gaXNQcml2YXRlPXtwcml2YXRlVXBsb2FkfSAvPlxuICAgICAgKX1cbiAgICAgIDxNZWRpYUxpYnJhcnlDYXJkR3JpZFxuICAgICAgICBzZXRTY3JvbGxDb250YWluZXJSZWY9e3NldFNjcm9sbENvbnRhaW5lclJlZn1cbiAgICAgICAgbWVkaWFJdGVtcz17dGFibGVEYXRhfVxuICAgICAgICBpc1NlbGVjdGVkRmlsZT17ZmlsZSA9PiBzZWxlY3RlZEZpbGUua2V5ID09PSBmaWxlLmtleX1cbiAgICAgICAgb25Bc3NldENsaWNrPXtoYW5kbGVBc3NldENsaWNrfVxuICAgICAgICBjYW5Mb2FkTW9yZT17aGFzTmV4dFBhZ2V9XG4gICAgICAgIG9uTG9hZE1vcmU9e2hhbmRsZUxvYWRNb3JlfVxuICAgICAgICBpc1BhZ2luYXRpbmc9e2lzUGFnaW5hdGluZ31cbiAgICAgICAgcGFnaW5hdGluZ01lc3NhZ2U9e3QoJ21lZGlhTGlicmFyeS5tZWRpYUxpYnJhcnlNb2RhbC5sb2FkaW5nJyl9XG4gICAgICAgIGNhcmREcmFmdFRleHQ9e3QoJ21lZGlhTGlicmFyeS5tZWRpYUxpYnJhcnlDYXJkLmRyYWZ0Jyl9XG4gICAgICAgIGNhcmRXaWR0aD17Y2FyZFdpZHRofVxuICAgICAgICBjYXJkSGVpZ2h0PXtjYXJkSGVpZ2h0fVxuICAgICAgICBjYXJkTWFyZ2luPXtjYXJkTWFyZ2lufVxuICAgICAgICBpc1ByaXZhdGU9e3ByaXZhdGVVcGxvYWR9XG4gICAgICAgIGxvYWREaXNwbGF5VVJMPXtsb2FkRGlzcGxheVVSTH1cbiAgICAgICAgZGlzcGxheVVSTHM9e2Rpc3BsYXlVUkxzfVxuICAgICAgLz5cbiAgICA8L1N0eWxlZE1vZGFsPlxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IGZpbGVTaGFwZSA9IHtcbiAgZGlzcGxheVVSTDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLmlzUmVxdWlyZWQsXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGtleTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHF1ZXJ5T3JkZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gIHNpemU6IFByb3BUeXBlcy5udW1iZXIsXG4gIHBhdGg6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbn07XG5cbk1lZGlhTGlicmFyeU1vZGFsLnByb3BUeXBlcyA9IHtcbiAgaXNWaXNpYmxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgY2FuSW5zZXJ0OiBQcm9wVHlwZXMuYm9vbCxcbiAgZmlsZXM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zaGFwZShmaWxlU2hhcGUpKS5pc1JlcXVpcmVkLFxuICBkeW5hbWljU2VhcmNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgZHluYW1pY1NlYXJjaEFjdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gIGZvckltYWdlOiBQcm9wVHlwZXMuYm9vbCxcbiAgaXNMb2FkaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgaXNQZXJzaXN0aW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgaXNEZWxldGluZzogUHJvcFR5cGVzLmJvb2wsXG4gIGhhc05leHRQYWdlOiBQcm9wVHlwZXMuYm9vbCxcbiAgaXNQYWdpbmF0aW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgcHJpdmF0ZVVwbG9hZDogUHJvcFR5cGVzLmJvb2wsXG4gIHF1ZXJ5OiBQcm9wVHlwZXMuc3RyaW5nLFxuICBzZWxlY3RlZEZpbGU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zaGFwZShmaWxlU2hhcGUpLCBQcm9wVHlwZXMuc2hhcGUoe30pXSksXG4gIGhhbmRsZUZpbHRlcjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgaGFuZGxlUXVlcnk6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIHRvVGFibGVEYXRhOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBoYW5kbGVDbG9zZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgaGFuZGxlU2VhcmNoQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBoYW5kbGVTZWFyY2hLZXlEb3duOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBoYW5kbGVQZXJzaXN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBoYW5kbGVEZWxldGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGhhbmRsZUluc2VydDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgc2V0U2Nyb2xsQ29udGFpbmVyUmVmOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBoYW5kbGVBc3NldENsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBoYW5kbGVMb2FkTW9yZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgbG9hZERpc3BsYXlVUkw6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGRpc3BsYXlVUkxzOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihNYXApLmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCB0cmFuc2xhdGUoKShNZWRpYUxpYnJhcnlNb2RhbCk7XG4iXX0= */"));

const MediaLibraryModal = ({
  isVisible,
  canInsert,
  files,
  dynamicSearch,
  dynamicSearchActive,
  forImage,
  isLoading,
  isPersisting,
  isDeleting,
  hasNextPage,
  isPaginating,
  privateUpload,
  query,
  selectedFile,
  handleFilter,
  handleQuery,
  toTableData,
  handleClose,
  handleSearchChange,
  handleSearchKeyDown,
  handlePersist,
  handleDelete,
  handleInsert,
  setScrollContainerRef,
  handleAssetClick,
  handleLoadMore,
  loadDisplayURL,
  displayURLs,
  t
}) => {
  const filteredFiles = forImage ? handleFilter(files) : files;
  const queriedFiles = !dynamicSearch && query ? handleQuery(query, filteredFiles) : filteredFiles;
  const tableData = toTableData(queriedFiles);
  const hasFiles = files && !!files.length;
  const hasFilteredFiles = filteredFiles && !!filteredFiles.length;
  const hasSearchResults = queriedFiles && !!queriedFiles.length;
  const hasMedia = hasSearchResults;
  const shouldShowEmptyMessage = !hasMedia;
  const emptyMessage = isLoading && !hasMedia && t('mediaLibrary.mediaLibraryModal.loading') || dynamicSearchActive && t('mediaLibrary.mediaLibraryModal.noResults') || !hasFiles && t('mediaLibrary.mediaLibraryModal.noAssetsFound') || !hasFilteredFiles && t('mediaLibrary.mediaLibraryModal.noImagesFound') || !hasSearchResults && t('mediaLibrary.mediaLibraryModal.noResults');
  const hasSelection = hasMedia && !(0, _isEmpty2.default)(selectedFile);
  const shouldShowButtonLoader = isPersisting || isDeleting;
  return (0, _core.jsx)(StyledModal, {
    isOpen: isVisible,
    onClose: handleClose,
    isPrivate: privateUpload
  }, (0, _core.jsx)(LibraryTop, null, (0, _core.jsx)("div", null, (0, _core.jsx)(_MediaLibraryHeader.default, {
    onClose: handleClose,
    title: "".concat(privateUpload ? t('mediaLibrary.mediaLibraryModal.private') : '').concat(forImage ? t('mediaLibrary.mediaLibraryModal.images') : t('mediaLibrary.mediaLibraryModal.mediaAssets')),
    isPrivate: privateUpload
  }), (0, _core.jsx)(_MediaLibrarySearch.default, {
    value: query,
    onChange: handleSearchChange,
    onKeyDown: handleSearchKeyDown,
    placeholder: t('mediaLibrary.mediaLibraryModal.search'),
    disabled: !dynamicSearchActive && !hasFilteredFiles
  })), (0, _core.jsx)(_MediaLibraryActions.default, {
    uploadButtonLabel: isPersisting ? t('mediaLibrary.mediaLibraryModal.uploading') : t('mediaLibrary.mediaLibraryModal.uploadNew'),
    deleteButtonLabel: isDeleting ? t('mediaLibrary.mediaLibraryModal.deleting') : t('mediaLibrary.mediaLibraryModal.deleteSelected'),
    insertButtonLabel: t('mediaLibrary.mediaLibraryModal.chooseSelected'),
    uploadEnabled: !shouldShowButtonLoader,
    deleteEnabled: !shouldShowButtonLoader && hasSelection,
    insertEnabled: hasSelection,
    insertVisible: canInsert,
    imagesOnly: forImage,
    onPersist: handlePersist,
    onDelete: handleDelete,
    onInsert: handleInsert
  })), !shouldShowEmptyMessage ? null : (0, _core.jsx)(_EmptyMessage.default, {
    content: emptyMessage,
    isPrivate: privateUpload
  }), (0, _core.jsx)(_MediaLibraryCardGrid.default, {
    setScrollContainerRef: setScrollContainerRef,
    mediaItems: tableData,
    isSelectedFile: file => selectedFile.key === file.key,
    onAssetClick: handleAssetClick,
    canLoadMore: hasNextPage,
    onLoadMore: handleLoadMore,
    isPaginating: isPaginating,
    paginatingMessage: t('mediaLibrary.mediaLibraryModal.loading'),
    cardDraftText: t('mediaLibrary.mediaLibraryCard.draft'),
    cardWidth: cardWidth,
    cardHeight: cardHeight,
    cardMargin: cardMargin,
    isPrivate: privateUpload,
    loadDisplayURL: loadDisplayURL,
    displayURLs: displayURLs
  }));
};

const fileShape = {
  displayURL: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]).isRequired,
  id: _propTypes.default.string.isRequired,
  key: _propTypes.default.string.isRequired,
  name: _propTypes.default.string.isRequired,
  queryOrder: _propTypes.default.number,
  size: _propTypes.default.number,
  path: _propTypes.default.string.isRequired
};
exports.fileShape = fileShape;
MediaLibraryModal.propTypes = {
  isVisible: _propTypes.default.bool,
  canInsert: _propTypes.default.bool,
  files: _propTypes.default.arrayOf(_propTypes.default.shape(fileShape)).isRequired,
  dynamicSearch: _propTypes.default.bool,
  dynamicSearchActive: _propTypes.default.bool,
  forImage: _propTypes.default.bool,
  isLoading: _propTypes.default.bool,
  isPersisting: _propTypes.default.bool,
  isDeleting: _propTypes.default.bool,
  hasNextPage: _propTypes.default.bool,
  isPaginating: _propTypes.default.bool,
  privateUpload: _propTypes.default.bool,
  query: _propTypes.default.string,
  selectedFile: _propTypes.default.oneOfType([_propTypes.default.shape(fileShape), _propTypes.default.shape({})]),
  handleFilter: _propTypes.default.func.isRequired,
  handleQuery: _propTypes.default.func.isRequired,
  toTableData: _propTypes.default.func.isRequired,
  handleClose: _propTypes.default.func.isRequired,
  handleSearchChange: _propTypes.default.func.isRequired,
  handleSearchKeyDown: _propTypes.default.func.isRequired,
  handlePersist: _propTypes.default.func.isRequired,
  handleDelete: _propTypes.default.func.isRequired,
  handleInsert: _propTypes.default.func.isRequired,
  setScrollContainerRef: _propTypes.default.func.isRequired,
  handleAssetClick: _propTypes.default.func.isRequired,
  handleLoadMore: _propTypes.default.func.isRequired,
  loadDisplayURL: _propTypes.default.func.isRequired,
  t: _propTypes.default.func.isRequired,
  displayURLs: _propTypes.default.instanceOf(_immutable.Map).isRequired
};

var _default = (0, _reactPolyglot.translate)()(MediaLibraryModal);

exports.default = _default;