"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _core = require("@emotion/core");

var _reactPolyglot = require("react-polyglot");

var _immutable = require("immutable");

var _reactRouterDom = require("react-router-dom");

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _publishModes = require("../../constants/publishModes");

var _SettingsDropdown = _interopRequireDefault(require("../UI/SettingsDropdown"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

const styles = {
  noOverflow: process.env.NODE_ENV === "production" ? {
    name: "1ven8wv-noOverflow",
    styles: "overflow:hidden;white-space:nowrap;text-overflow:ellipsis;;label:noOverflow;"
  } : {
    name: "1ven8wv-noOverflow",
    styles: "overflow:hidden;white-space:nowrap;text-overflow:ellipsis;;label:noOverflow;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  },
  buttonMargin: process.env.NODE_ENV === "production" ? {
    name: "1yqtsv2-buttonMargin",
    styles: "margin:0 10px;;label:buttonMargin;"
  } : {
    name: "1yqtsv2-buttonMargin",
    styles: "margin:0 10px;;label:buttonMargin;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  },
  toolbarSection: /*#__PURE__*/(0, _core.css)("height:100%;display:flex;align-items:center;border:0 solid ", _netlifyCmsUiDefault.colors.textFieldBorder, ";;label:toolbarSection;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
  publishedButton: /*#__PURE__*/(0, _core.css)("background-color:", _netlifyCmsUiDefault.colorsRaw.tealLight, ";color:", _netlifyCmsUiDefault.colorsRaw.teal, ";;label:publishedButton;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
};
const DropdownButton = ( /*#__PURE__*/0, _styledBase.default)(_netlifyCmsUiDefault.StyledDropdownButton, {
  target: "evqrzhe0",
  label: "DropdownButton"
})(styles.noOverflow, " @media (max-width:1200px){padding-left:10px;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ToolbarContainer = (0, _styledBase.default)("div", {
  target: "evqrzhe1",
  label: "ToolbarContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "fykiwf",
  styles: "box-shadow:0 2px 6px 0 rgba(68,74,87,0.05),0 1px 3px 0 rgba(68,74,87,0.1),0 2px 54px rgba(0,0,0,0.1);position:fixed;top:0;left:0;width:100%;min-width:800px;z-index:300;background-color:#fff;height:66px;display:flex;justify-content:space-between;"
} : {
  name: "fykiwf",
  styles: "box-shadow:0 2px 6px 0 rgba(68,74,87,0.05),0 1px 3px 0 rgba(68,74,87,0.1),0 2px 54px rgba(0,0,0,0.1);position:fixed;top:0;left:0;width:100%;min-width:800px;z-index:300;background-color:#fff;height:66px;display:flex;justify-content:space-between;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const ToolbarSectionMain = (0, _styledBase.default)("div", {
  target: "evqrzhe2",
  label: "ToolbarSectionMain"
})(styles.toolbarSection, ";flex:10;display:flex;justify-content:space-between;padding:0 10px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ToolbarSubSectionFirst = (0, _styledBase.default)("div", {
  target: "evqrzhe3",
  label: "ToolbarSubSectionFirst"
})(process.env.NODE_ENV === "production" ? {
  name: "70qvj9",
  styles: "display:flex;align-items:center;"
} : {
  name: "70qvj9",
  styles: "display:flex;align-items:center;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JUb29sYmFyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXdFeUMiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvRWRpdG9yL0VkaXRvclRvb2xiYXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IE1hcCB9IGZyb20gJ2ltbXV0YWJsZSc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQge1xuICBJY29uLFxuICBEcm9wZG93bixcbiAgRHJvcGRvd25JdGVtLFxuICBTdHlsZWREcm9wZG93bkJ1dHRvbixcbiAgY29sb3JzUmF3LFxuICBjb2xvcnMsXG4gIGNvbXBvbmVudHMsXG4gIGJ1dHRvbnMsXG59IGZyb20gJ25ldGxpZnktY21zLXVpLWRlZmF1bHQnO1xuaW1wb3J0IHsgc3RhdHVzIH0gZnJvbSAnQ29uc3RhbnRzL3B1Ymxpc2hNb2Rlcyc7XG5pbXBvcnQgU2V0dGluZ3NEcm9wZG93biBmcm9tICdVSS9TZXR0aW5nc0Ryb3Bkb3duJztcblxuY29uc3Qgc3R5bGVzID0ge1xuICBub092ZXJmbG93OiBjc3NgXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICBgLFxuICBidXR0b25NYXJnaW46IGNzc2BcbiAgICBtYXJnaW46IDAgMTBweDtcbiAgYCxcbiAgdG9vbGJhclNlY3Rpb246IGNzc2BcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGJvcmRlcjogMCBzb2xpZCAke2NvbG9ycy50ZXh0RmllbGRCb3JkZXJ9O1xuICBgLFxuICBwdWJsaXNoZWRCdXR0b246IGNzc2BcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsTGlnaHR9O1xuICAgIGNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsfTtcbiAgYCxcbn07XG5cbmNvbnN0IERyb3Bkb3duQnV0dG9uID0gc3R5bGVkKFN0eWxlZERyb3Bkb3duQnV0dG9uKWBcbiAgJHtzdHlsZXMubm9PdmVyZmxvd31cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEyMDBweCkge1xuICAgIHBhZGRpbmctbGVmdDogMTBweDtcbiAgfVxuYDtcblxuY29uc3QgVG9vbGJhckNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIGJveC1zaGFkb3c6IDAgMnB4IDZweCAwIHJnYmEoNjgsIDc0LCA4NywgMC4wNSksIDAgMXB4IDNweCAwIHJnYmEoNjgsIDc0LCA4NywgMC4xKSxcbiAgICAwIDJweCA1NHB4IHJnYmEoMCwgMCwgMCwgMC4xKTtcbiAgcG9zaXRpb246IGZpeGVkO1xuICB0b3A6IDA7XG4gIGxlZnQ6IDA7XG4gIHdpZHRoOiAxMDAlO1xuICBtaW4td2lkdGg6IDgwMHB4O1xuICB6LWluZGV4OiAzMDA7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gIGhlaWdodDogNjZweDtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuYDtcblxuY29uc3QgVG9vbGJhclNlY3Rpb25NYWluID0gc3R5bGVkLmRpdmBcbiAgJHtzdHlsZXMudG9vbGJhclNlY3Rpb259O1xuICBmbGV4OiAxMDtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBwYWRkaW5nOiAwIDEwcHg7XG5gO1xuXG5jb25zdCBUb29sYmFyU3ViU2VjdGlvbkZpcnN0ID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbmA7XG5cbmNvbnN0IFRvb2xiYXJTdWJTZWN0aW9uTGFzdCA9IHN0eWxlZChUb29sYmFyU3ViU2VjdGlvbkZpcnN0KWBcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbmA7XG5cbmNvbnN0IFRvb2xiYXJTZWN0aW9uQmFja0xpbmsgPSBzdHlsZWQoTGluaylgXG4gICR7c3R5bGVzLnRvb2xiYXJTZWN0aW9ufTtcbiAgYm9yZGVyLXJpZ2h0LXdpZHRoOiAxcHg7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIHBhZGRpbmc6IDAgMjBweDtcblxuICAmOmhvdmVyLFxuICAmOmZvY3VzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjFmMmY0O1xuICB9XG5gO1xuXG5jb25zdCBUb29sYmFyU2VjdGlvbk1ldGEgPSBzdHlsZWQuZGl2YFxuICAke3N0eWxlcy50b29sYmFyU2VjdGlvbn07XG4gIGJvcmRlci1sZWZ0LXdpZHRoOiAxcHg7XG4gIHBhZGRpbmc6IDAgN3B4O1xuYDtcblxuY29uc3QgVG9vbGJhckRyb3Bkb3duID0gc3R5bGVkKERyb3Bkb3duKWBcbiAgJHtzdHlsZXMuYnV0dG9uTWFyZ2lufTtcblxuICAke0ljb259IHtcbiAgICBjb2xvcjogJHtjb2xvcnNSYXcudGVhbH07XG4gIH1cbmA7XG5cbmNvbnN0IEJhY2tBcnJvdyA9IHN0eWxlZC5kaXZgXG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0TGVhZH07XG4gIGZvbnQtc2l6ZTogMjFweDtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgbWFyZ2luLXJpZ2h0OiAxNnB4O1xuYDtcblxuY29uc3QgQmFja0NvbGxlY3Rpb24gPSBzdHlsZWQuZGl2YFxuICBjb2xvcjogJHtjb2xvcnMudGV4dExlYWR9O1xuICBmb250LXNpemU6IDE0cHg7XG5gO1xuXG5jb25zdCBCYWNrU3RhdHVzID0gc3R5bGVkLmRpdmBcbiAgbWFyZ2luLXRvcDogNnB4O1xuYDtcblxuY29uc3QgQmFja1N0YXR1c1VuY2hhbmdlZCA9IHN0eWxlZChCYWNrU3RhdHVzKWBcbiAgJHtjb21wb25lbnRzLnRleHRCYWRnZVN1Y2Nlc3N9O1xuXG4gICY6OmFmdGVyIHtcbiAgICBoZWlnaHQ6IDEycHg7XG4gICAgd2lkdGg6IDE1LjVweDtcbiAgICBjb2xvcjogJHtjb2xvcnMuc3VjY2Vzc1RleHR9O1xuICAgIG1hcmdpbi1sZWZ0OiA1cHg7XG5cbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgdG9wOiAxcHg7XG5cbiAgICBjb250ZW50OiB1cmwoXCJkYXRhOmltYWdlL3N2Zyt4bWw7IHV0ZjgsIDxzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB3aWR0aD0nMTUnIGhlaWdodD0nMTEnPjxwYXRoIGZpbGw9JyMwMDU2MTQnIGZpbGwtcnVsZT0nbm9uemVybycgZD0nTTQuMDE2IDExbC0uNjQ4LS45NDZhNi4yMDIgNi4yMDIgMCAwIDAtLjE1Ny0uMjIgOS41MjYgOS41MjYgMCAwIDEtLjA5Ni0uMTMzbC0uNTExLS43YTcuNDEzIDcuNDEzIDAgMCAwLS4xNjItLjIxNGwtLjEwMi0uMTM0LS4yNjUtLjM0NmEyNi45MDMgMjYuOTAzIDAgMCAwLS41NDMtLjY4N2wtLjExLS4xMzZjLS4xNDMtLjE3OS0uMjkxLS4zNjMtLjQ0Mi0uNTRsLS4yNzgtLjMzMmE4Ljg1NCA4Ljg1NCAwIDAgMC0uMTkyLS4yMjVMLjQxNyA2LjI4bC0uMjgzLS4zMjRMMCA1LjgwNWwxLjM3Ni0xLjYwMmMuMDQuMDI3LjE4Ni4xMzIuMTg2LjEzMmwuMzc3LjI3Mi4xMjkuMDk1Yy4wOC4wNTguMTYuMTE1LjIzNy4xNzVsLjM3LjI4Yy4xOTIuMTQyLjM4Mi4yOTIuNTY1LjQzNmwuMTYyLjEyNmMuMjcuMjEuNTAzLjM5OC43MTQuNTc0bC40NzcuMzkzYy4wNzguMDY0LjE1Ni4xMjcuMjMuMTk0bC40MzMuMzc1LjE3MS0uMjA1QTUwLjg2NSA1MC44NjUgMCAwIDEgOC4xOCA0LjAyM2EzNS4xNjMgMzUuMTYzIDAgMCAxIDIuMzgyLTIuMjEzYy4yMDctLjE3NC40Mi0uMzQ5LjYzNS0uNTE4bC4zMjgtLjI1NS4zMzMtLjI0NWMuMDcyLS4wNTUuMTQ2LS4xMDcuMjIxLS4xNTlsLjExNy0uMDgzYy4xMS0uMDc3LjIyNS0uMTU1LjM0MS0uMjMuMTYzLS4xMS4zMzQtLjIxNy41MDMtLjMybDEuMTU4IDEuNzRhMTEuOTA4IDExLjkwOCAwIDAgMC0uNjQuNTVsLS4wNjUuMDZjLS4wNy4wNjItLjEzOS4xMjUtLjIwNy4xOTJsLS4yNTguMjQ5LS4yNi4yNjVjLS4xNzMuMTc2LS4zNDUuMzU3LS41MTIuNTM5YTMyLjYyNiAzMi42MjYgMCAwIDAtMS45MTUgMi4zMTMgNTIuMTE1IDUyLjExNSAwIDAgMC0yLjU3MiAzLjc0NmwtLjM5Mi42NDItLjE5LjMyMi0uMjMzLjM4Mkg0LjAxNnonLz48L3N2Zz5cIik7XG4gIH1cbmA7XG5cbmNvbnN0IEJhY2tTdGF0dXNDaGFuZ2VkID0gc3R5bGVkKEJhY2tTdGF0dXMpYFxuICAke2NvbXBvbmVudHMudGV4dEJhZGdlRGFuZ2VyfTtcbmA7XG5cbmNvbnN0IFRvb2xiYXJCdXR0b24gPSBzdHlsZWQuYnV0dG9uYFxuICAke2J1dHRvbnMuYnV0dG9ufTtcbiAgJHtidXR0b25zLmRlZmF1bHR9O1xuICAke3N0eWxlcy5idXR0b25NYXJnaW59O1xuICAke3N0eWxlcy5ub092ZXJmbG93fTtcbiAgZGlzcGxheTogYmxvY2s7XG5cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEyMDBweCkge1xuICAgIHBhZGRpbmc6IDAgMTBweDtcbiAgfVxuYDtcblxuY29uc3QgRGVsZXRlQnV0dG9uID0gc3R5bGVkKFRvb2xiYXJCdXR0b24pYFxuICAke2J1dHRvbnMubGlnaHRSZWR9O1xuYDtcblxuY29uc3QgU2F2ZUJ1dHRvbiA9IHN0eWxlZChUb29sYmFyQnV0dG9uKWBcbiAgJHtidXR0b25zLmxpZ2h0Qmx1ZX07XG5gO1xuXG5jb25zdCBQdWJsaXNoZWRUb29sYmFyQnV0dG9uID0gc3R5bGVkKERyb3Bkb3duQnV0dG9uKWBcbiAgJHtzdHlsZXMucHVibGlzaGVkQnV0dG9ufVxuYDtcblxuY29uc3QgUHVibGlzaGVkQnV0dG9uID0gc3R5bGVkKFRvb2xiYXJCdXR0b24pYFxuICAke3N0eWxlcy5wdWJsaXNoZWRCdXR0b259XG5gO1xuXG5jb25zdCBQdWJsaXNoQnV0dG9uID0gc3R5bGVkKERyb3Bkb3duQnV0dG9uKWBcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnNSYXcudGVhbH07XG5gO1xuXG5jb25zdCBTdGF0dXNCdXR0b24gPSBzdHlsZWQoRHJvcGRvd25CdXR0b24pYFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsTGlnaHR9O1xuICBjb2xvcjogJHtjb2xvcnNSYXcudGVhbH07XG5gO1xuXG5jb25zdCBQcmV2aWV3QnV0dG9uQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgbWFyZ2luLXJpZ2h0OiAxMnB4O1xuICBjb2xvcjogJHtjb2xvcnNSYXcuYmx1ZX07XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgYSxcbiAgJHtJY29ufSB7XG4gICAgY29sb3I6ICR7Y29sb3JzUmF3LmJsdWV9O1xuICB9XG5cbiAgJHtJY29ufSB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHRvcDogMXB4O1xuICB9XG5gO1xuXG5jb25zdCBSZWZyZXNoUHJldmlld0J1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gIGJhY2tncm91bmQ6IG5vbmU7XG4gIGJvcmRlcjogMDtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBjb2xvcjogJHtjb2xvcnNSYXcuYmx1ZX07XG5cbiAgc3BhbiB7XG4gICAgbWFyZ2luLXJpZ2h0OiA2cHg7XG4gIH1cbmA7XG5cbmNvbnN0IFByZXZpZXdMaW5rID0gUmVmcmVzaFByZXZpZXdCdXR0b24ud2l0aENvbXBvbmVudCgnYScpO1xuXG5jb25zdCBTdGF0dXNEcm9wZG93bkl0ZW0gPSBzdHlsZWQoRHJvcGRvd25JdGVtKWBcbiAgJHtJY29ufSB7XG4gICAgY29sb3I6ICR7Y29sb3JzLmluZm9UZXh0fTtcbiAgfVxuYDtcblxuY2xhc3MgRWRpdG9yVG9vbGJhciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgaXNQZXJzaXN0aW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc1B1Ymxpc2hpbmc6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzVXBkYXRpbmdTdGF0dXM6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzRGVsZXRpbmc6IFByb3BUeXBlcy5ib29sLFxuICAgIG9uUGVyc2lzdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblBlcnNpc3RBbmROZXc6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25QZXJzaXN0QW5kRHVwbGljYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHNob3dEZWxldGU6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgb25EZWxldGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25EZWxldGVVbnB1Ymxpc2hlZENoYW5nZXM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25DaGFuZ2VTdGF0dXM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25QdWJsaXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHVuUHVibGlzaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkR1cGxpY2F0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblB1Ymxpc2hBbmROZXc6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25QdWJsaXNoQW5kRHVwbGljYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHVzZXI6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgICBoYXNDaGFuZ2VkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBkaXNwbGF5VXJsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNvbGxlY3Rpb246IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgICBoYXNXb3JrZmxvdzogUHJvcFR5cGVzLmJvb2wsXG4gICAgdXNlT3BlbkF1dGhvcmluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgaGFzVW5wdWJsaXNoZWRDaGFuZ2VzOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc05ld0VudHJ5OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc01vZGlmaWNhdGlvbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgY3VycmVudFN0YXR1czogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBvbkxvZ291dENsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGRlcGxveVByZXZpZXc6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAsXG4gICAgbG9hZERlcGxveVByZXZpZXc6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBjb25zdCB7IGlzTmV3RW50cnksIGxvYWREZXBsb3lQcmV2aWV3IH0gPSB0aGlzLnByb3BzO1xuICAgIGlmICghaXNOZXdFbnRyeSkge1xuICAgICAgbG9hZERlcGxveVByZXZpZXcoeyBtYXhBdHRlbXB0czogMyB9KTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgY29uc3QgeyBpc05ld0VudHJ5LCBpc1BlcnNpc3RpbmcsIGxvYWREZXBsb3lQcmV2aWV3IH0gPSB0aGlzLnByb3BzO1xuICAgIGlmICghaXNOZXdFbnRyeSAmJiBwcmV2UHJvcHMuaXNQZXJzaXN0aW5nICYmICFpc1BlcnNpc3RpbmcpIHtcbiAgICAgIGxvYWREZXBsb3lQcmV2aWV3KHsgbWF4QXR0ZW1wdHM6IDMgfSk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyU2ltcGxlU2F2ZUNvbnRyb2xzID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgc2hvd0RlbGV0ZSwgb25EZWxldGUsIHQgfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIHtzaG93RGVsZXRlID8gKFxuICAgICAgICAgIDxEZWxldGVCdXR0b24gb25DbGljaz17b25EZWxldGV9Pnt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZWxldGVFbnRyeScpfTwvRGVsZXRlQnV0dG9uPlxuICAgICAgICApIDogbnVsbH1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyRGVwbG95UHJldmlld0NvbnRyb2xzID0gbGFiZWwgPT4ge1xuICAgIGNvbnN0IHsgZGVwbG95UHJldmlldyA9IE1hcCgpLCBsb2FkRGVwbG95UHJldmlldywgdCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB1cmwgPSBkZXBsb3lQcmV2aWV3LmdldCgndXJsJyk7XG4gICAgY29uc3Qgc3RhdHVzID0gZGVwbG95UHJldmlldy5nZXQoJ3N0YXR1cycpO1xuXG4gICAgaWYgKCFzdGF0dXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBpc0ZldGNoaW5nID0gZGVwbG95UHJldmlldy5nZXQoJ2lzRmV0Y2hpbmcnKTtcbiAgICBjb25zdCBkZXBsb3lQcmV2aWV3UmVhZHkgPSBzdGF0dXMgPT09ICdTVUNDRVNTJyAmJiAhaXNGZXRjaGluZztcbiAgICByZXR1cm4gKFxuICAgICAgPFByZXZpZXdCdXR0b25Db250YWluZXI+XG4gICAgICAgIHtkZXBsb3lQcmV2aWV3UmVhZHkgPyAoXG4gICAgICAgICAgPFByZXZpZXdMaW5rIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIiB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPXt1cmx9PlxuICAgICAgICAgICAgPHNwYW4+e2xhYmVsfTwvc3Bhbj5cbiAgICAgICAgICAgIDxJY29uIHR5cGU9XCJuZXctdGFiXCIgc2l6ZT1cInhzbWFsbFwiIC8+XG4gICAgICAgICAgPC9QcmV2aWV3TGluaz5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8UmVmcmVzaFByZXZpZXdCdXR0b24gb25DbGljaz17bG9hZERlcGxveVByZXZpZXd9PlxuICAgICAgICAgICAgPHNwYW4+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlcGxveVByZXZpZXdQZW5kaW5nQnV0dG9uTGFiZWwnKX08L3NwYW4+XG4gICAgICAgICAgICA8SWNvbiB0eXBlPVwicmVmcmVzaFwiIHNpemU9XCJ4c21hbGxcIiAvPlxuICAgICAgICAgIDwvUmVmcmVzaFByZXZpZXdCdXR0b24+XG4gICAgICAgICl9XG4gICAgICA8L1ByZXZpZXdCdXR0b25Db250YWluZXI+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJTaW1wbGVQdWJsaXNoQ29udHJvbHMgPSAoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgY29sbGVjdGlvbixcbiAgICAgIG9uUGVyc2lzdCxcbiAgICAgIG9uUGVyc2lzdEFuZE5ldyxcbiAgICAgIG9uUGVyc2lzdEFuZER1cGxpY2F0ZSxcbiAgICAgIG9uRHVwbGljYXRlLFxuICAgICAgaXNQZXJzaXN0aW5nLFxuICAgICAgaGFzQ2hhbmdlZCxcbiAgICAgIGlzTmV3RW50cnksXG4gICAgICB0LFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgY2FuQ3JlYXRlID0gY29sbGVjdGlvbi5nZXQoJ2NyZWF0ZScpO1xuICAgIGlmICghaXNOZXdFbnRyeSAmJiAhaGFzQ2hhbmdlZCkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPD5cbiAgICAgICAgICB7dGhpcy5yZW5kZXJEZXBsb3lQcmV2aWV3Q29udHJvbHModCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZGVwbG95QnV0dG9uTGFiZWwnKSl9XG4gICAgICAgICAge2NhbkNyZWF0ZSA/IChcbiAgICAgICAgICAgIDxUb29sYmFyRHJvcGRvd25cbiAgICAgICAgICAgICAgZHJvcGRvd25Ub3BPdmVybGFwPVwiNDBweFwiXG4gICAgICAgICAgICAgIGRyb3Bkb3duV2lkdGg9XCIxNTBweFwiXG4gICAgICAgICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gKFxuICAgICAgICAgICAgICAgIDxQdWJsaXNoZWRUb29sYmFyQnV0dG9uPlxuICAgICAgICAgICAgICAgICAge3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hlZCcpfVxuICAgICAgICAgICAgICAgIDwvUHVibGlzaGVkVG9vbGJhckJ1dHRvbj5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kdXBsaWNhdGUnKX1cbiAgICAgICAgICAgICAgICAgIGljb249XCJhZGRcIlxuICAgICAgICAgICAgICAgICAgb25DbGljaz17b25EdXBsaWNhdGV9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgPC9Ub29sYmFyRHJvcGRvd24+XG4gICAgICAgICAgKSA6IChcbiAgICAgICAgICAgIDxQdWJsaXNoZWRCdXR0b24+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hlZCcpfTwvUHVibGlzaGVkQnV0dG9uPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvPlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxUb29sYmFyRHJvcGRvd25cbiAgICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgICBkcm9wZG93bldpZHRoPVwiMTUwcHhcIlxuICAgICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gKFxuICAgICAgICAgICAgPFB1Ymxpc2hCdXR0b24+XG4gICAgICAgICAgICAgIHtpc1BlcnNpc3RpbmdcbiAgICAgICAgICAgICAgICA/IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hpbmcnKVxuICAgICAgICAgICAgICAgIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaCcpfVxuICAgICAgICAgICAgPC9QdWJsaXNoQnV0dG9uPlxuICAgICAgICAgICl9XG4gICAgICAgID5cbiAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaE5vdycpfVxuICAgICAgICAgICAgaWNvbj1cImFycm93XCJcbiAgICAgICAgICAgIGljb25EaXJlY3Rpb249XCJyaWdodFwiXG4gICAgICAgICAgICBvbkNsaWNrPXtvblBlcnNpc3R9XG4gICAgICAgICAgLz5cbiAgICAgICAgICB7Y2FuQ3JlYXRlID8gKFxuICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgPERyb3Bkb3duSXRlbVxuICAgICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoQW5kQ3JlYXRlTmV3Jyl9XG4gICAgICAgICAgICAgICAgaWNvbj1cImFkZFwiXG4gICAgICAgICAgICAgICAgb25DbGljaz17b25QZXJzaXN0QW5kTmV3fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hBbmREdXBsaWNhdGUnKX1cbiAgICAgICAgICAgICAgICBpY29uPVwiYWRkXCJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtvblBlcnNpc3RBbmREdXBsaWNhdGV9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8Lz5cbiAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgPC9Ub29sYmFyRHJvcGRvd24+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlcldvcmtmbG93U2F2ZUNvbnRyb2xzID0gKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG9uUGVyc2lzdCxcbiAgICAgIG9uRGVsZXRlLFxuICAgICAgb25EZWxldGVVbnB1Ymxpc2hlZENoYW5nZXMsXG4gICAgICBzaG93RGVsZXRlLFxuICAgICAgaGFzQ2hhbmdlZCxcbiAgICAgIGhhc1VucHVibGlzaGVkQ2hhbmdlcyxcbiAgICAgIGlzUGVyc2lzdGluZyxcbiAgICAgIGlzRGVsZXRpbmcsXG4gICAgICBpc05ld0VudHJ5LFxuICAgICAgaXNNb2RpZmljYXRpb24sXG4gICAgICB0LFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgZGVsZXRlTGFiZWwgPVxuICAgICAgKGhhc1VucHVibGlzaGVkQ2hhbmdlcyAmJlxuICAgICAgICBpc01vZGlmaWNhdGlvbiAmJlxuICAgICAgICB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZWxldGVVbnB1Ymxpc2hlZENoYW5nZXMnKSkgfHxcbiAgICAgIChoYXNVbnB1Ymxpc2hlZENoYW5nZXMgJiZcbiAgICAgICAgKGlzTmV3RW50cnkgfHwgIWlzTW9kaWZpY2F0aW9uKSAmJlxuICAgICAgICB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZWxldGVVbnB1Ymxpc2hlZEVudHJ5JykpIHx8XG4gICAgICAoIWhhc1VucHVibGlzaGVkQ2hhbmdlcyAmJiAhaXNNb2RpZmljYXRpb24gJiYgdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZGVsZXRlUHVibGlzaGVkRW50cnknKSk7XG5cbiAgICByZXR1cm4gW1xuICAgICAgPFNhdmVCdXR0b24ga2V5PVwic2F2ZS1idXR0b25cIiBvbkNsaWNrPXsoKSA9PiBoYXNDaGFuZ2VkICYmIG9uUGVyc2lzdCgpfT5cbiAgICAgICAge2lzUGVyc2lzdGluZyA/IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnNhdmluZycpIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuc2F2ZScpfVxuICAgICAgPC9TYXZlQnV0dG9uPixcbiAgICAgICFzaG93RGVsZXRlICYmICFoYXNVbnB1Ymxpc2hlZENoYW5nZXMgJiYgIWlzTW9kaWZpY2F0aW9uID8gbnVsbCA6IChcbiAgICAgICAgPERlbGV0ZUJ1dHRvblxuICAgICAgICAgIGtleT1cImRlbGV0ZS1idXR0b25cIlxuICAgICAgICAgIG9uQ2xpY2s9e2hhc1VucHVibGlzaGVkQ2hhbmdlcyA/IG9uRGVsZXRlVW5wdWJsaXNoZWRDaGFuZ2VzIDogb25EZWxldGV9XG4gICAgICAgID5cbiAgICAgICAgICB7aXNEZWxldGluZyA/IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlbGV0aW5nJykgOiBkZWxldGVMYWJlbH1cbiAgICAgICAgPC9EZWxldGVCdXR0b24+XG4gICAgICApLFxuICAgIF07XG4gIH07XG5cbiAgcmVuZGVyV29ya2Zsb3dQdWJsaXNoQ29udHJvbHMgPSAoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgY29sbGVjdGlvbixcbiAgICAgIGlzVXBkYXRpbmdTdGF0dXMsXG4gICAgICBpc1B1Ymxpc2hpbmcsXG4gICAgICBvbkNoYW5nZVN0YXR1cyxcbiAgICAgIG9uUHVibGlzaCxcbiAgICAgIHVuUHVibGlzaCxcbiAgICAgIG9uRHVwbGljYXRlLFxuICAgICAgb25QdWJsaXNoQW5kTmV3LFxuICAgICAgb25QdWJsaXNoQW5kRHVwbGljYXRlLFxuICAgICAgY3VycmVudFN0YXR1cyxcbiAgICAgIGlzTmV3RW50cnksXG4gICAgICB1c2VPcGVuQXV0aG9yaW5nLFxuICAgICAgaXNQZXJzaXN0aW5nLFxuICAgICAgdCxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IGNhbkNyZWF0ZSA9IGNvbGxlY3Rpb24uZ2V0KCdjcmVhdGUnKTtcbiAgICBpZiAoY3VycmVudFN0YXR1cykge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPD5cbiAgICAgICAgICB7dGhpcy5yZW5kZXJEZXBsb3lQcmV2aWV3Q29udHJvbHModCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZGVwbG95UHJldmlld0J1dHRvbkxhYmVsJykpfVxuICAgICAgICAgIDxUb29sYmFyRHJvcGRvd25cbiAgICAgICAgICAgIGRyb3Bkb3duVG9wT3ZlcmxhcD1cIjQwcHhcIlxuICAgICAgICAgICAgZHJvcGRvd25XaWR0aD1cIjEyMHB4XCJcbiAgICAgICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gKFxuICAgICAgICAgICAgICA8U3RhdHVzQnV0dG9uPlxuICAgICAgICAgICAgICAgIHtpc1VwZGF0aW5nU3RhdHVzXG4gICAgICAgICAgICAgICAgICA/IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnVwZGF0aW5nJylcbiAgICAgICAgICAgICAgICAgIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuc2V0U3RhdHVzJyl9XG4gICAgICAgICAgICAgIDwvU3RhdHVzQnV0dG9uPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8U3RhdHVzRHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kcmFmdCcpfVxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBvbkNoYW5nZVN0YXR1cygnRFJBRlQnKX1cbiAgICAgICAgICAgICAgaWNvbj17Y3VycmVudFN0YXR1cyA9PT0gc3RhdHVzLmdldCgnRFJBRlQnKSA/ICdjaGVjaycgOiBudWxsfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxTdGF0dXNEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmluUmV2aWV3Jyl9XG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uQ2hhbmdlU3RhdHVzKCdQRU5ESU5HX1JFVklFVycpfVxuICAgICAgICAgICAgICBpY29uPXtjdXJyZW50U3RhdHVzID09PSBzdGF0dXMuZ2V0KCdQRU5ESU5HX1JFVklFVycpID8gJ2NoZWNrJyA6IG51bGx9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAge3VzZU9wZW5BdXRob3JpbmcgPyAoXG4gICAgICAgICAgICAgICcnXG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICA8U3RhdHVzRHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnJlYWR5Jyl9XG4gICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gb25DaGFuZ2VTdGF0dXMoJ1BFTkRJTkdfUFVCTElTSCcpfVxuICAgICAgICAgICAgICAgIGljb249e2N1cnJlbnRTdGF0dXMgPT09IHN0YXR1cy5nZXQoJ1BFTkRJTkdfUFVCTElTSCcpID8gJ2NoZWNrJyA6IG51bGx9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvVG9vbGJhckRyb3Bkb3duPlxuICAgICAgICAgIHt1c2VPcGVuQXV0aG9yaW5nID8gKFxuICAgICAgICAgICAgJydcbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPFRvb2xiYXJEcm9wZG93blxuICAgICAgICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgICAgICAgZHJvcGRvd25XaWR0aD1cIjE1MHB4XCJcbiAgICAgICAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiAoXG4gICAgICAgICAgICAgICAgPFB1Ymxpc2hCdXR0b24+XG4gICAgICAgICAgICAgICAgICB7aXNQdWJsaXNoaW5nXG4gICAgICAgICAgICAgICAgICAgID8gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaGluZycpXG4gICAgICAgICAgICAgICAgICAgIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaCcpfVxuICAgICAgICAgICAgICAgIDwvUHVibGlzaEJ1dHRvbj5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPERyb3Bkb3duSXRlbVxuICAgICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoTm93Jyl9XG4gICAgICAgICAgICAgICAgaWNvbj1cImFycm93XCJcbiAgICAgICAgICAgICAgICBpY29uRGlyZWN0aW9uPVwicmlnaHRcIlxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e29uUHVibGlzaH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAge2NhbkNyZWF0ZSA/IChcbiAgICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgICAgPERyb3Bkb3duSXRlbVxuICAgICAgICAgICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaEFuZENyZWF0ZU5ldycpfVxuICAgICAgICAgICAgICAgICAgICBpY29uPVwiYWRkXCJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17b25QdWJsaXNoQW5kTmV3fVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hBbmREdXBsaWNhdGUnKX1cbiAgICAgICAgICAgICAgICAgICAgaWNvbj1cImFkZFwiXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e29uUHVibGlzaEFuZER1cGxpY2F0ZX1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICAgICAgPC9Ub29sYmFyRHJvcGRvd24+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC8+XG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFB1Ymxpc2ggY29udHJvbCBmb3IgcHVibGlzaGVkIHdvcmtmbG93IGVudHJ5LlxuICAgICAqL1xuICAgIGlmICghaXNOZXdFbnRyeSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPD5cbiAgICAgICAgICB7dGhpcy5yZW5kZXJEZXBsb3lQcmV2aWV3Q29udHJvbHModCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZGVwbG95QnV0dG9uTGFiZWwnKSl9XG4gICAgICAgICAgPFRvb2xiYXJEcm9wZG93blxuICAgICAgICAgICAgZHJvcGRvd25Ub3BPdmVybGFwPVwiNDBweFwiXG4gICAgICAgICAgICBkcm9wZG93bldpZHRoPVwiMTUwcHhcIlxuICAgICAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiAoXG4gICAgICAgICAgICAgIDxQdWJsaXNoZWRUb29sYmFyQnV0dG9uPlxuICAgICAgICAgICAgICAgIHtpc1BlcnNpc3RpbmdcbiAgICAgICAgICAgICAgICAgID8gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIudW5wdWJsaXNoaW5nJylcbiAgICAgICAgICAgICAgICAgIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaGVkJyl9XG4gICAgICAgICAgICAgIDwvUHVibGlzaGVkVG9vbGJhckJ1dHRvbj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPERyb3Bkb3duSXRlbVxuICAgICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIudW5wdWJsaXNoJyl9XG4gICAgICAgICAgICAgIGljb249XCJhcnJvd1wiXG4gICAgICAgICAgICAgIGljb25EaXJlY3Rpb249XCJyaWdodFwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e3VuUHVibGlzaH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICB7Y2FuQ3JlYXRlICYmIChcbiAgICAgICAgICAgICAgPERyb3Bkb3duSXRlbVxuICAgICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kdXBsaWNhdGUnKX1cbiAgICAgICAgICAgICAgICBpY29uPVwiYWRkXCJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtvbkR1cGxpY2F0ZX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9Ub29sYmFyRHJvcGRvd24+XG4gICAgICAgIDwvPlxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgdXNlciwgaGFzQ2hhbmdlZCwgZGlzcGxheVVybCwgY29sbGVjdGlvbiwgaGFzV29ya2Zsb3csIG9uTG9nb3V0Q2xpY2ssIHQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFRvb2xiYXJDb250YWluZXI+XG4gICAgICAgIDxUb29sYmFyU2VjdGlvbkJhY2tMaW5rIHRvPXtgL2NvbGxlY3Rpb25zLyR7Y29sbGVjdGlvbi5nZXQoJ25hbWUnKX1gfT5cbiAgICAgICAgICA8QmFja0Fycm93PuKGkDwvQmFja0Fycm93PlxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8QmFja0NvbGxlY3Rpb24+XG4gICAgICAgICAgICAgIHt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5iYWNrQ29sbGVjdGlvbicsIHtcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uTGFiZWw6IGNvbGxlY3Rpb24uZ2V0KCdsYWJlbCcpLFxuICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIDwvQmFja0NvbGxlY3Rpb24+XG4gICAgICAgICAgICB7aGFzQ2hhbmdlZCA/IChcbiAgICAgICAgICAgICAgPEJhY2tTdGF0dXNDaGFuZ2VkPnt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci51bnNhdmVkQ2hhbmdlcycpfTwvQmFja1N0YXR1c0NoYW5nZWQ+XG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICA8QmFja1N0YXR1c1VuY2hhbmdlZD57dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuY2hhbmdlc1NhdmVkJyl9PC9CYWNrU3RhdHVzVW5jaGFuZ2VkPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9Ub29sYmFyU2VjdGlvbkJhY2tMaW5rPlxuICAgICAgICA8VG9vbGJhclNlY3Rpb25NYWluPlxuICAgICAgICAgIDxUb29sYmFyU3ViU2VjdGlvbkZpcnN0PlxuICAgICAgICAgICAge2hhc1dvcmtmbG93ID8gdGhpcy5yZW5kZXJXb3JrZmxvd1NhdmVDb250cm9scygpIDogdGhpcy5yZW5kZXJTaW1wbGVTYXZlQ29udHJvbHMoKX1cbiAgICAgICAgICA8L1Rvb2xiYXJTdWJTZWN0aW9uRmlyc3Q+XG4gICAgICAgICAgPFRvb2xiYXJTdWJTZWN0aW9uTGFzdD5cbiAgICAgICAgICAgIHtoYXNXb3JrZmxvd1xuICAgICAgICAgICAgICA/IHRoaXMucmVuZGVyV29ya2Zsb3dQdWJsaXNoQ29udHJvbHMoKVxuICAgICAgICAgICAgICA6IHRoaXMucmVuZGVyU2ltcGxlUHVibGlzaENvbnRyb2xzKCl9XG4gICAgICAgICAgPC9Ub29sYmFyU3ViU2VjdGlvbkxhc3Q+XG4gICAgICAgIDwvVG9vbGJhclNlY3Rpb25NYWluPlxuICAgICAgICA8VG9vbGJhclNlY3Rpb25NZXRhPlxuICAgICAgICAgIDxTZXR0aW5nc0Ryb3Bkb3duXG4gICAgICAgICAgICBkaXNwbGF5VXJsPXtkaXNwbGF5VXJsfVxuICAgICAgICAgICAgaW1hZ2VVcmw9e3VzZXIuZ2V0KCdhdmF0YXJfdXJsJyl9XG4gICAgICAgICAgICBvbkxvZ291dENsaWNrPXtvbkxvZ291dENsaWNrfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvVG9vbGJhclNlY3Rpb25NZXRhPlxuICAgICAgPC9Ub29sYmFyQ29udGFpbmVyPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgdHJhbnNsYXRlKCkoRWRpdG9yVG9vbGJhcik7XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const ToolbarSubSectionLast = ( /*#__PURE__*/0, _styledBase.default)(ToolbarSubSectionFirst, {
  target: "evqrzhe4",
  label: "ToolbarSubSectionLast"
})(process.env.NODE_ENV === "production" ? {
  name: "1a9getn",
  styles: "justify-content:flex-end;"
} : {
  name: "1a9getn",
  styles: "justify-content:flex-end;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const ToolbarSectionBackLink = ( /*#__PURE__*/0, _styledBase.default)(_reactRouterDom.Link, {
  target: "evqrzhe5",
  label: "ToolbarSectionBackLink"
})(styles.toolbarSection, ";border-right-width:1px;font-weight:normal;padding:0 20px;&:hover,&:focus{background-color:#f1f2f4;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ToolbarSectionMeta = (0, _styledBase.default)("div", {
  target: "evqrzhe6",
  label: "ToolbarSectionMeta"
})(styles.toolbarSection, ";border-left-width:1px;padding:0 7px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ToolbarDropdown = ( /*#__PURE__*/0, _styledBase.default)(_netlifyCmsUiDefault.Dropdown, {
  target: "evqrzhe7",
  label: "ToolbarDropdown"
})(styles.buttonMargin, ";", _netlifyCmsUiDefault.Icon, "{color:", _netlifyCmsUiDefault.colorsRaw.teal, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const BackArrow = (0, _styledBase.default)("div", {
  target: "evqrzhe8",
  label: "BackArrow"
})("color:", _netlifyCmsUiDefault.colors.textLead, ";font-size:21px;font-weight:600;margin-right:16px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const BackCollection = (0, _styledBase.default)("div", {
  target: "evqrzhe9",
  label: "BackCollection"
})("color:", _netlifyCmsUiDefault.colors.textLead, ";font-size:14px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const BackStatus = (0, _styledBase.default)("div", {
  target: "evqrzhe10",
  label: "BackStatus"
})(process.env.NODE_ENV === "production" ? {
  name: "19ug521",
  styles: "margin-top:6px;"
} : {
  name: "19ug521",
  styles: "margin-top:6px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const BackStatusUnchanged = ( /*#__PURE__*/0, _styledBase.default)(BackStatus, {
  target: "evqrzhe11",
  label: "BackStatusUnchanged"
})(_netlifyCmsUiDefault.components.textBadgeSuccess, ";&::after{height:12px;width:15.5px;color:", _netlifyCmsUiDefault.colors.successText, ";margin-left:5px;position:relative;top:1px;content:url(\"data:image/svg+xml; utf8, <svg xmlns='http://www.w3.org/2000/svg' width='15' height='11'><path fill='#005614' fill-rule='nonzero' d='M4.016 11l-.648-.946a6.202 6.202 0 0 0-.157-.22 9.526 9.526 0 0 1-.096-.133l-.511-.7a7.413 7.413 0 0 0-.162-.214l-.102-.134-.265-.346a26.903 26.903 0 0 0-.543-.687l-.11-.136c-.143-.179-.291-.363-.442-.54l-.278-.332a8.854 8.854 0 0 0-.192-.225L.417 6.28l-.283-.324L0 5.805l1.376-1.602c.04.027.186.132.186.132l.377.272.129.095c.08.058.16.115.237.175l.37.28c.192.142.382.292.565.436l.162.126c.27.21.503.398.714.574l.477.393c.078.064.156.127.23.194l.433.375.171-.205A50.865 50.865 0 0 1 8.18 4.023a35.163 35.163 0 0 1 2.382-2.213c.207-.174.42-.349.635-.518l.328-.255.333-.245c.072-.055.146-.107.221-.159l.117-.083c.11-.077.225-.155.341-.23.163-.11.334-.217.503-.32l1.158 1.74a11.908 11.908 0 0 0-.64.55l-.065.06c-.07.062-.139.125-.207.192l-.258.249-.26.265c-.173.176-.345.357-.512.539a32.626 32.626 0 0 0-1.915 2.313 52.115 52.115 0 0 0-2.572 3.746l-.392.642-.19.322-.233.382H4.016z'/></svg>\");}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const BackStatusChanged = ( /*#__PURE__*/0, _styledBase.default)(BackStatus, {
  target: "evqrzhe12",
  label: "BackStatusChanged"
})(_netlifyCmsUiDefault.components.textBadgeDanger, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ToolbarButton = (0, _styledBase.default)("button", {
  target: "evqrzhe13",
  label: "ToolbarButton"
})(_netlifyCmsUiDefault.buttons.button, ";", _netlifyCmsUiDefault.buttons.default, ";", styles.buttonMargin, ";", styles.noOverflow, ";display:block;@media (max-width:1200px){padding:0 10px;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const DeleteButton = ( /*#__PURE__*/0, _styledBase.default)(ToolbarButton, {
  target: "evqrzhe14",
  label: "DeleteButton"
})(_netlifyCmsUiDefault.buttons.lightRed, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const SaveButton = ( /*#__PURE__*/0, _styledBase.default)(ToolbarButton, {
  target: "evqrzhe15",
  label: "SaveButton"
})(_netlifyCmsUiDefault.buttons.lightBlue, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const PublishedToolbarButton = ( /*#__PURE__*/0, _styledBase.default)(DropdownButton, {
  target: "evqrzhe16",
  label: "PublishedToolbarButton"
})(styles.publishedButton, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JUb29sYmFyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW1LcUQiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvRWRpdG9yL0VkaXRvclRvb2xiYXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IE1hcCB9IGZyb20gJ2ltbXV0YWJsZSc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQge1xuICBJY29uLFxuICBEcm9wZG93bixcbiAgRHJvcGRvd25JdGVtLFxuICBTdHlsZWREcm9wZG93bkJ1dHRvbixcbiAgY29sb3JzUmF3LFxuICBjb2xvcnMsXG4gIGNvbXBvbmVudHMsXG4gIGJ1dHRvbnMsXG59IGZyb20gJ25ldGxpZnktY21zLXVpLWRlZmF1bHQnO1xuaW1wb3J0IHsgc3RhdHVzIH0gZnJvbSAnQ29uc3RhbnRzL3B1Ymxpc2hNb2Rlcyc7XG5pbXBvcnQgU2V0dGluZ3NEcm9wZG93biBmcm9tICdVSS9TZXR0aW5nc0Ryb3Bkb3duJztcblxuY29uc3Qgc3R5bGVzID0ge1xuICBub092ZXJmbG93OiBjc3NgXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICBgLFxuICBidXR0b25NYXJnaW46IGNzc2BcbiAgICBtYXJnaW46IDAgMTBweDtcbiAgYCxcbiAgdG9vbGJhclNlY3Rpb246IGNzc2BcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGJvcmRlcjogMCBzb2xpZCAke2NvbG9ycy50ZXh0RmllbGRCb3JkZXJ9O1xuICBgLFxuICBwdWJsaXNoZWRCdXR0b246IGNzc2BcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsTGlnaHR9O1xuICAgIGNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsfTtcbiAgYCxcbn07XG5cbmNvbnN0IERyb3Bkb3duQnV0dG9uID0gc3R5bGVkKFN0eWxlZERyb3Bkb3duQnV0dG9uKWBcbiAgJHtzdHlsZXMubm9PdmVyZmxvd31cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEyMDBweCkge1xuICAgIHBhZGRpbmctbGVmdDogMTBweDtcbiAgfVxuYDtcblxuY29uc3QgVG9vbGJhckNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIGJveC1zaGFkb3c6IDAgMnB4IDZweCAwIHJnYmEoNjgsIDc0LCA4NywgMC4wNSksIDAgMXB4IDNweCAwIHJnYmEoNjgsIDc0LCA4NywgMC4xKSxcbiAgICAwIDJweCA1NHB4IHJnYmEoMCwgMCwgMCwgMC4xKTtcbiAgcG9zaXRpb246IGZpeGVkO1xuICB0b3A6IDA7XG4gIGxlZnQ6IDA7XG4gIHdpZHRoOiAxMDAlO1xuICBtaW4td2lkdGg6IDgwMHB4O1xuICB6LWluZGV4OiAzMDA7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gIGhlaWdodDogNjZweDtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuYDtcblxuY29uc3QgVG9vbGJhclNlY3Rpb25NYWluID0gc3R5bGVkLmRpdmBcbiAgJHtzdHlsZXMudG9vbGJhclNlY3Rpb259O1xuICBmbGV4OiAxMDtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBwYWRkaW5nOiAwIDEwcHg7XG5gO1xuXG5jb25zdCBUb29sYmFyU3ViU2VjdGlvbkZpcnN0ID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbmA7XG5cbmNvbnN0IFRvb2xiYXJTdWJTZWN0aW9uTGFzdCA9IHN0eWxlZChUb29sYmFyU3ViU2VjdGlvbkZpcnN0KWBcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbmA7XG5cbmNvbnN0IFRvb2xiYXJTZWN0aW9uQmFja0xpbmsgPSBzdHlsZWQoTGluaylgXG4gICR7c3R5bGVzLnRvb2xiYXJTZWN0aW9ufTtcbiAgYm9yZGVyLXJpZ2h0LXdpZHRoOiAxcHg7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIHBhZGRpbmc6IDAgMjBweDtcblxuICAmOmhvdmVyLFxuICAmOmZvY3VzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjFmMmY0O1xuICB9XG5gO1xuXG5jb25zdCBUb29sYmFyU2VjdGlvbk1ldGEgPSBzdHlsZWQuZGl2YFxuICAke3N0eWxlcy50b29sYmFyU2VjdGlvbn07XG4gIGJvcmRlci1sZWZ0LXdpZHRoOiAxcHg7XG4gIHBhZGRpbmc6IDAgN3B4O1xuYDtcblxuY29uc3QgVG9vbGJhckRyb3Bkb3duID0gc3R5bGVkKERyb3Bkb3duKWBcbiAgJHtzdHlsZXMuYnV0dG9uTWFyZ2lufTtcblxuICAke0ljb259IHtcbiAgICBjb2xvcjogJHtjb2xvcnNSYXcudGVhbH07XG4gIH1cbmA7XG5cbmNvbnN0IEJhY2tBcnJvdyA9IHN0eWxlZC5kaXZgXG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0TGVhZH07XG4gIGZvbnQtc2l6ZTogMjFweDtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgbWFyZ2luLXJpZ2h0OiAxNnB4O1xuYDtcblxuY29uc3QgQmFja0NvbGxlY3Rpb24gPSBzdHlsZWQuZGl2YFxuICBjb2xvcjogJHtjb2xvcnMudGV4dExlYWR9O1xuICBmb250LXNpemU6IDE0cHg7XG5gO1xuXG5jb25zdCBCYWNrU3RhdHVzID0gc3R5bGVkLmRpdmBcbiAgbWFyZ2luLXRvcDogNnB4O1xuYDtcblxuY29uc3QgQmFja1N0YXR1c1VuY2hhbmdlZCA9IHN0eWxlZChCYWNrU3RhdHVzKWBcbiAgJHtjb21wb25lbnRzLnRleHRCYWRnZVN1Y2Nlc3N9O1xuXG4gICY6OmFmdGVyIHtcbiAgICBoZWlnaHQ6IDEycHg7XG4gICAgd2lkdGg6IDE1LjVweDtcbiAgICBjb2xvcjogJHtjb2xvcnMuc3VjY2Vzc1RleHR9O1xuICAgIG1hcmdpbi1sZWZ0OiA1cHg7XG5cbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgdG9wOiAxcHg7XG5cbiAgICBjb250ZW50OiB1cmwoXCJkYXRhOmltYWdlL3N2Zyt4bWw7IHV0ZjgsIDxzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB3aWR0aD0nMTUnIGhlaWdodD0nMTEnPjxwYXRoIGZpbGw9JyMwMDU2MTQnIGZpbGwtcnVsZT0nbm9uemVybycgZD0nTTQuMDE2IDExbC0uNjQ4LS45NDZhNi4yMDIgNi4yMDIgMCAwIDAtLjE1Ny0uMjIgOS41MjYgOS41MjYgMCAwIDEtLjA5Ni0uMTMzbC0uNTExLS43YTcuNDEzIDcuNDEzIDAgMCAwLS4xNjItLjIxNGwtLjEwMi0uMTM0LS4yNjUtLjM0NmEyNi45MDMgMjYuOTAzIDAgMCAwLS41NDMtLjY4N2wtLjExLS4xMzZjLS4xNDMtLjE3OS0uMjkxLS4zNjMtLjQ0Mi0uNTRsLS4yNzgtLjMzMmE4Ljg1NCA4Ljg1NCAwIDAgMC0uMTkyLS4yMjVMLjQxNyA2LjI4bC0uMjgzLS4zMjRMMCA1LjgwNWwxLjM3Ni0xLjYwMmMuMDQuMDI3LjE4Ni4xMzIuMTg2LjEzMmwuMzc3LjI3Mi4xMjkuMDk1Yy4wOC4wNTguMTYuMTE1LjIzNy4xNzVsLjM3LjI4Yy4xOTIuMTQyLjM4Mi4yOTIuNTY1LjQzNmwuMTYyLjEyNmMuMjcuMjEuNTAzLjM5OC43MTQuNTc0bC40NzcuMzkzYy4wNzguMDY0LjE1Ni4xMjcuMjMuMTk0bC40MzMuMzc1LjE3MS0uMjA1QTUwLjg2NSA1MC44NjUgMCAwIDEgOC4xOCA0LjAyM2EzNS4xNjMgMzUuMTYzIDAgMCAxIDIuMzgyLTIuMjEzYy4yMDctLjE3NC40Mi0uMzQ5LjYzNS0uNTE4bC4zMjgtLjI1NS4zMzMtLjI0NWMuMDcyLS4wNTUuMTQ2LS4xMDcuMjIxLS4xNTlsLjExNy0uMDgzYy4xMS0uMDc3LjIyNS0uMTU1LjM0MS0uMjMuMTYzLS4xMS4zMzQtLjIxNy41MDMtLjMybDEuMTU4IDEuNzRhMTEuOTA4IDExLjkwOCAwIDAgMC0uNjQuNTVsLS4wNjUuMDZjLS4wNy4wNjItLjEzOS4xMjUtLjIwNy4xOTJsLS4yNTguMjQ5LS4yNi4yNjVjLS4xNzMuMTc2LS4zNDUuMzU3LS41MTIuNTM5YTMyLjYyNiAzMi42MjYgMCAwIDAtMS45MTUgMi4zMTMgNTIuMTE1IDUyLjExNSAwIDAgMC0yLjU3MiAzLjc0NmwtLjM5Mi42NDItLjE5LjMyMi0uMjMzLjM4Mkg0LjAxNnonLz48L3N2Zz5cIik7XG4gIH1cbmA7XG5cbmNvbnN0IEJhY2tTdGF0dXNDaGFuZ2VkID0gc3R5bGVkKEJhY2tTdGF0dXMpYFxuICAke2NvbXBvbmVudHMudGV4dEJhZGdlRGFuZ2VyfTtcbmA7XG5cbmNvbnN0IFRvb2xiYXJCdXR0b24gPSBzdHlsZWQuYnV0dG9uYFxuICAke2J1dHRvbnMuYnV0dG9ufTtcbiAgJHtidXR0b25zLmRlZmF1bHR9O1xuICAke3N0eWxlcy5idXR0b25NYXJnaW59O1xuICAke3N0eWxlcy5ub092ZXJmbG93fTtcbiAgZGlzcGxheTogYmxvY2s7XG5cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEyMDBweCkge1xuICAgIHBhZGRpbmc6IDAgMTBweDtcbiAgfVxuYDtcblxuY29uc3QgRGVsZXRlQnV0dG9uID0gc3R5bGVkKFRvb2xiYXJCdXR0b24pYFxuICAke2J1dHRvbnMubGlnaHRSZWR9O1xuYDtcblxuY29uc3QgU2F2ZUJ1dHRvbiA9IHN0eWxlZChUb29sYmFyQnV0dG9uKWBcbiAgJHtidXR0b25zLmxpZ2h0Qmx1ZX07XG5gO1xuXG5jb25zdCBQdWJsaXNoZWRUb29sYmFyQnV0dG9uID0gc3R5bGVkKERyb3Bkb3duQnV0dG9uKWBcbiAgJHtzdHlsZXMucHVibGlzaGVkQnV0dG9ufVxuYDtcblxuY29uc3QgUHVibGlzaGVkQnV0dG9uID0gc3R5bGVkKFRvb2xiYXJCdXR0b24pYFxuICAke3N0eWxlcy5wdWJsaXNoZWRCdXR0b259XG5gO1xuXG5jb25zdCBQdWJsaXNoQnV0dG9uID0gc3R5bGVkKERyb3Bkb3duQnV0dG9uKWBcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnNSYXcudGVhbH07XG5gO1xuXG5jb25zdCBTdGF0dXNCdXR0b24gPSBzdHlsZWQoRHJvcGRvd25CdXR0b24pYFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsTGlnaHR9O1xuICBjb2xvcjogJHtjb2xvcnNSYXcudGVhbH07XG5gO1xuXG5jb25zdCBQcmV2aWV3QnV0dG9uQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgbWFyZ2luLXJpZ2h0OiAxMnB4O1xuICBjb2xvcjogJHtjb2xvcnNSYXcuYmx1ZX07XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgYSxcbiAgJHtJY29ufSB7XG4gICAgY29sb3I6ICR7Y29sb3JzUmF3LmJsdWV9O1xuICB9XG5cbiAgJHtJY29ufSB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHRvcDogMXB4O1xuICB9XG5gO1xuXG5jb25zdCBSZWZyZXNoUHJldmlld0J1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gIGJhY2tncm91bmQ6IG5vbmU7XG4gIGJvcmRlcjogMDtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBjb2xvcjogJHtjb2xvcnNSYXcuYmx1ZX07XG5cbiAgc3BhbiB7XG4gICAgbWFyZ2luLXJpZ2h0OiA2cHg7XG4gIH1cbmA7XG5cbmNvbnN0IFByZXZpZXdMaW5rID0gUmVmcmVzaFByZXZpZXdCdXR0b24ud2l0aENvbXBvbmVudCgnYScpO1xuXG5jb25zdCBTdGF0dXNEcm9wZG93bkl0ZW0gPSBzdHlsZWQoRHJvcGRvd25JdGVtKWBcbiAgJHtJY29ufSB7XG4gICAgY29sb3I6ICR7Y29sb3JzLmluZm9UZXh0fTtcbiAgfVxuYDtcblxuY2xhc3MgRWRpdG9yVG9vbGJhciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgaXNQZXJzaXN0aW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc1B1Ymxpc2hpbmc6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzVXBkYXRpbmdTdGF0dXM6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzRGVsZXRpbmc6IFByb3BUeXBlcy5ib29sLFxuICAgIG9uUGVyc2lzdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblBlcnNpc3RBbmROZXc6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25QZXJzaXN0QW5kRHVwbGljYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHNob3dEZWxldGU6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgb25EZWxldGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25EZWxldGVVbnB1Ymxpc2hlZENoYW5nZXM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25DaGFuZ2VTdGF0dXM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25QdWJsaXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHVuUHVibGlzaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkR1cGxpY2F0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblB1Ymxpc2hBbmROZXc6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25QdWJsaXNoQW5kRHVwbGljYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHVzZXI6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgICBoYXNDaGFuZ2VkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBkaXNwbGF5VXJsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNvbGxlY3Rpb246IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgICBoYXNXb3JrZmxvdzogUHJvcFR5cGVzLmJvb2wsXG4gICAgdXNlT3BlbkF1dGhvcmluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgaGFzVW5wdWJsaXNoZWRDaGFuZ2VzOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc05ld0VudHJ5OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc01vZGlmaWNhdGlvbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgY3VycmVudFN0YXR1czogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBvbkxvZ291dENsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGRlcGxveVByZXZpZXc6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAsXG4gICAgbG9hZERlcGxveVByZXZpZXc6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBjb25zdCB7IGlzTmV3RW50cnksIGxvYWREZXBsb3lQcmV2aWV3IH0gPSB0aGlzLnByb3BzO1xuICAgIGlmICghaXNOZXdFbnRyeSkge1xuICAgICAgbG9hZERlcGxveVByZXZpZXcoeyBtYXhBdHRlbXB0czogMyB9KTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgY29uc3QgeyBpc05ld0VudHJ5LCBpc1BlcnNpc3RpbmcsIGxvYWREZXBsb3lQcmV2aWV3IH0gPSB0aGlzLnByb3BzO1xuICAgIGlmICghaXNOZXdFbnRyeSAmJiBwcmV2UHJvcHMuaXNQZXJzaXN0aW5nICYmICFpc1BlcnNpc3RpbmcpIHtcbiAgICAgIGxvYWREZXBsb3lQcmV2aWV3KHsgbWF4QXR0ZW1wdHM6IDMgfSk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyU2ltcGxlU2F2ZUNvbnRyb2xzID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgc2hvd0RlbGV0ZSwgb25EZWxldGUsIHQgfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIHtzaG93RGVsZXRlID8gKFxuICAgICAgICAgIDxEZWxldGVCdXR0b24gb25DbGljaz17b25EZWxldGV9Pnt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZWxldGVFbnRyeScpfTwvRGVsZXRlQnV0dG9uPlxuICAgICAgICApIDogbnVsbH1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyRGVwbG95UHJldmlld0NvbnRyb2xzID0gbGFiZWwgPT4ge1xuICAgIGNvbnN0IHsgZGVwbG95UHJldmlldyA9IE1hcCgpLCBsb2FkRGVwbG95UHJldmlldywgdCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB1cmwgPSBkZXBsb3lQcmV2aWV3LmdldCgndXJsJyk7XG4gICAgY29uc3Qgc3RhdHVzID0gZGVwbG95UHJldmlldy5nZXQoJ3N0YXR1cycpO1xuXG4gICAgaWYgKCFzdGF0dXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBpc0ZldGNoaW5nID0gZGVwbG95UHJldmlldy5nZXQoJ2lzRmV0Y2hpbmcnKTtcbiAgICBjb25zdCBkZXBsb3lQcmV2aWV3UmVhZHkgPSBzdGF0dXMgPT09ICdTVUNDRVNTJyAmJiAhaXNGZXRjaGluZztcbiAgICByZXR1cm4gKFxuICAgICAgPFByZXZpZXdCdXR0b25Db250YWluZXI+XG4gICAgICAgIHtkZXBsb3lQcmV2aWV3UmVhZHkgPyAoXG4gICAgICAgICAgPFByZXZpZXdMaW5rIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIiB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPXt1cmx9PlxuICAgICAgICAgICAgPHNwYW4+e2xhYmVsfTwvc3Bhbj5cbiAgICAgICAgICAgIDxJY29uIHR5cGU9XCJuZXctdGFiXCIgc2l6ZT1cInhzbWFsbFwiIC8+XG4gICAgICAgICAgPC9QcmV2aWV3TGluaz5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8UmVmcmVzaFByZXZpZXdCdXR0b24gb25DbGljaz17bG9hZERlcGxveVByZXZpZXd9PlxuICAgICAgICAgICAgPHNwYW4+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlcGxveVByZXZpZXdQZW5kaW5nQnV0dG9uTGFiZWwnKX08L3NwYW4+XG4gICAgICAgICAgICA8SWNvbiB0eXBlPVwicmVmcmVzaFwiIHNpemU9XCJ4c21hbGxcIiAvPlxuICAgICAgICAgIDwvUmVmcmVzaFByZXZpZXdCdXR0b24+XG4gICAgICAgICl9XG4gICAgICA8L1ByZXZpZXdCdXR0b25Db250YWluZXI+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJTaW1wbGVQdWJsaXNoQ29udHJvbHMgPSAoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgY29sbGVjdGlvbixcbiAgICAgIG9uUGVyc2lzdCxcbiAgICAgIG9uUGVyc2lzdEFuZE5ldyxcbiAgICAgIG9uUGVyc2lzdEFuZER1cGxpY2F0ZSxcbiAgICAgIG9uRHVwbGljYXRlLFxuICAgICAgaXNQZXJzaXN0aW5nLFxuICAgICAgaGFzQ2hhbmdlZCxcbiAgICAgIGlzTmV3RW50cnksXG4gICAgICB0LFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgY2FuQ3JlYXRlID0gY29sbGVjdGlvbi5nZXQoJ2NyZWF0ZScpO1xuICAgIGlmICghaXNOZXdFbnRyeSAmJiAhaGFzQ2hhbmdlZCkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPD5cbiAgICAgICAgICB7dGhpcy5yZW5kZXJEZXBsb3lQcmV2aWV3Q29udHJvbHModCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZGVwbG95QnV0dG9uTGFiZWwnKSl9XG4gICAgICAgICAge2NhbkNyZWF0ZSA/IChcbiAgICAgICAgICAgIDxUb29sYmFyRHJvcGRvd25cbiAgICAgICAgICAgICAgZHJvcGRvd25Ub3BPdmVybGFwPVwiNDBweFwiXG4gICAgICAgICAgICAgIGRyb3Bkb3duV2lkdGg9XCIxNTBweFwiXG4gICAgICAgICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gKFxuICAgICAgICAgICAgICAgIDxQdWJsaXNoZWRUb29sYmFyQnV0dG9uPlxuICAgICAgICAgICAgICAgICAge3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hlZCcpfVxuICAgICAgICAgICAgICAgIDwvUHVibGlzaGVkVG9vbGJhckJ1dHRvbj5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kdXBsaWNhdGUnKX1cbiAgICAgICAgICAgICAgICAgIGljb249XCJhZGRcIlxuICAgICAgICAgICAgICAgICAgb25DbGljaz17b25EdXBsaWNhdGV9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgPC9Ub29sYmFyRHJvcGRvd24+XG4gICAgICAgICAgKSA6IChcbiAgICAgICAgICAgIDxQdWJsaXNoZWRCdXR0b24+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hlZCcpfTwvUHVibGlzaGVkQnV0dG9uPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvPlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxUb29sYmFyRHJvcGRvd25cbiAgICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgICBkcm9wZG93bldpZHRoPVwiMTUwcHhcIlxuICAgICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gKFxuICAgICAgICAgICAgPFB1Ymxpc2hCdXR0b24+XG4gICAgICAgICAgICAgIHtpc1BlcnNpc3RpbmdcbiAgICAgICAgICAgICAgICA/IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hpbmcnKVxuICAgICAgICAgICAgICAgIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaCcpfVxuICAgICAgICAgICAgPC9QdWJsaXNoQnV0dG9uPlxuICAgICAgICAgICl9XG4gICAgICAgID5cbiAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaE5vdycpfVxuICAgICAgICAgICAgaWNvbj1cImFycm93XCJcbiAgICAgICAgICAgIGljb25EaXJlY3Rpb249XCJyaWdodFwiXG4gICAgICAgICAgICBvbkNsaWNrPXtvblBlcnNpc3R9XG4gICAgICAgICAgLz5cbiAgICAgICAgICB7Y2FuQ3JlYXRlID8gKFxuICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgPERyb3Bkb3duSXRlbVxuICAgICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoQW5kQ3JlYXRlTmV3Jyl9XG4gICAgICAgICAgICAgICAgaWNvbj1cImFkZFwiXG4gICAgICAgICAgICAgICAgb25DbGljaz17b25QZXJzaXN0QW5kTmV3fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hBbmREdXBsaWNhdGUnKX1cbiAgICAgICAgICAgICAgICBpY29uPVwiYWRkXCJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtvblBlcnNpc3RBbmREdXBsaWNhdGV9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8Lz5cbiAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgPC9Ub29sYmFyRHJvcGRvd24+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlcldvcmtmbG93U2F2ZUNvbnRyb2xzID0gKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG9uUGVyc2lzdCxcbiAgICAgIG9uRGVsZXRlLFxuICAgICAgb25EZWxldGVVbnB1Ymxpc2hlZENoYW5nZXMsXG4gICAgICBzaG93RGVsZXRlLFxuICAgICAgaGFzQ2hhbmdlZCxcbiAgICAgIGhhc1VucHVibGlzaGVkQ2hhbmdlcyxcbiAgICAgIGlzUGVyc2lzdGluZyxcbiAgICAgIGlzRGVsZXRpbmcsXG4gICAgICBpc05ld0VudHJ5LFxuICAgICAgaXNNb2RpZmljYXRpb24sXG4gICAgICB0LFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgZGVsZXRlTGFiZWwgPVxuICAgICAgKGhhc1VucHVibGlzaGVkQ2hhbmdlcyAmJlxuICAgICAgICBpc01vZGlmaWNhdGlvbiAmJlxuICAgICAgICB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZWxldGVVbnB1Ymxpc2hlZENoYW5nZXMnKSkgfHxcbiAgICAgIChoYXNVbnB1Ymxpc2hlZENoYW5nZXMgJiZcbiAgICAgICAgKGlzTmV3RW50cnkgfHwgIWlzTW9kaWZpY2F0aW9uKSAmJlxuICAgICAgICB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZWxldGVVbnB1Ymxpc2hlZEVudHJ5JykpIHx8XG4gICAgICAoIWhhc1VucHVibGlzaGVkQ2hhbmdlcyAmJiAhaXNNb2RpZmljYXRpb24gJiYgdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZGVsZXRlUHVibGlzaGVkRW50cnknKSk7XG5cbiAgICByZXR1cm4gW1xuICAgICAgPFNhdmVCdXR0b24ga2V5PVwic2F2ZS1idXR0b25cIiBvbkNsaWNrPXsoKSA9PiBoYXNDaGFuZ2VkICYmIG9uUGVyc2lzdCgpfT5cbiAgICAgICAge2lzUGVyc2lzdGluZyA/IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnNhdmluZycpIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuc2F2ZScpfVxuICAgICAgPC9TYXZlQnV0dG9uPixcbiAgICAgICFzaG93RGVsZXRlICYmICFoYXNVbnB1Ymxpc2hlZENoYW5nZXMgJiYgIWlzTW9kaWZpY2F0aW9uID8gbnVsbCA6IChcbiAgICAgICAgPERlbGV0ZUJ1dHRvblxuICAgICAgICAgIGtleT1cImRlbGV0ZS1idXR0b25cIlxuICAgICAgICAgIG9uQ2xpY2s9e2hhc1VucHVibGlzaGVkQ2hhbmdlcyA/IG9uRGVsZXRlVW5wdWJsaXNoZWRDaGFuZ2VzIDogb25EZWxldGV9XG4gICAgICAgID5cbiAgICAgICAgICB7aXNEZWxldGluZyA/IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlbGV0aW5nJykgOiBkZWxldGVMYWJlbH1cbiAgICAgICAgPC9EZWxldGVCdXR0b24+XG4gICAgICApLFxuICAgIF07XG4gIH07XG5cbiAgcmVuZGVyV29ya2Zsb3dQdWJsaXNoQ29udHJvbHMgPSAoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgY29sbGVjdGlvbixcbiAgICAgIGlzVXBkYXRpbmdTdGF0dXMsXG4gICAgICBpc1B1Ymxpc2hpbmcsXG4gICAgICBvbkNoYW5nZVN0YXR1cyxcbiAgICAgIG9uUHVibGlzaCxcbiAgICAgIHVuUHVibGlzaCxcbiAgICAgIG9uRHVwbGljYXRlLFxuICAgICAgb25QdWJsaXNoQW5kTmV3LFxuICAgICAgb25QdWJsaXNoQW5kRHVwbGljYXRlLFxuICAgICAgY3VycmVudFN0YXR1cyxcbiAgICAgIGlzTmV3RW50cnksXG4gICAgICB1c2VPcGVuQXV0aG9yaW5nLFxuICAgICAgaXNQZXJzaXN0aW5nLFxuICAgICAgdCxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IGNhbkNyZWF0ZSA9IGNvbGxlY3Rpb24uZ2V0KCdjcmVhdGUnKTtcbiAgICBpZiAoY3VycmVudFN0YXR1cykge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPD5cbiAgICAgICAgICB7dGhpcy5yZW5kZXJEZXBsb3lQcmV2aWV3Q29udHJvbHModCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZGVwbG95UHJldmlld0J1dHRvbkxhYmVsJykpfVxuICAgICAgICAgIDxUb29sYmFyRHJvcGRvd25cbiAgICAgICAgICAgIGRyb3Bkb3duVG9wT3ZlcmxhcD1cIjQwcHhcIlxuICAgICAgICAgICAgZHJvcGRvd25XaWR0aD1cIjEyMHB4XCJcbiAgICAgICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gKFxuICAgICAgICAgICAgICA8U3RhdHVzQnV0dG9uPlxuICAgICAgICAgICAgICAgIHtpc1VwZGF0aW5nU3RhdHVzXG4gICAgICAgICAgICAgICAgICA/IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnVwZGF0aW5nJylcbiAgICAgICAgICAgICAgICAgIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuc2V0U3RhdHVzJyl9XG4gICAgICAgICAgICAgIDwvU3RhdHVzQnV0dG9uPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8U3RhdHVzRHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kcmFmdCcpfVxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBvbkNoYW5nZVN0YXR1cygnRFJBRlQnKX1cbiAgICAgICAgICAgICAgaWNvbj17Y3VycmVudFN0YXR1cyA9PT0gc3RhdHVzLmdldCgnRFJBRlQnKSA/ICdjaGVjaycgOiBudWxsfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxTdGF0dXNEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmluUmV2aWV3Jyl9XG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uQ2hhbmdlU3RhdHVzKCdQRU5ESU5HX1JFVklFVycpfVxuICAgICAgICAgICAgICBpY29uPXtjdXJyZW50U3RhdHVzID09PSBzdGF0dXMuZ2V0KCdQRU5ESU5HX1JFVklFVycpID8gJ2NoZWNrJyA6IG51bGx9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAge3VzZU9wZW5BdXRob3JpbmcgPyAoXG4gICAgICAgICAgICAgICcnXG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICA8U3RhdHVzRHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnJlYWR5Jyl9XG4gICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gb25DaGFuZ2VTdGF0dXMoJ1BFTkRJTkdfUFVCTElTSCcpfVxuICAgICAgICAgICAgICAgIGljb249e2N1cnJlbnRTdGF0dXMgPT09IHN0YXR1cy5nZXQoJ1BFTkRJTkdfUFVCTElTSCcpID8gJ2NoZWNrJyA6IG51bGx9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvVG9vbGJhckRyb3Bkb3duPlxuICAgICAgICAgIHt1c2VPcGVuQXV0aG9yaW5nID8gKFxuICAgICAgICAgICAgJydcbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPFRvb2xiYXJEcm9wZG93blxuICAgICAgICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgICAgICAgZHJvcGRvd25XaWR0aD1cIjE1MHB4XCJcbiAgICAgICAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiAoXG4gICAgICAgICAgICAgICAgPFB1Ymxpc2hCdXR0b24+XG4gICAgICAgICAgICAgICAgICB7aXNQdWJsaXNoaW5nXG4gICAgICAgICAgICAgICAgICAgID8gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaGluZycpXG4gICAgICAgICAgICAgICAgICAgIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaCcpfVxuICAgICAgICAgICAgICAgIDwvUHVibGlzaEJ1dHRvbj5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPERyb3Bkb3duSXRlbVxuICAgICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoTm93Jyl9XG4gICAgICAgICAgICAgICAgaWNvbj1cImFycm93XCJcbiAgICAgICAgICAgICAgICBpY29uRGlyZWN0aW9uPVwicmlnaHRcIlxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e29uUHVibGlzaH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAge2NhbkNyZWF0ZSA/IChcbiAgICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgICAgPERyb3Bkb3duSXRlbVxuICAgICAgICAgICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaEFuZENyZWF0ZU5ldycpfVxuICAgICAgICAgICAgICAgICAgICBpY29uPVwiYWRkXCJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17b25QdWJsaXNoQW5kTmV3fVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hBbmREdXBsaWNhdGUnKX1cbiAgICAgICAgICAgICAgICAgICAgaWNvbj1cImFkZFwiXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e29uUHVibGlzaEFuZER1cGxpY2F0ZX1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICAgICAgPC9Ub29sYmFyRHJvcGRvd24+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC8+XG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFB1Ymxpc2ggY29udHJvbCBmb3IgcHVibGlzaGVkIHdvcmtmbG93IGVudHJ5LlxuICAgICAqL1xuICAgIGlmICghaXNOZXdFbnRyeSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPD5cbiAgICAgICAgICB7dGhpcy5yZW5kZXJEZXBsb3lQcmV2aWV3Q29udHJvbHModCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZGVwbG95QnV0dG9uTGFiZWwnKSl9XG4gICAgICAgICAgPFRvb2xiYXJEcm9wZG93blxuICAgICAgICAgICAgZHJvcGRvd25Ub3BPdmVybGFwPVwiNDBweFwiXG4gICAgICAgICAgICBkcm9wZG93bldpZHRoPVwiMTUwcHhcIlxuICAgICAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiAoXG4gICAgICAgICAgICAgIDxQdWJsaXNoZWRUb29sYmFyQnV0dG9uPlxuICAgICAgICAgICAgICAgIHtpc1BlcnNpc3RpbmdcbiAgICAgICAgICAgICAgICAgID8gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIudW5wdWJsaXNoaW5nJylcbiAgICAgICAgICAgICAgICAgIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaGVkJyl9XG4gICAgICAgICAgICAgIDwvUHVibGlzaGVkVG9vbGJhckJ1dHRvbj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPERyb3Bkb3duSXRlbVxuICAgICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIudW5wdWJsaXNoJyl9XG4gICAgICAgICAgICAgIGljb249XCJhcnJvd1wiXG4gICAgICAgICAgICAgIGljb25EaXJlY3Rpb249XCJyaWdodFwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e3VuUHVibGlzaH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICB7Y2FuQ3JlYXRlICYmIChcbiAgICAgICAgICAgICAgPERyb3Bkb3duSXRlbVxuICAgICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kdXBsaWNhdGUnKX1cbiAgICAgICAgICAgICAgICBpY29uPVwiYWRkXCJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtvbkR1cGxpY2F0ZX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9Ub29sYmFyRHJvcGRvd24+XG4gICAgICAgIDwvPlxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgdXNlciwgaGFzQ2hhbmdlZCwgZGlzcGxheVVybCwgY29sbGVjdGlvbiwgaGFzV29ya2Zsb3csIG9uTG9nb3V0Q2xpY2ssIHQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFRvb2xiYXJDb250YWluZXI+XG4gICAgICAgIDxUb29sYmFyU2VjdGlvbkJhY2tMaW5rIHRvPXtgL2NvbGxlY3Rpb25zLyR7Y29sbGVjdGlvbi5nZXQoJ25hbWUnKX1gfT5cbiAgICAgICAgICA8QmFja0Fycm93PuKGkDwvQmFja0Fycm93PlxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8QmFja0NvbGxlY3Rpb24+XG4gICAgICAgICAgICAgIHt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5iYWNrQ29sbGVjdGlvbicsIHtcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uTGFiZWw6IGNvbGxlY3Rpb24uZ2V0KCdsYWJlbCcpLFxuICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIDwvQmFja0NvbGxlY3Rpb24+XG4gICAgICAgICAgICB7aGFzQ2hhbmdlZCA/IChcbiAgICAgICAgICAgICAgPEJhY2tTdGF0dXNDaGFuZ2VkPnt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci51bnNhdmVkQ2hhbmdlcycpfTwvQmFja1N0YXR1c0NoYW5nZWQ+XG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICA8QmFja1N0YXR1c1VuY2hhbmdlZD57dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuY2hhbmdlc1NhdmVkJyl9PC9CYWNrU3RhdHVzVW5jaGFuZ2VkPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9Ub29sYmFyU2VjdGlvbkJhY2tMaW5rPlxuICAgICAgICA8VG9vbGJhclNlY3Rpb25NYWluPlxuICAgICAgICAgIDxUb29sYmFyU3ViU2VjdGlvbkZpcnN0PlxuICAgICAgICAgICAge2hhc1dvcmtmbG93ID8gdGhpcy5yZW5kZXJXb3JrZmxvd1NhdmVDb250cm9scygpIDogdGhpcy5yZW5kZXJTaW1wbGVTYXZlQ29udHJvbHMoKX1cbiAgICAgICAgICA8L1Rvb2xiYXJTdWJTZWN0aW9uRmlyc3Q+XG4gICAgICAgICAgPFRvb2xiYXJTdWJTZWN0aW9uTGFzdD5cbiAgICAgICAgICAgIHtoYXNXb3JrZmxvd1xuICAgICAgICAgICAgICA/IHRoaXMucmVuZGVyV29ya2Zsb3dQdWJsaXNoQ29udHJvbHMoKVxuICAgICAgICAgICAgICA6IHRoaXMucmVuZGVyU2ltcGxlUHVibGlzaENvbnRyb2xzKCl9XG4gICAgICAgICAgPC9Ub29sYmFyU3ViU2VjdGlvbkxhc3Q+XG4gICAgICAgIDwvVG9vbGJhclNlY3Rpb25NYWluPlxuICAgICAgICA8VG9vbGJhclNlY3Rpb25NZXRhPlxuICAgICAgICAgIDxTZXR0aW5nc0Ryb3Bkb3duXG4gICAgICAgICAgICBkaXNwbGF5VXJsPXtkaXNwbGF5VXJsfVxuICAgICAgICAgICAgaW1hZ2VVcmw9e3VzZXIuZ2V0KCdhdmF0YXJfdXJsJyl9XG4gICAgICAgICAgICBvbkxvZ291dENsaWNrPXtvbkxvZ291dENsaWNrfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvVG9vbGJhclNlY3Rpb25NZXRhPlxuICAgICAgPC9Ub29sYmFyQ29udGFpbmVyPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgdHJhbnNsYXRlKCkoRWRpdG9yVG9vbGJhcik7XG4iXX0= */");
const PublishedButton = ( /*#__PURE__*/0, _styledBase.default)(ToolbarButton, {
  target: "evqrzhe17",
  label: "PublishedButton"
})(styles.publishedButton, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
const PublishButton = ( /*#__PURE__*/0, _styledBase.default)(DropdownButton, {
  target: "evqrzhe18",
  label: "PublishButton"
})("background-color:", _netlifyCmsUiDefault.colorsRaw.teal, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StatusButton = ( /*#__PURE__*/0, _styledBase.default)(DropdownButton, {
  target: "evqrzhe19",
  label: "StatusButton"
})("background-color:", _netlifyCmsUiDefault.colorsRaw.tealLight, ";color:", _netlifyCmsUiDefault.colorsRaw.teal, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const PreviewButtonContainer = (0, _styledBase.default)("div", {
  target: "evqrzhe20",
  label: "PreviewButtonContainer"
})("margin-right:12px;color:", _netlifyCmsUiDefault.colorsRaw.blue, ";display:flex;align-items:center;a,", _netlifyCmsUiDefault.Icon, "{color:", _netlifyCmsUiDefault.colorsRaw.blue, ";}", _netlifyCmsUiDefault.Icon, "{position:relative;top:1px;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const RefreshPreviewButton = (0, _styledBase.default)("button", {
  target: "evqrzhe21",
  label: "RefreshPreviewButton"
})("background:none;border:0;cursor:pointer;color:", _netlifyCmsUiDefault.colorsRaw.blue, ";span{margin-right:6px;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JUb29sYmFyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXFNMEMiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvRWRpdG9yL0VkaXRvclRvb2xiYXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IE1hcCB9IGZyb20gJ2ltbXV0YWJsZSc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQge1xuICBJY29uLFxuICBEcm9wZG93bixcbiAgRHJvcGRvd25JdGVtLFxuICBTdHlsZWREcm9wZG93bkJ1dHRvbixcbiAgY29sb3JzUmF3LFxuICBjb2xvcnMsXG4gIGNvbXBvbmVudHMsXG4gIGJ1dHRvbnMsXG59IGZyb20gJ25ldGxpZnktY21zLXVpLWRlZmF1bHQnO1xuaW1wb3J0IHsgc3RhdHVzIH0gZnJvbSAnQ29uc3RhbnRzL3B1Ymxpc2hNb2Rlcyc7XG5pbXBvcnQgU2V0dGluZ3NEcm9wZG93biBmcm9tICdVSS9TZXR0aW5nc0Ryb3Bkb3duJztcblxuY29uc3Qgc3R5bGVzID0ge1xuICBub092ZXJmbG93OiBjc3NgXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICBgLFxuICBidXR0b25NYXJnaW46IGNzc2BcbiAgICBtYXJnaW46IDAgMTBweDtcbiAgYCxcbiAgdG9vbGJhclNlY3Rpb246IGNzc2BcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGJvcmRlcjogMCBzb2xpZCAke2NvbG9ycy50ZXh0RmllbGRCb3JkZXJ9O1xuICBgLFxuICBwdWJsaXNoZWRCdXR0b246IGNzc2BcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsTGlnaHR9O1xuICAgIGNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsfTtcbiAgYCxcbn07XG5cbmNvbnN0IERyb3Bkb3duQnV0dG9uID0gc3R5bGVkKFN0eWxlZERyb3Bkb3duQnV0dG9uKWBcbiAgJHtzdHlsZXMubm9PdmVyZmxvd31cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEyMDBweCkge1xuICAgIHBhZGRpbmctbGVmdDogMTBweDtcbiAgfVxuYDtcblxuY29uc3QgVG9vbGJhckNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIGJveC1zaGFkb3c6IDAgMnB4IDZweCAwIHJnYmEoNjgsIDc0LCA4NywgMC4wNSksIDAgMXB4IDNweCAwIHJnYmEoNjgsIDc0LCA4NywgMC4xKSxcbiAgICAwIDJweCA1NHB4IHJnYmEoMCwgMCwgMCwgMC4xKTtcbiAgcG9zaXRpb246IGZpeGVkO1xuICB0b3A6IDA7XG4gIGxlZnQ6IDA7XG4gIHdpZHRoOiAxMDAlO1xuICBtaW4td2lkdGg6IDgwMHB4O1xuICB6LWluZGV4OiAzMDA7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gIGhlaWdodDogNjZweDtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuYDtcblxuY29uc3QgVG9vbGJhclNlY3Rpb25NYWluID0gc3R5bGVkLmRpdmBcbiAgJHtzdHlsZXMudG9vbGJhclNlY3Rpb259O1xuICBmbGV4OiAxMDtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBwYWRkaW5nOiAwIDEwcHg7XG5gO1xuXG5jb25zdCBUb29sYmFyU3ViU2VjdGlvbkZpcnN0ID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbmA7XG5cbmNvbnN0IFRvb2xiYXJTdWJTZWN0aW9uTGFzdCA9IHN0eWxlZChUb29sYmFyU3ViU2VjdGlvbkZpcnN0KWBcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbmA7XG5cbmNvbnN0IFRvb2xiYXJTZWN0aW9uQmFja0xpbmsgPSBzdHlsZWQoTGluaylgXG4gICR7c3R5bGVzLnRvb2xiYXJTZWN0aW9ufTtcbiAgYm9yZGVyLXJpZ2h0LXdpZHRoOiAxcHg7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIHBhZGRpbmc6IDAgMjBweDtcblxuICAmOmhvdmVyLFxuICAmOmZvY3VzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjFmMmY0O1xuICB9XG5gO1xuXG5jb25zdCBUb29sYmFyU2VjdGlvbk1ldGEgPSBzdHlsZWQuZGl2YFxuICAke3N0eWxlcy50b29sYmFyU2VjdGlvbn07XG4gIGJvcmRlci1sZWZ0LXdpZHRoOiAxcHg7XG4gIHBhZGRpbmc6IDAgN3B4O1xuYDtcblxuY29uc3QgVG9vbGJhckRyb3Bkb3duID0gc3R5bGVkKERyb3Bkb3duKWBcbiAgJHtzdHlsZXMuYnV0dG9uTWFyZ2lufTtcblxuICAke0ljb259IHtcbiAgICBjb2xvcjogJHtjb2xvcnNSYXcudGVhbH07XG4gIH1cbmA7XG5cbmNvbnN0IEJhY2tBcnJvdyA9IHN0eWxlZC5kaXZgXG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0TGVhZH07XG4gIGZvbnQtc2l6ZTogMjFweDtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgbWFyZ2luLXJpZ2h0OiAxNnB4O1xuYDtcblxuY29uc3QgQmFja0NvbGxlY3Rpb24gPSBzdHlsZWQuZGl2YFxuICBjb2xvcjogJHtjb2xvcnMudGV4dExlYWR9O1xuICBmb250LXNpemU6IDE0cHg7XG5gO1xuXG5jb25zdCBCYWNrU3RhdHVzID0gc3R5bGVkLmRpdmBcbiAgbWFyZ2luLXRvcDogNnB4O1xuYDtcblxuY29uc3QgQmFja1N0YXR1c1VuY2hhbmdlZCA9IHN0eWxlZChCYWNrU3RhdHVzKWBcbiAgJHtjb21wb25lbnRzLnRleHRCYWRnZVN1Y2Nlc3N9O1xuXG4gICY6OmFmdGVyIHtcbiAgICBoZWlnaHQ6IDEycHg7XG4gICAgd2lkdGg6IDE1LjVweDtcbiAgICBjb2xvcjogJHtjb2xvcnMuc3VjY2Vzc1RleHR9O1xuICAgIG1hcmdpbi1sZWZ0OiA1cHg7XG5cbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgdG9wOiAxcHg7XG5cbiAgICBjb250ZW50OiB1cmwoXCJkYXRhOmltYWdlL3N2Zyt4bWw7IHV0ZjgsIDxzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB3aWR0aD0nMTUnIGhlaWdodD0nMTEnPjxwYXRoIGZpbGw9JyMwMDU2MTQnIGZpbGwtcnVsZT0nbm9uemVybycgZD0nTTQuMDE2IDExbC0uNjQ4LS45NDZhNi4yMDIgNi4yMDIgMCAwIDAtLjE1Ny0uMjIgOS41MjYgOS41MjYgMCAwIDEtLjA5Ni0uMTMzbC0uNTExLS43YTcuNDEzIDcuNDEzIDAgMCAwLS4xNjItLjIxNGwtLjEwMi0uMTM0LS4yNjUtLjM0NmEyNi45MDMgMjYuOTAzIDAgMCAwLS41NDMtLjY4N2wtLjExLS4xMzZjLS4xNDMtLjE3OS0uMjkxLS4zNjMtLjQ0Mi0uNTRsLS4yNzgtLjMzMmE4Ljg1NCA4Ljg1NCAwIDAgMC0uMTkyLS4yMjVMLjQxNyA2LjI4bC0uMjgzLS4zMjRMMCA1LjgwNWwxLjM3Ni0xLjYwMmMuMDQuMDI3LjE4Ni4xMzIuMTg2LjEzMmwuMzc3LjI3Mi4xMjkuMDk1Yy4wOC4wNTguMTYuMTE1LjIzNy4xNzVsLjM3LjI4Yy4xOTIuMTQyLjM4Mi4yOTIuNTY1LjQzNmwuMTYyLjEyNmMuMjcuMjEuNTAzLjM5OC43MTQuNTc0bC40NzcuMzkzYy4wNzguMDY0LjE1Ni4xMjcuMjMuMTk0bC40MzMuMzc1LjE3MS0uMjA1QTUwLjg2NSA1MC44NjUgMCAwIDEgOC4xOCA0LjAyM2EzNS4xNjMgMzUuMTYzIDAgMCAxIDIuMzgyLTIuMjEzYy4yMDctLjE3NC40Mi0uMzQ5LjYzNS0uNTE4bC4zMjgtLjI1NS4zMzMtLjI0NWMuMDcyLS4wNTUuMTQ2LS4xMDcuMjIxLS4xNTlsLjExNy0uMDgzYy4xMS0uMDc3LjIyNS0uMTU1LjM0MS0uMjMuMTYzLS4xMS4zMzQtLjIxNy41MDMtLjMybDEuMTU4IDEuNzRhMTEuOTA4IDExLjkwOCAwIDAgMC0uNjQuNTVsLS4wNjUuMDZjLS4wNy4wNjItLjEzOS4xMjUtLjIwNy4xOTJsLS4yNTguMjQ5LS4yNi4yNjVjLS4xNzMuMTc2LS4zNDUuMzU3LS41MTIuNTM5YTMyLjYyNiAzMi42MjYgMCAwIDAtMS45MTUgMi4zMTMgNTIuMTE1IDUyLjExNSAwIDAgMC0yLjU3MiAzLjc0NmwtLjM5Mi42NDItLjE5LjMyMi0uMjMzLjM4Mkg0LjAxNnonLz48L3N2Zz5cIik7XG4gIH1cbmA7XG5cbmNvbnN0IEJhY2tTdGF0dXNDaGFuZ2VkID0gc3R5bGVkKEJhY2tTdGF0dXMpYFxuICAke2NvbXBvbmVudHMudGV4dEJhZGdlRGFuZ2VyfTtcbmA7XG5cbmNvbnN0IFRvb2xiYXJCdXR0b24gPSBzdHlsZWQuYnV0dG9uYFxuICAke2J1dHRvbnMuYnV0dG9ufTtcbiAgJHtidXR0b25zLmRlZmF1bHR9O1xuICAke3N0eWxlcy5idXR0b25NYXJnaW59O1xuICAke3N0eWxlcy5ub092ZXJmbG93fTtcbiAgZGlzcGxheTogYmxvY2s7XG5cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEyMDBweCkge1xuICAgIHBhZGRpbmc6IDAgMTBweDtcbiAgfVxuYDtcblxuY29uc3QgRGVsZXRlQnV0dG9uID0gc3R5bGVkKFRvb2xiYXJCdXR0b24pYFxuICAke2J1dHRvbnMubGlnaHRSZWR9O1xuYDtcblxuY29uc3QgU2F2ZUJ1dHRvbiA9IHN0eWxlZChUb29sYmFyQnV0dG9uKWBcbiAgJHtidXR0b25zLmxpZ2h0Qmx1ZX07XG5gO1xuXG5jb25zdCBQdWJsaXNoZWRUb29sYmFyQnV0dG9uID0gc3R5bGVkKERyb3Bkb3duQnV0dG9uKWBcbiAgJHtzdHlsZXMucHVibGlzaGVkQnV0dG9ufVxuYDtcblxuY29uc3QgUHVibGlzaGVkQnV0dG9uID0gc3R5bGVkKFRvb2xiYXJCdXR0b24pYFxuICAke3N0eWxlcy5wdWJsaXNoZWRCdXR0b259XG5gO1xuXG5jb25zdCBQdWJsaXNoQnV0dG9uID0gc3R5bGVkKERyb3Bkb3duQnV0dG9uKWBcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnNSYXcudGVhbH07XG5gO1xuXG5jb25zdCBTdGF0dXNCdXR0b24gPSBzdHlsZWQoRHJvcGRvd25CdXR0b24pYFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsTGlnaHR9O1xuICBjb2xvcjogJHtjb2xvcnNSYXcudGVhbH07XG5gO1xuXG5jb25zdCBQcmV2aWV3QnV0dG9uQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgbWFyZ2luLXJpZ2h0OiAxMnB4O1xuICBjb2xvcjogJHtjb2xvcnNSYXcuYmx1ZX07XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgYSxcbiAgJHtJY29ufSB7XG4gICAgY29sb3I6ICR7Y29sb3JzUmF3LmJsdWV9O1xuICB9XG5cbiAgJHtJY29ufSB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHRvcDogMXB4O1xuICB9XG5gO1xuXG5jb25zdCBSZWZyZXNoUHJldmlld0J1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gIGJhY2tncm91bmQ6IG5vbmU7XG4gIGJvcmRlcjogMDtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBjb2xvcjogJHtjb2xvcnNSYXcuYmx1ZX07XG5cbiAgc3BhbiB7XG4gICAgbWFyZ2luLXJpZ2h0OiA2cHg7XG4gIH1cbmA7XG5cbmNvbnN0IFByZXZpZXdMaW5rID0gUmVmcmVzaFByZXZpZXdCdXR0b24ud2l0aENvbXBvbmVudCgnYScpO1xuXG5jb25zdCBTdGF0dXNEcm9wZG93bkl0ZW0gPSBzdHlsZWQoRHJvcGRvd25JdGVtKWBcbiAgJHtJY29ufSB7XG4gICAgY29sb3I6ICR7Y29sb3JzLmluZm9UZXh0fTtcbiAgfVxuYDtcblxuY2xhc3MgRWRpdG9yVG9vbGJhciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgaXNQZXJzaXN0aW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc1B1Ymxpc2hpbmc6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzVXBkYXRpbmdTdGF0dXM6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzRGVsZXRpbmc6IFByb3BUeXBlcy5ib29sLFxuICAgIG9uUGVyc2lzdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblBlcnNpc3RBbmROZXc6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25QZXJzaXN0QW5kRHVwbGljYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHNob3dEZWxldGU6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgb25EZWxldGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25EZWxldGVVbnB1Ymxpc2hlZENoYW5nZXM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25DaGFuZ2VTdGF0dXM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25QdWJsaXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHVuUHVibGlzaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkR1cGxpY2F0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblB1Ymxpc2hBbmROZXc6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25QdWJsaXNoQW5kRHVwbGljYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHVzZXI6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgICBoYXNDaGFuZ2VkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBkaXNwbGF5VXJsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNvbGxlY3Rpb246IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgICBoYXNXb3JrZmxvdzogUHJvcFR5cGVzLmJvb2wsXG4gICAgdXNlT3BlbkF1dGhvcmluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgaGFzVW5wdWJsaXNoZWRDaGFuZ2VzOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc05ld0VudHJ5OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc01vZGlmaWNhdGlvbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgY3VycmVudFN0YXR1czogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBvbkxvZ291dENsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGRlcGxveVByZXZpZXc6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAsXG4gICAgbG9hZERlcGxveVByZXZpZXc6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBjb25zdCB7IGlzTmV3RW50cnksIGxvYWREZXBsb3lQcmV2aWV3IH0gPSB0aGlzLnByb3BzO1xuICAgIGlmICghaXNOZXdFbnRyeSkge1xuICAgICAgbG9hZERlcGxveVByZXZpZXcoeyBtYXhBdHRlbXB0czogMyB9KTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgY29uc3QgeyBpc05ld0VudHJ5LCBpc1BlcnNpc3RpbmcsIGxvYWREZXBsb3lQcmV2aWV3IH0gPSB0aGlzLnByb3BzO1xuICAgIGlmICghaXNOZXdFbnRyeSAmJiBwcmV2UHJvcHMuaXNQZXJzaXN0aW5nICYmICFpc1BlcnNpc3RpbmcpIHtcbiAgICAgIGxvYWREZXBsb3lQcmV2aWV3KHsgbWF4QXR0ZW1wdHM6IDMgfSk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyU2ltcGxlU2F2ZUNvbnRyb2xzID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgc2hvd0RlbGV0ZSwgb25EZWxldGUsIHQgfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIHtzaG93RGVsZXRlID8gKFxuICAgICAgICAgIDxEZWxldGVCdXR0b24gb25DbGljaz17b25EZWxldGV9Pnt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZWxldGVFbnRyeScpfTwvRGVsZXRlQnV0dG9uPlxuICAgICAgICApIDogbnVsbH1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyRGVwbG95UHJldmlld0NvbnRyb2xzID0gbGFiZWwgPT4ge1xuICAgIGNvbnN0IHsgZGVwbG95UHJldmlldyA9IE1hcCgpLCBsb2FkRGVwbG95UHJldmlldywgdCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB1cmwgPSBkZXBsb3lQcmV2aWV3LmdldCgndXJsJyk7XG4gICAgY29uc3Qgc3RhdHVzID0gZGVwbG95UHJldmlldy5nZXQoJ3N0YXR1cycpO1xuXG4gICAgaWYgKCFzdGF0dXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBpc0ZldGNoaW5nID0gZGVwbG95UHJldmlldy5nZXQoJ2lzRmV0Y2hpbmcnKTtcbiAgICBjb25zdCBkZXBsb3lQcmV2aWV3UmVhZHkgPSBzdGF0dXMgPT09ICdTVUNDRVNTJyAmJiAhaXNGZXRjaGluZztcbiAgICByZXR1cm4gKFxuICAgICAgPFByZXZpZXdCdXR0b25Db250YWluZXI+XG4gICAgICAgIHtkZXBsb3lQcmV2aWV3UmVhZHkgPyAoXG4gICAgICAgICAgPFByZXZpZXdMaW5rIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIiB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPXt1cmx9PlxuICAgICAgICAgICAgPHNwYW4+e2xhYmVsfTwvc3Bhbj5cbiAgICAgICAgICAgIDxJY29uIHR5cGU9XCJuZXctdGFiXCIgc2l6ZT1cInhzbWFsbFwiIC8+XG4gICAgICAgICAgPC9QcmV2aWV3TGluaz5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8UmVmcmVzaFByZXZpZXdCdXR0b24gb25DbGljaz17bG9hZERlcGxveVByZXZpZXd9PlxuICAgICAgICAgICAgPHNwYW4+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlcGxveVByZXZpZXdQZW5kaW5nQnV0dG9uTGFiZWwnKX08L3NwYW4+XG4gICAgICAgICAgICA8SWNvbiB0eXBlPVwicmVmcmVzaFwiIHNpemU9XCJ4c21hbGxcIiAvPlxuICAgICAgICAgIDwvUmVmcmVzaFByZXZpZXdCdXR0b24+XG4gICAgICAgICl9XG4gICAgICA8L1ByZXZpZXdCdXR0b25Db250YWluZXI+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJTaW1wbGVQdWJsaXNoQ29udHJvbHMgPSAoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgY29sbGVjdGlvbixcbiAgICAgIG9uUGVyc2lzdCxcbiAgICAgIG9uUGVyc2lzdEFuZE5ldyxcbiAgICAgIG9uUGVyc2lzdEFuZER1cGxpY2F0ZSxcbiAgICAgIG9uRHVwbGljYXRlLFxuICAgICAgaXNQZXJzaXN0aW5nLFxuICAgICAgaGFzQ2hhbmdlZCxcbiAgICAgIGlzTmV3RW50cnksXG4gICAgICB0LFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgY2FuQ3JlYXRlID0gY29sbGVjdGlvbi5nZXQoJ2NyZWF0ZScpO1xuICAgIGlmICghaXNOZXdFbnRyeSAmJiAhaGFzQ2hhbmdlZCkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPD5cbiAgICAgICAgICB7dGhpcy5yZW5kZXJEZXBsb3lQcmV2aWV3Q29udHJvbHModCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZGVwbG95QnV0dG9uTGFiZWwnKSl9XG4gICAgICAgICAge2NhbkNyZWF0ZSA/IChcbiAgICAgICAgICAgIDxUb29sYmFyRHJvcGRvd25cbiAgICAgICAgICAgICAgZHJvcGRvd25Ub3BPdmVybGFwPVwiNDBweFwiXG4gICAgICAgICAgICAgIGRyb3Bkb3duV2lkdGg9XCIxNTBweFwiXG4gICAgICAgICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gKFxuICAgICAgICAgICAgICAgIDxQdWJsaXNoZWRUb29sYmFyQnV0dG9uPlxuICAgICAgICAgICAgICAgICAge3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hlZCcpfVxuICAgICAgICAgICAgICAgIDwvUHVibGlzaGVkVG9vbGJhckJ1dHRvbj5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kdXBsaWNhdGUnKX1cbiAgICAgICAgICAgICAgICAgIGljb249XCJhZGRcIlxuICAgICAgICAgICAgICAgICAgb25DbGljaz17b25EdXBsaWNhdGV9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgPC9Ub29sYmFyRHJvcGRvd24+XG4gICAgICAgICAgKSA6IChcbiAgICAgICAgICAgIDxQdWJsaXNoZWRCdXR0b24+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hlZCcpfTwvUHVibGlzaGVkQnV0dG9uPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvPlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxUb29sYmFyRHJvcGRvd25cbiAgICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgICBkcm9wZG93bldpZHRoPVwiMTUwcHhcIlxuICAgICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gKFxuICAgICAgICAgICAgPFB1Ymxpc2hCdXR0b24+XG4gICAgICAgICAgICAgIHtpc1BlcnNpc3RpbmdcbiAgICAgICAgICAgICAgICA/IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hpbmcnKVxuICAgICAgICAgICAgICAgIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaCcpfVxuICAgICAgICAgICAgPC9QdWJsaXNoQnV0dG9uPlxuICAgICAgICAgICl9XG4gICAgICAgID5cbiAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaE5vdycpfVxuICAgICAgICAgICAgaWNvbj1cImFycm93XCJcbiAgICAgICAgICAgIGljb25EaXJlY3Rpb249XCJyaWdodFwiXG4gICAgICAgICAgICBvbkNsaWNrPXtvblBlcnNpc3R9XG4gICAgICAgICAgLz5cbiAgICAgICAgICB7Y2FuQ3JlYXRlID8gKFxuICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgPERyb3Bkb3duSXRlbVxuICAgICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoQW5kQ3JlYXRlTmV3Jyl9XG4gICAgICAgICAgICAgICAgaWNvbj1cImFkZFwiXG4gICAgICAgICAgICAgICAgb25DbGljaz17b25QZXJzaXN0QW5kTmV3fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hBbmREdXBsaWNhdGUnKX1cbiAgICAgICAgICAgICAgICBpY29uPVwiYWRkXCJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtvblBlcnNpc3RBbmREdXBsaWNhdGV9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8Lz5cbiAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgPC9Ub29sYmFyRHJvcGRvd24+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlcldvcmtmbG93U2F2ZUNvbnRyb2xzID0gKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG9uUGVyc2lzdCxcbiAgICAgIG9uRGVsZXRlLFxuICAgICAgb25EZWxldGVVbnB1Ymxpc2hlZENoYW5nZXMsXG4gICAgICBzaG93RGVsZXRlLFxuICAgICAgaGFzQ2hhbmdlZCxcbiAgICAgIGhhc1VucHVibGlzaGVkQ2hhbmdlcyxcbiAgICAgIGlzUGVyc2lzdGluZyxcbiAgICAgIGlzRGVsZXRpbmcsXG4gICAgICBpc05ld0VudHJ5LFxuICAgICAgaXNNb2RpZmljYXRpb24sXG4gICAgICB0LFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgZGVsZXRlTGFiZWwgPVxuICAgICAgKGhhc1VucHVibGlzaGVkQ2hhbmdlcyAmJlxuICAgICAgICBpc01vZGlmaWNhdGlvbiAmJlxuICAgICAgICB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZWxldGVVbnB1Ymxpc2hlZENoYW5nZXMnKSkgfHxcbiAgICAgIChoYXNVbnB1Ymxpc2hlZENoYW5nZXMgJiZcbiAgICAgICAgKGlzTmV3RW50cnkgfHwgIWlzTW9kaWZpY2F0aW9uKSAmJlxuICAgICAgICB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZWxldGVVbnB1Ymxpc2hlZEVudHJ5JykpIHx8XG4gICAgICAoIWhhc1VucHVibGlzaGVkQ2hhbmdlcyAmJiAhaXNNb2RpZmljYXRpb24gJiYgdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZGVsZXRlUHVibGlzaGVkRW50cnknKSk7XG5cbiAgICByZXR1cm4gW1xuICAgICAgPFNhdmVCdXR0b24ga2V5PVwic2F2ZS1idXR0b25cIiBvbkNsaWNrPXsoKSA9PiBoYXNDaGFuZ2VkICYmIG9uUGVyc2lzdCgpfT5cbiAgICAgICAge2lzUGVyc2lzdGluZyA/IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnNhdmluZycpIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuc2F2ZScpfVxuICAgICAgPC9TYXZlQnV0dG9uPixcbiAgICAgICFzaG93RGVsZXRlICYmICFoYXNVbnB1Ymxpc2hlZENoYW5nZXMgJiYgIWlzTW9kaWZpY2F0aW9uID8gbnVsbCA6IChcbiAgICAgICAgPERlbGV0ZUJ1dHRvblxuICAgICAgICAgIGtleT1cImRlbGV0ZS1idXR0b25cIlxuICAgICAgICAgIG9uQ2xpY2s9e2hhc1VucHVibGlzaGVkQ2hhbmdlcyA/IG9uRGVsZXRlVW5wdWJsaXNoZWRDaGFuZ2VzIDogb25EZWxldGV9XG4gICAgICAgID5cbiAgICAgICAgICB7aXNEZWxldGluZyA/IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlbGV0aW5nJykgOiBkZWxldGVMYWJlbH1cbiAgICAgICAgPC9EZWxldGVCdXR0b24+XG4gICAgICApLFxuICAgIF07XG4gIH07XG5cbiAgcmVuZGVyV29ya2Zsb3dQdWJsaXNoQ29udHJvbHMgPSAoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgY29sbGVjdGlvbixcbiAgICAgIGlzVXBkYXRpbmdTdGF0dXMsXG4gICAgICBpc1B1Ymxpc2hpbmcsXG4gICAgICBvbkNoYW5nZVN0YXR1cyxcbiAgICAgIG9uUHVibGlzaCxcbiAgICAgIHVuUHVibGlzaCxcbiAgICAgIG9uRHVwbGljYXRlLFxuICAgICAgb25QdWJsaXNoQW5kTmV3LFxuICAgICAgb25QdWJsaXNoQW5kRHVwbGljYXRlLFxuICAgICAgY3VycmVudFN0YXR1cyxcbiAgICAgIGlzTmV3RW50cnksXG4gICAgICB1c2VPcGVuQXV0aG9yaW5nLFxuICAgICAgaXNQZXJzaXN0aW5nLFxuICAgICAgdCxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IGNhbkNyZWF0ZSA9IGNvbGxlY3Rpb24uZ2V0KCdjcmVhdGUnKTtcbiAgICBpZiAoY3VycmVudFN0YXR1cykge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPD5cbiAgICAgICAgICB7dGhpcy5yZW5kZXJEZXBsb3lQcmV2aWV3Q29udHJvbHModCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZGVwbG95UHJldmlld0J1dHRvbkxhYmVsJykpfVxuICAgICAgICAgIDxUb29sYmFyRHJvcGRvd25cbiAgICAgICAgICAgIGRyb3Bkb3duVG9wT3ZlcmxhcD1cIjQwcHhcIlxuICAgICAgICAgICAgZHJvcGRvd25XaWR0aD1cIjEyMHB4XCJcbiAgICAgICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gKFxuICAgICAgICAgICAgICA8U3RhdHVzQnV0dG9uPlxuICAgICAgICAgICAgICAgIHtpc1VwZGF0aW5nU3RhdHVzXG4gICAgICAgICAgICAgICAgICA/IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnVwZGF0aW5nJylcbiAgICAgICAgICAgICAgICAgIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuc2V0U3RhdHVzJyl9XG4gICAgICAgICAgICAgIDwvU3RhdHVzQnV0dG9uPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8U3RhdHVzRHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kcmFmdCcpfVxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBvbkNoYW5nZVN0YXR1cygnRFJBRlQnKX1cbiAgICAgICAgICAgICAgaWNvbj17Y3VycmVudFN0YXR1cyA9PT0gc3RhdHVzLmdldCgnRFJBRlQnKSA/ICdjaGVjaycgOiBudWxsfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxTdGF0dXNEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmluUmV2aWV3Jyl9XG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uQ2hhbmdlU3RhdHVzKCdQRU5ESU5HX1JFVklFVycpfVxuICAgICAgICAgICAgICBpY29uPXtjdXJyZW50U3RhdHVzID09PSBzdGF0dXMuZ2V0KCdQRU5ESU5HX1JFVklFVycpID8gJ2NoZWNrJyA6IG51bGx9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAge3VzZU9wZW5BdXRob3JpbmcgPyAoXG4gICAgICAgICAgICAgICcnXG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICA8U3RhdHVzRHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnJlYWR5Jyl9XG4gICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gb25DaGFuZ2VTdGF0dXMoJ1BFTkRJTkdfUFVCTElTSCcpfVxuICAgICAgICAgICAgICAgIGljb249e2N1cnJlbnRTdGF0dXMgPT09IHN0YXR1cy5nZXQoJ1BFTkRJTkdfUFVCTElTSCcpID8gJ2NoZWNrJyA6IG51bGx9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvVG9vbGJhckRyb3Bkb3duPlxuICAgICAgICAgIHt1c2VPcGVuQXV0aG9yaW5nID8gKFxuICAgICAgICAgICAgJydcbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPFRvb2xiYXJEcm9wZG93blxuICAgICAgICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgICAgICAgZHJvcGRvd25XaWR0aD1cIjE1MHB4XCJcbiAgICAgICAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiAoXG4gICAgICAgICAgICAgICAgPFB1Ymxpc2hCdXR0b24+XG4gICAgICAgICAgICAgICAgICB7aXNQdWJsaXNoaW5nXG4gICAgICAgICAgICAgICAgICAgID8gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaGluZycpXG4gICAgICAgICAgICAgICAgICAgIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaCcpfVxuICAgICAgICAgICAgICAgIDwvUHVibGlzaEJ1dHRvbj5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPERyb3Bkb3duSXRlbVxuICAgICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoTm93Jyl9XG4gICAgICAgICAgICAgICAgaWNvbj1cImFycm93XCJcbiAgICAgICAgICAgICAgICBpY29uRGlyZWN0aW9uPVwicmlnaHRcIlxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e29uUHVibGlzaH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAge2NhbkNyZWF0ZSA/IChcbiAgICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgICAgPERyb3Bkb3duSXRlbVxuICAgICAgICAgICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaEFuZENyZWF0ZU5ldycpfVxuICAgICAgICAgICAgICAgICAgICBpY29uPVwiYWRkXCJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17b25QdWJsaXNoQW5kTmV3fVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hBbmREdXBsaWNhdGUnKX1cbiAgICAgICAgICAgICAgICAgICAgaWNvbj1cImFkZFwiXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e29uUHVibGlzaEFuZER1cGxpY2F0ZX1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICAgICAgPC9Ub29sYmFyRHJvcGRvd24+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC8+XG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFB1Ymxpc2ggY29udHJvbCBmb3IgcHVibGlzaGVkIHdvcmtmbG93IGVudHJ5LlxuICAgICAqL1xuICAgIGlmICghaXNOZXdFbnRyeSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPD5cbiAgICAgICAgICB7dGhpcy5yZW5kZXJEZXBsb3lQcmV2aWV3Q29udHJvbHModCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZGVwbG95QnV0dG9uTGFiZWwnKSl9XG4gICAgICAgICAgPFRvb2xiYXJEcm9wZG93blxuICAgICAgICAgICAgZHJvcGRvd25Ub3BPdmVybGFwPVwiNDBweFwiXG4gICAgICAgICAgICBkcm9wZG93bldpZHRoPVwiMTUwcHhcIlxuICAgICAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiAoXG4gICAgICAgICAgICAgIDxQdWJsaXNoZWRUb29sYmFyQnV0dG9uPlxuICAgICAgICAgICAgICAgIHtpc1BlcnNpc3RpbmdcbiAgICAgICAgICAgICAgICAgID8gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIudW5wdWJsaXNoaW5nJylcbiAgICAgICAgICAgICAgICAgIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaGVkJyl9XG4gICAgICAgICAgICAgIDwvUHVibGlzaGVkVG9vbGJhckJ1dHRvbj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPERyb3Bkb3duSXRlbVxuICAgICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIudW5wdWJsaXNoJyl9XG4gICAgICAgICAgICAgIGljb249XCJhcnJvd1wiXG4gICAgICAgICAgICAgIGljb25EaXJlY3Rpb249XCJyaWdodFwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e3VuUHVibGlzaH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICB7Y2FuQ3JlYXRlICYmIChcbiAgICAgICAgICAgICAgPERyb3Bkb3duSXRlbVxuICAgICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kdXBsaWNhdGUnKX1cbiAgICAgICAgICAgICAgICBpY29uPVwiYWRkXCJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtvbkR1cGxpY2F0ZX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9Ub29sYmFyRHJvcGRvd24+XG4gICAgICAgIDwvPlxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgdXNlciwgaGFzQ2hhbmdlZCwgZGlzcGxheVVybCwgY29sbGVjdGlvbiwgaGFzV29ya2Zsb3csIG9uTG9nb3V0Q2xpY2ssIHQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFRvb2xiYXJDb250YWluZXI+XG4gICAgICAgIDxUb29sYmFyU2VjdGlvbkJhY2tMaW5rIHRvPXtgL2NvbGxlY3Rpb25zLyR7Y29sbGVjdGlvbi5nZXQoJ25hbWUnKX1gfT5cbiAgICAgICAgICA8QmFja0Fycm93PuKGkDwvQmFja0Fycm93PlxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8QmFja0NvbGxlY3Rpb24+XG4gICAgICAgICAgICAgIHt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5iYWNrQ29sbGVjdGlvbicsIHtcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uTGFiZWw6IGNvbGxlY3Rpb24uZ2V0KCdsYWJlbCcpLFxuICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIDwvQmFja0NvbGxlY3Rpb24+XG4gICAgICAgICAgICB7aGFzQ2hhbmdlZCA/IChcbiAgICAgICAgICAgICAgPEJhY2tTdGF0dXNDaGFuZ2VkPnt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci51bnNhdmVkQ2hhbmdlcycpfTwvQmFja1N0YXR1c0NoYW5nZWQ+XG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICA8QmFja1N0YXR1c1VuY2hhbmdlZD57dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuY2hhbmdlc1NhdmVkJyl9PC9CYWNrU3RhdHVzVW5jaGFuZ2VkPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9Ub29sYmFyU2VjdGlvbkJhY2tMaW5rPlxuICAgICAgICA8VG9vbGJhclNlY3Rpb25NYWluPlxuICAgICAgICAgIDxUb29sYmFyU3ViU2VjdGlvbkZpcnN0PlxuICAgICAgICAgICAge2hhc1dvcmtmbG93ID8gdGhpcy5yZW5kZXJXb3JrZmxvd1NhdmVDb250cm9scygpIDogdGhpcy5yZW5kZXJTaW1wbGVTYXZlQ29udHJvbHMoKX1cbiAgICAgICAgICA8L1Rvb2xiYXJTdWJTZWN0aW9uRmlyc3Q+XG4gICAgICAgICAgPFRvb2xiYXJTdWJTZWN0aW9uTGFzdD5cbiAgICAgICAgICAgIHtoYXNXb3JrZmxvd1xuICAgICAgICAgICAgICA/IHRoaXMucmVuZGVyV29ya2Zsb3dQdWJsaXNoQ29udHJvbHMoKVxuICAgICAgICAgICAgICA6IHRoaXMucmVuZGVyU2ltcGxlUHVibGlzaENvbnRyb2xzKCl9XG4gICAgICAgICAgPC9Ub29sYmFyU3ViU2VjdGlvbkxhc3Q+XG4gICAgICAgIDwvVG9vbGJhclNlY3Rpb25NYWluPlxuICAgICAgICA8VG9vbGJhclNlY3Rpb25NZXRhPlxuICAgICAgICAgIDxTZXR0aW5nc0Ryb3Bkb3duXG4gICAgICAgICAgICBkaXNwbGF5VXJsPXtkaXNwbGF5VXJsfVxuICAgICAgICAgICAgaW1hZ2VVcmw9e3VzZXIuZ2V0KCdhdmF0YXJfdXJsJyl9XG4gICAgICAgICAgICBvbkxvZ291dENsaWNrPXtvbkxvZ291dENsaWNrfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvVG9vbGJhclNlY3Rpb25NZXRhPlxuICAgICAgPC9Ub29sYmFyQ29udGFpbmVyPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgdHJhbnNsYXRlKCkoRWRpdG9yVG9vbGJhcik7XG4iXX0= */"));
const PreviewLink = RefreshPreviewButton.withComponent('a', {
  target: "evqrzhe23",
  label: "PreviewLink"
});
const StatusDropdownItem = ( /*#__PURE__*/0, _styledBase.default)(_netlifyCmsUiDefault.DropdownItem, {
  target: "evqrzhe22",
  label: "StatusDropdownItem"
})(_netlifyCmsUiDefault.Icon, "{color:", _netlifyCmsUiDefault.colors.infoText, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

class EditorToolbar extends _react.default.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "renderSimpleSaveControls", () => {
      const {
        showDelete,
        onDelete,
        t
      } = this.props;
      return (0, _core.jsx)("div", null, showDelete ? (0, _core.jsx)(DeleteButton, {
        onClick: onDelete
      }, t('editor.editorToolbar.deleteEntry')) : null);
    });

    _defineProperty(this, "renderDeployPreviewControls", label => {
      const {
        deployPreview = (0, _immutable.Map)(),
        loadDeployPreview,
        t
      } = this.props;
      const url = deployPreview.get('url');
      const status = deployPreview.get('status');

      if (!status) {
        return;
      }

      const isFetching = deployPreview.get('isFetching');
      const deployPreviewReady = status === 'SUCCESS' && !isFetching;
      return (0, _core.jsx)(PreviewButtonContainer, null, deployPreviewReady ? (0, _core.jsx)(PreviewLink, {
        rel: "noopener noreferrer",
        target: "_blank",
        href: url
      }, (0, _core.jsx)("span", null, label), (0, _core.jsx)(_netlifyCmsUiDefault.Icon, {
        type: "new-tab",
        size: "xsmall"
      })) : (0, _core.jsx)(RefreshPreviewButton, {
        onClick: loadDeployPreview
      }, (0, _core.jsx)("span", null, t('editor.editorToolbar.deployPreviewPendingButtonLabel')), (0, _core.jsx)(_netlifyCmsUiDefault.Icon, {
        type: "refresh",
        size: "xsmall"
      })));
    });

    _defineProperty(this, "renderSimplePublishControls", () => {
      const {
        collection,
        onPersist,
        onPersistAndNew,
        onPersistAndDuplicate,
        onDuplicate,
        isPersisting,
        hasChanged,
        isNewEntry,
        t
      } = this.props;
      const canCreate = collection.get('create');

      if (!isNewEntry && !hasChanged) {
        return (0, _core.jsx)(_react.default.Fragment, null, this.renderDeployPreviewControls(t('editor.editorToolbar.deployButtonLabel')), canCreate ? (0, _core.jsx)(ToolbarDropdown, {
          dropdownTopOverlap: "40px",
          dropdownWidth: "150px",
          renderButton: () => (0, _core.jsx)(PublishedToolbarButton, null, t('editor.editorToolbar.published'))
        }, (0, _core.jsx)(_netlifyCmsUiDefault.DropdownItem, {
          label: t('editor.editorToolbar.duplicate'),
          icon: "add",
          onClick: onDuplicate
        })) : (0, _core.jsx)(PublishedButton, null, t('editor.editorToolbar.published')));
      }

      return (0, _core.jsx)("div", null, (0, _core.jsx)(ToolbarDropdown, {
        dropdownTopOverlap: "40px",
        dropdownWidth: "150px",
        renderButton: () => (0, _core.jsx)(PublishButton, null, isPersisting ? t('editor.editorToolbar.publishing') : t('editor.editorToolbar.publish'))
      }, (0, _core.jsx)(_netlifyCmsUiDefault.DropdownItem, {
        label: t('editor.editorToolbar.publishNow'),
        icon: "arrow",
        iconDirection: "right",
        onClick: onPersist
      }), canCreate ? (0, _core.jsx)(_react.default.Fragment, null, (0, _core.jsx)(_netlifyCmsUiDefault.DropdownItem, {
        label: t('editor.editorToolbar.publishAndCreateNew'),
        icon: "add",
        onClick: onPersistAndNew
      }), (0, _core.jsx)(_netlifyCmsUiDefault.DropdownItem, {
        label: t('editor.editorToolbar.publishAndDuplicate'),
        icon: "add",
        onClick: onPersistAndDuplicate
      })) : null));
    });

    _defineProperty(this, "renderWorkflowSaveControls", () => {
      const {
        onPersist,
        onDelete,
        onDeleteUnpublishedChanges,
        showDelete,
        hasChanged,
        hasUnpublishedChanges,
        isPersisting,
        isDeleting,
        isNewEntry,
        isModification,
        t
      } = this.props;
      const deleteLabel = hasUnpublishedChanges && isModification && t('editor.editorToolbar.deleteUnpublishedChanges') || hasUnpublishedChanges && (isNewEntry || !isModification) && t('editor.editorToolbar.deleteUnpublishedEntry') || !hasUnpublishedChanges && !isModification && t('editor.editorToolbar.deletePublishedEntry');
      return [(0, _core.jsx)(SaveButton, {
        key: "save-button",
        onClick: () => hasChanged && onPersist()
      }, isPersisting ? t('editor.editorToolbar.saving') : t('editor.editorToolbar.save')), !showDelete && !hasUnpublishedChanges && !isModification ? null : (0, _core.jsx)(DeleteButton, {
        key: "delete-button",
        onClick: hasUnpublishedChanges ? onDeleteUnpublishedChanges : onDelete
      }, isDeleting ? t('editor.editorToolbar.deleting') : deleteLabel)];
    });

    _defineProperty(this, "renderWorkflowPublishControls", () => {
      const {
        collection,
        isUpdatingStatus,
        isPublishing,
        onChangeStatus,
        onPublish,
        unPublish,
        onDuplicate,
        onPublishAndNew,
        onPublishAndDuplicate,
        currentStatus,
        isNewEntry,
        useOpenAuthoring,
        isPersisting,
        t
      } = this.props;
      const canCreate = collection.get('create');

      if (currentStatus) {
        return (0, _core.jsx)(_react.default.Fragment, null, this.renderDeployPreviewControls(t('editor.editorToolbar.deployPreviewButtonLabel')), (0, _core.jsx)(ToolbarDropdown, {
          dropdownTopOverlap: "40px",
          dropdownWidth: "120px",
          renderButton: () => (0, _core.jsx)(StatusButton, null, isUpdatingStatus ? t('editor.editorToolbar.updating') : t('editor.editorToolbar.setStatus'))
        }, (0, _core.jsx)(StatusDropdownItem, {
          label: t('editor.editorToolbar.draft'),
          onClick: () => onChangeStatus('DRAFT'),
          icon: currentStatus === _publishModes.status.get('DRAFT') ? 'check' : null
        }), (0, _core.jsx)(StatusDropdownItem, {
          label: t('editor.editorToolbar.inReview'),
          onClick: () => onChangeStatus('PENDING_REVIEW'),
          icon: currentStatus === _publishModes.status.get('PENDING_REVIEW') ? 'check' : null
        }), useOpenAuthoring ? '' : (0, _core.jsx)(StatusDropdownItem, {
          label: t('editor.editorToolbar.ready'),
          onClick: () => onChangeStatus('PENDING_PUBLISH'),
          icon: currentStatus === _publishModes.status.get('PENDING_PUBLISH') ? 'check' : null
        })), useOpenAuthoring ? '' : (0, _core.jsx)(ToolbarDropdown, {
          dropdownTopOverlap: "40px",
          dropdownWidth: "150px",
          renderButton: () => (0, _core.jsx)(PublishButton, null, isPublishing ? t('editor.editorToolbar.publishing') : t('editor.editorToolbar.publish'))
        }, (0, _core.jsx)(_netlifyCmsUiDefault.DropdownItem, {
          label: t('editor.editorToolbar.publishNow'),
          icon: "arrow",
          iconDirection: "right",
          onClick: onPublish
        }), canCreate ? (0, _core.jsx)(_react.default.Fragment, null, (0, _core.jsx)(_netlifyCmsUiDefault.DropdownItem, {
          label: t('editor.editorToolbar.publishAndCreateNew'),
          icon: "add",
          onClick: onPublishAndNew
        }), (0, _core.jsx)(_netlifyCmsUiDefault.DropdownItem, {
          label: t('editor.editorToolbar.publishAndDuplicate'),
          icon: "add",
          onClick: onPublishAndDuplicate
        })) : null));
      }
      /**
       * Publish control for published workflow entry.
       */


      if (!isNewEntry) {
        return (0, _core.jsx)(_react.default.Fragment, null, this.renderDeployPreviewControls(t('editor.editorToolbar.deployButtonLabel')), (0, _core.jsx)(ToolbarDropdown, {
          dropdownTopOverlap: "40px",
          dropdownWidth: "150px",
          renderButton: () => (0, _core.jsx)(PublishedToolbarButton, null, isPersisting ? t('editor.editorToolbar.unpublishing') : t('editor.editorToolbar.published'))
        }, (0, _core.jsx)(_netlifyCmsUiDefault.DropdownItem, {
          label: t('editor.editorToolbar.unpublish'),
          icon: "arrow",
          iconDirection: "right",
          onClick: unPublish
        }), canCreate && (0, _core.jsx)(_netlifyCmsUiDefault.DropdownItem, {
          label: t('editor.editorToolbar.duplicate'),
          icon: "add",
          onClick: onDuplicate
        })));
      }
    });
  }

  componentDidMount() {
    const {
      isNewEntry,
      loadDeployPreview
    } = this.props;

    if (!isNewEntry) {
      loadDeployPreview({
        maxAttempts: 3
      });
    }
  }

  componentDidUpdate(prevProps) {
    const {
      isNewEntry,
      isPersisting,
      loadDeployPreview
    } = this.props;

    if (!isNewEntry && prevProps.isPersisting && !isPersisting) {
      loadDeployPreview({
        maxAttempts: 3
      });
    }
  }

  render() {
    const {
      user,
      hasChanged,
      displayUrl,
      collection,
      hasWorkflow,
      onLogoutClick,
      t
    } = this.props;
    return (0, _core.jsx)(ToolbarContainer, null, (0, _core.jsx)(ToolbarSectionBackLink, {
      to: "/collections/".concat(collection.get('name'))
    }, (0, _core.jsx)(BackArrow, null, "\u2190"), (0, _core.jsx)("div", null, (0, _core.jsx)(BackCollection, null, t('editor.editorToolbar.backCollection', {
      collectionLabel: collection.get('label')
    })), hasChanged ? (0, _core.jsx)(BackStatusChanged, null, t('editor.editorToolbar.unsavedChanges')) : (0, _core.jsx)(BackStatusUnchanged, null, t('editor.editorToolbar.changesSaved')))), (0, _core.jsx)(ToolbarSectionMain, null, (0, _core.jsx)(ToolbarSubSectionFirst, null, hasWorkflow ? this.renderWorkflowSaveControls() : this.renderSimpleSaveControls()), (0, _core.jsx)(ToolbarSubSectionLast, null, hasWorkflow ? this.renderWorkflowPublishControls() : this.renderSimplePublishControls())), (0, _core.jsx)(ToolbarSectionMeta, null, (0, _core.jsx)(_SettingsDropdown.default, {
      displayUrl: displayUrl,
      imageUrl: user.get('avatar_url'),
      onLogoutClick: onLogoutClick
    })));
  }

}

_defineProperty(EditorToolbar, "propTypes", {
  isPersisting: _propTypes.default.bool,
  isPublishing: _propTypes.default.bool,
  isUpdatingStatus: _propTypes.default.bool,
  isDeleting: _propTypes.default.bool,
  onPersist: _propTypes.default.func.isRequired,
  onPersistAndNew: _propTypes.default.func.isRequired,
  onPersistAndDuplicate: _propTypes.default.func.isRequired,
  showDelete: _propTypes.default.bool.isRequired,
  onDelete: _propTypes.default.func.isRequired,
  onDeleteUnpublishedChanges: _propTypes.default.func.isRequired,
  onChangeStatus: _propTypes.default.func.isRequired,
  onPublish: _propTypes.default.func.isRequired,
  unPublish: _propTypes.default.func.isRequired,
  onDuplicate: _propTypes.default.func.isRequired,
  onPublishAndNew: _propTypes.default.func.isRequired,
  onPublishAndDuplicate: _propTypes.default.func.isRequired,
  user: _reactImmutableProptypes.default.map.isRequired,
  hasChanged: _propTypes.default.bool,
  displayUrl: _propTypes.default.string,
  collection: _reactImmutableProptypes.default.map.isRequired,
  hasWorkflow: _propTypes.default.bool,
  useOpenAuthoring: _propTypes.default.bool,
  hasUnpublishedChanges: _propTypes.default.bool,
  isNewEntry: _propTypes.default.bool,
  isModification: _propTypes.default.bool,
  currentStatus: _propTypes.default.string,
  onLogoutClick: _propTypes.default.func.isRequired,
  deployPreview: _reactImmutableProptypes.default.map,
  loadDeployPreview: _propTypes.default.func.isRequired,
  t: _propTypes.default.func.isRequired
});

var _default = (0, _reactPolyglot.translate)()(EditorToolbar);

exports.default = _default;