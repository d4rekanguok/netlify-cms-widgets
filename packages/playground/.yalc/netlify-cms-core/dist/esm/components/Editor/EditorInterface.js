"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _core = require("@emotion/core");

var _reactSplitPane = _interopRequireDefault(require("react-split-pane"));

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _reactScrollSync = require("react-scroll-sync");

var _EditorControlPane = _interopRequireDefault(require("./EditorControlPane/EditorControlPane"));

var _EditorPreviewPane = _interopRequireDefault(require("./EditorPreviewPane/EditorPreviewPane"));

var _EditorToolbar = _interopRequireDefault(require("./EditorToolbar"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

const PREVIEW_VISIBLE = 'cms.preview-visible';
const SCROLL_SYNC_ENABLED = 'cms.scroll-sync-enabled';
const SPLIT_PANE_POSITION = 'cms.split-pane-position';
const styles = {
  splitPane: /*#__PURE__*/(0, _core.css)(_netlifyCmsUiDefault.components.card, ";border-radius:0;height:100%;;label:splitPane;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
  pane: process.env.NODE_ENV === "production" ? {
    name: "nq3sgi-pane",
    styles: "height:100%;overflow-y:auto;;label:pane;"
  } : {
    name: "nq3sgi-pane",
    styles: "height:100%;overflow-y:auto;;label:pane;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  }
};
const EditorToggle = ( /*#__PURE__*/0, _styledBase.default)(_netlifyCmsUiDefault.IconButton, {
  target: "e1pxf6c40",
  label: "EditorToggle"
})(process.env.NODE_ENV === "production" ? {
  name: "1upilqn",
  styles: "margin-bottom:12px;"
} : {
  name: "1upilqn",
  styles: "margin-bottom:12px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

const ReactSplitPaneGlobalStyles = () => (0, _core.jsx)(_core.Global, {
  styles: /*#__PURE__*/(0, _core.css)(".Resizer.vertical{width:21px;cursor:col-resize;position:relative;transition:background-color ", _netlifyCmsUiDefault.transitions.main, ";&:before{content:'';width:2px;height:100%;position:relative;left:10px;background-color:", _netlifyCmsUiDefault.colors.textFieldBorder, ";display:block;}&:hover,&:active{background-color:", _netlifyCmsUiDefault.colorsRaw.GrayLight, ";}};label:ReactSplitPaneGlobalStyles;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JJbnRlcmZhY2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa0NlIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JJbnRlcmZhY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgeyBjc3MsIEdsb2JhbCB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IFNwbGl0UGFuZSBmcm9tICdyZWFjdC1zcGxpdC1wYW5lJztcbmltcG9ydCB7IGNvbG9ycywgY29sb3JzUmF3LCBjb21wb25lbnRzLCB0cmFuc2l0aW9ucywgSWNvbkJ1dHRvbiB9IGZyb20gJ25ldGxpZnktY21zLXVpLWRlZmF1bHQnO1xuaW1wb3J0IHsgU2Nyb2xsU3luYywgU2Nyb2xsU3luY1BhbmUgfSBmcm9tICdyZWFjdC1zY3JvbGwtc3luYyc7XG5pbXBvcnQgRWRpdG9yQ29udHJvbFBhbmUgZnJvbSAnLi9FZGl0b3JDb250cm9sUGFuZS9FZGl0b3JDb250cm9sUGFuZSc7XG5pbXBvcnQgRWRpdG9yUHJldmlld1BhbmUgZnJvbSAnLi9FZGl0b3JQcmV2aWV3UGFuZS9FZGl0b3JQcmV2aWV3UGFuZSc7XG5pbXBvcnQgRWRpdG9yVG9vbGJhciBmcm9tICcuL0VkaXRvclRvb2xiYXInO1xuXG5jb25zdCBQUkVWSUVXX1ZJU0lCTEUgPSAnY21zLnByZXZpZXctdmlzaWJsZSc7XG5jb25zdCBTQ1JPTExfU1lOQ19FTkFCTEVEID0gJ2Ntcy5zY3JvbGwtc3luYy1lbmFibGVkJztcbmNvbnN0IFNQTElUX1BBTkVfUE9TSVRJT04gPSAnY21zLnNwbGl0LXBhbmUtcG9zaXRpb24nO1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gIHNwbGl0UGFuZTogY3NzYFxuICAgICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgICBib3JkZXItcmFkaXVzOiAwO1xuICAgIGhlaWdodDogMTAwJTtcbiAgYCxcbiAgcGFuZTogY3NzYFxuICAgIGhlaWdodDogMTAwJTtcbiAgICBvdmVyZmxvdy15OiBhdXRvO1xuICBgLFxufTtcblxuY29uc3QgRWRpdG9yVG9nZ2xlID0gc3R5bGVkKEljb25CdXR0b24pYFxuICBtYXJnaW4tYm90dG9tOiAxMnB4O1xuYDtcblxuY29uc3QgUmVhY3RTcGxpdFBhbmVHbG9iYWxTdHlsZXMgPSAoKSA9PiAoXG4gIDxHbG9iYWxcbiAgICBzdHlsZXM9e2Nzc2BcbiAgICAgIC5SZXNpemVyLnZlcnRpY2FsIHtcbiAgICAgICAgd2lkdGg6IDIxcHg7XG4gICAgICAgIGN1cnNvcjogY29sLXJlc2l6ZTtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yICR7dHJhbnNpdGlvbnMubWFpbn07XG5cbiAgICAgICAgJjpiZWZvcmUge1xuICAgICAgICAgIGNvbnRlbnQ6ICcnO1xuICAgICAgICAgIHdpZHRoOiAycHg7XG4gICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICBsZWZ0OiAxMHB4O1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLnRleHRGaWVsZEJvcmRlcn07XG4gICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgIH1cblxuICAgICAgICAmOmhvdmVyLFxuICAgICAgICAmOmFjdGl2ZSB7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnNSYXcuR3JheUxpZ2h0fTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIGB9XG4gIC8+XG4pO1xuXG5jb25zdCBTdHlsZWRTcGxpdFBhbmUgPSBzdHlsZWQoU3BsaXRQYW5lKWBcbiAgJHtzdHlsZXMuc3BsaXRQYW5lfTtcblxuICAvKipcbiAgICogUXVpY2sgZml4IGZvciBwcmV2aWV3IHBhbmUgbm90IGZ1bGx5IGRpc3BsYXlpbmcgaW4gU2FmYXJpXG4gICAqL1xuICAuUGFuZSB7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICB9XG5gO1xuXG5jb25zdCBOb1ByZXZpZXdDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICAke3N0eWxlcy5zcGxpdFBhbmV9O1xuYDtcblxuY29uc3QgRWRpdG9yQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgd2lkdGg6IDEwMCU7XG4gIG1pbi13aWR0aDogODAwcHg7XG4gIGhlaWdodDogMTAwJTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDA7XG4gIGxlZnQ6IDA7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHBhZGRpbmctdG9wOiA2NnB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5iYWNrZ3JvdW5kfTtcbmA7XG5cbmNvbnN0IEVkaXRvciA9IHN0eWxlZC5kaXZgXG4gIGhlaWdodDogMTAwJTtcbiAgbWFyZ2luOiAwIGF1dG87XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbmA7XG5cbmNvbnN0IFByZXZpZXdQYW5lQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgaGVpZ2h0OiAxMDAlO1xuICBvdmVyZmxvdy15OiBhdXRvO1xuICBwb2ludGVyLWV2ZW50czogJHtwcm9wcyA9PiAocHJvcHMuYmxvY2tFbnRyeSA/ICdub25lJyA6ICdhdXRvJyl9O1xuYDtcblxuY29uc3QgQ29udHJvbFBhbmVDb250YWluZXIgPSBzdHlsZWQoUHJldmlld1BhbmVDb250YWluZXIpYFxuICBwYWRkaW5nOiAwIDE2cHg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgb3ZlcmZsb3cteDogaGlkZGVuO1xuYDtcblxuY29uc3QgVmlld0NvbnRyb2xzID0gc3R5bGVkLmRpdmBcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDEwcHg7XG4gIHJpZ2h0OiAxMHB4O1xuICB6LWluZGV4OiAyOTk7XG5gO1xuXG5jbGFzcyBFZGl0b3JJbnRlcmZhY2UgZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0ZSA9IHtcbiAgICBzaG93RXZlbnRCbG9ja2VyOiBmYWxzZSxcbiAgICBwcmV2aWV3VmlzaWJsZTogbG9jYWxTdG9yYWdlLmdldEl0ZW0oUFJFVklFV19WSVNJQkxFKSAhPT0gJ2ZhbHNlJyxcbiAgICBzY3JvbGxTeW5jRW5hYmxlZDogbG9jYWxTdG9yYWdlLmdldEl0ZW0oU0NST0xMX1NZTkNfRU5BQkxFRCkgIT09ICdmYWxzZScsXG4gIH07XG5cbiAgaGFuZGxlU3BsaXRQYW5lRHJhZ1N0YXJ0ID0gKCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBzaG93RXZlbnRCbG9ja2VyOiB0cnVlIH0pO1xuICB9O1xuXG4gIGhhbmRsZVNwbGl0UGFuZURyYWdGaW5pc2hlZCA9ICgpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHsgc2hvd0V2ZW50QmxvY2tlcjogZmFsc2UgfSk7XG4gIH07XG5cbiAgaGFuZGxlT25QZXJzaXN0ID0gKG9wdHMgPSB7fSkgPT4ge1xuICAgIGNvbnN0IHsgY3JlYXRlTmV3ID0gZmFsc2UsIGR1cGxpY2F0ZSA9IGZhbHNlIH0gPSBvcHRzO1xuICAgIHRoaXMuY29udHJvbFBhbmVSZWYudmFsaWRhdGUoKTtcbiAgICB0aGlzLnByb3BzLm9uUGVyc2lzdCh7IGNyZWF0ZU5ldywgZHVwbGljYXRlIH0pO1xuICB9O1xuXG4gIGhhbmRsZU9uUHVibGlzaCA9IChvcHRzID0ge30pID0+IHtcbiAgICBjb25zdCB7IGNyZWF0ZU5ldyA9IGZhbHNlLCBkdXBsaWNhdGUgPSBmYWxzZSB9ID0gb3B0cztcbiAgICB0aGlzLmNvbnRyb2xQYW5lUmVmLnZhbGlkYXRlKCk7XG4gICAgdGhpcy5wcm9wcy5vblB1Ymxpc2goeyBjcmVhdGVOZXcsIGR1cGxpY2F0ZSB9KTtcbiAgfTtcblxuICBoYW5kbGVUb2dnbGVQcmV2aWV3ID0gKCkgPT4ge1xuICAgIGNvbnN0IG5ld1ByZXZpZXdWaXNpYmxlID0gIXRoaXMuc3RhdGUucHJldmlld1Zpc2libGU7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHByZXZpZXdWaXNpYmxlOiBuZXdQcmV2aWV3VmlzaWJsZSB9KTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShQUkVWSUVXX1ZJU0lCTEUsIG5ld1ByZXZpZXdWaXNpYmxlKTtcbiAgfTtcblxuICBoYW5kbGVUb2dnbGVTY3JvbGxTeW5jID0gKCkgPT4ge1xuICAgIGNvbnN0IG5ld1Njcm9sbFN5bmNFbmFibGVkID0gIXRoaXMuc3RhdGUuc2Nyb2xsU3luY0VuYWJsZWQ7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHNjcm9sbFN5bmNFbmFibGVkOiBuZXdTY3JvbGxTeW5jRW5hYmxlZCB9KTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShTQ1JPTExfU1lOQ19FTkFCTEVELCBuZXdTY3JvbGxTeW5jRW5hYmxlZCk7XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGNvbGxlY3Rpb24sXG4gICAgICBlbnRyeSxcbiAgICAgIGZpZWxkcyxcbiAgICAgIGZpZWxkc01ldGFEYXRhLFxuICAgICAgZmllbGRzRXJyb3JzLFxuICAgICAgb25DaGFuZ2UsXG4gICAgICBzaG93RGVsZXRlLFxuICAgICAgb25EZWxldGUsXG4gICAgICBvbkRlbGV0ZVVucHVibGlzaGVkQ2hhbmdlcyxcbiAgICAgIG9uQ2hhbmdlU3RhdHVzLFxuICAgICAgb25QdWJsaXNoLFxuICAgICAgdW5QdWJsaXNoLFxuICAgICAgb25EdXBsaWNhdGUsXG4gICAgICBvblZhbGlkYXRlLFxuICAgICAgdXNlcixcbiAgICAgIGhhc0NoYW5nZWQsXG4gICAgICBkaXNwbGF5VXJsLFxuICAgICAgaGFzV29ya2Zsb3csXG4gICAgICB1c2VPcGVuQXV0aG9yaW5nLFxuICAgICAgaGFzVW5wdWJsaXNoZWRDaGFuZ2VzLFxuICAgICAgaXNOZXdFbnRyeSxcbiAgICAgIGlzTW9kaWZpY2F0aW9uLFxuICAgICAgY3VycmVudFN0YXR1cyxcbiAgICAgIG9uTG9nb3V0Q2xpY2ssXG4gICAgICBsb2FkRGVwbG95UHJldmlldyxcbiAgICAgIGRlcGxveVByZXZpZXcsXG4gICAgICBkcmFmdEtleSxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IHsgcHJldmlld1Zpc2libGUsIHNjcm9sbFN5bmNFbmFibGVkLCBzaG93RXZlbnRCbG9ja2VyIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgY29uc3QgY29sbGVjdGlvblByZXZpZXdFbmFibGVkID0gY29sbGVjdGlvbi5nZXRJbihbJ2VkaXRvcicsICdwcmV2aWV3J10sIHRydWUpO1xuXG4gICAgY29uc3QgZWRpdG9yID0gKFxuICAgICAgPENvbnRyb2xQYW5lQ29udGFpbmVyIGJsb2NrRW50cnk9e3Nob3dFdmVudEJsb2NrZXJ9PlxuICAgICAgICA8RWRpdG9yQ29udHJvbFBhbmVcbiAgICAgICAgICBjb2xsZWN0aW9uPXtjb2xsZWN0aW9ufVxuICAgICAgICAgIGVudHJ5PXtlbnRyeX1cbiAgICAgICAgICBmaWVsZHM9e2ZpZWxkc31cbiAgICAgICAgICBmaWVsZHNNZXRhRGF0YT17ZmllbGRzTWV0YURhdGF9XG4gICAgICAgICAgZmllbGRzRXJyb3JzPXtmaWVsZHNFcnJvcnN9XG4gICAgICAgICAgb25DaGFuZ2U9e29uQ2hhbmdlfVxuICAgICAgICAgIG9uVmFsaWRhdGU9e29uVmFsaWRhdGV9XG4gICAgICAgICAgcmVmPXtjID0+ICh0aGlzLmNvbnRyb2xQYW5lUmVmID0gYyl9XG4gICAgICAgIC8+XG4gICAgICA8L0NvbnRyb2xQYW5lQ29udGFpbmVyPlxuICAgICk7XG5cbiAgICBjb25zdCBlZGl0b3JXaXRoUHJldmlldyA9IChcbiAgICAgIDxTY3JvbGxTeW5jIGVuYWJsZWQ9e3RoaXMuc3RhdGUuc2Nyb2xsU3luY0VuYWJsZWR9PlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxSZWFjdFNwbGl0UGFuZUdsb2JhbFN0eWxlcyAvPlxuICAgICAgICAgIDxTdHlsZWRTcGxpdFBhbmVcbiAgICAgICAgICAgIG1heFNpemU9ey0xMDB9XG4gICAgICAgICAgICBkZWZhdWx0U2l6ZT17cGFyc2VJbnQobG9jYWxTdG9yYWdlLmdldEl0ZW0oU1BMSVRfUEFORV9QT1NJVElPTiksIDEwKSB8fCAnNTAlJ31cbiAgICAgICAgICAgIG9uQ2hhbmdlPXtzaXplID0+IGxvY2FsU3RvcmFnZS5zZXRJdGVtKFNQTElUX1BBTkVfUE9TSVRJT04sIHNpemUpfVxuICAgICAgICAgICAgb25EcmFnU3RhcnRlZD17dGhpcy5oYW5kbGVTcGxpdFBhbmVEcmFnU3RhcnR9XG4gICAgICAgICAgICBvbkRyYWdGaW5pc2hlZD17dGhpcy5oYW5kbGVTcGxpdFBhbmVEcmFnRmluaXNoZWR9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPFNjcm9sbFN5bmNQYW5lPntlZGl0b3J9PC9TY3JvbGxTeW5jUGFuZT5cbiAgICAgICAgICAgIDxQcmV2aWV3UGFuZUNvbnRhaW5lciBibG9ja0VudHJ5PXtzaG93RXZlbnRCbG9ja2VyfT5cbiAgICAgICAgICAgICAgPEVkaXRvclByZXZpZXdQYW5lXG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbj17Y29sbGVjdGlvbn1cbiAgICAgICAgICAgICAgICBlbnRyeT17ZW50cnl9XG4gICAgICAgICAgICAgICAgZmllbGRzPXtmaWVsZHN9XG4gICAgICAgICAgICAgICAgZmllbGRzTWV0YURhdGE9e2ZpZWxkc01ldGFEYXRhfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9QcmV2aWV3UGFuZUNvbnRhaW5lcj5cbiAgICAgICAgICA8L1N0eWxlZFNwbGl0UGFuZT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L1Njcm9sbFN5bmM+XG4gICAgKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8RWRpdG9yQ29udGFpbmVyPlxuICAgICAgICA8RWRpdG9yVG9vbGJhclxuICAgICAgICAgIGlzUGVyc2lzdGluZz17ZW50cnkuZ2V0KCdpc1BlcnNpc3RpbmcnKX1cbiAgICAgICAgICBpc1B1Ymxpc2hpbmc9e2VudHJ5LmdldCgnaXNQdWJsaXNoaW5nJyl9XG4gICAgICAgICAgaXNVcGRhdGluZ1N0YXR1cz17ZW50cnkuZ2V0KCdpc1VwZGF0aW5nU3RhdHVzJyl9XG4gICAgICAgICAgaXNEZWxldGluZz17ZW50cnkuZ2V0KCdpc0RlbGV0aW5nJyl9XG4gICAgICAgICAgb25QZXJzaXN0PXt0aGlzLmhhbmRsZU9uUGVyc2lzdH1cbiAgICAgICAgICBvblBlcnNpc3RBbmROZXc9eygpID0+IHRoaXMuaGFuZGxlT25QZXJzaXN0KHsgY3JlYXRlTmV3OiB0cnVlIH0pfVxuICAgICAgICAgIG9uUGVyc2lzdEFuZER1cGxpY2F0ZT17KCkgPT4gdGhpcy5oYW5kbGVPblBlcnNpc3QoeyBjcmVhdGVOZXc6IHRydWUsIGR1cGxpY2F0ZTogdHJ1ZSB9KX1cbiAgICAgICAgICBvbkRlbGV0ZT17b25EZWxldGV9XG4gICAgICAgICAgb25EZWxldGVVbnB1Ymxpc2hlZENoYW5nZXM9e29uRGVsZXRlVW5wdWJsaXNoZWRDaGFuZ2VzfVxuICAgICAgICAgIG9uQ2hhbmdlU3RhdHVzPXtvbkNoYW5nZVN0YXR1c31cbiAgICAgICAgICBzaG93RGVsZXRlPXtzaG93RGVsZXRlfVxuICAgICAgICAgIG9uUHVibGlzaD17b25QdWJsaXNofVxuICAgICAgICAgIHVuUHVibGlzaD17dW5QdWJsaXNofVxuICAgICAgICAgIG9uRHVwbGljYXRlPXtvbkR1cGxpY2F0ZX1cbiAgICAgICAgICBvblB1Ymxpc2hBbmROZXc9eygpID0+IHRoaXMuaGFuZGxlT25QdWJsaXNoKHsgY3JlYXRlTmV3OiB0cnVlIH0pfVxuICAgICAgICAgIG9uUHVibGlzaEFuZER1cGxpY2F0ZT17KCkgPT4gdGhpcy5oYW5kbGVPblB1Ymxpc2goeyBjcmVhdGVOZXc6IHRydWUsIGR1cGxpY2F0ZTogdHJ1ZSB9KX1cbiAgICAgICAgICB1c2VyPXt1c2VyfVxuICAgICAgICAgIGhhc0NoYW5nZWQ9e2hhc0NoYW5nZWR9XG4gICAgICAgICAgZGlzcGxheVVybD17ZGlzcGxheVVybH1cbiAgICAgICAgICBjb2xsZWN0aW9uPXtjb2xsZWN0aW9ufVxuICAgICAgICAgIGhhc1dvcmtmbG93PXtoYXNXb3JrZmxvd31cbiAgICAgICAgICB1c2VPcGVuQXV0aG9yaW5nPXt1c2VPcGVuQXV0aG9yaW5nfVxuICAgICAgICAgIGhhc1VucHVibGlzaGVkQ2hhbmdlcz17aGFzVW5wdWJsaXNoZWRDaGFuZ2VzfVxuICAgICAgICAgIGlzTmV3RW50cnk9e2lzTmV3RW50cnl9XG4gICAgICAgICAgaXNNb2RpZmljYXRpb249e2lzTW9kaWZpY2F0aW9ufVxuICAgICAgICAgIGN1cnJlbnRTdGF0dXM9e2N1cnJlbnRTdGF0dXN9XG4gICAgICAgICAgb25Mb2dvdXRDbGljaz17b25Mb2dvdXRDbGlja31cbiAgICAgICAgICBsb2FkRGVwbG95UHJldmlldz17bG9hZERlcGxveVByZXZpZXd9XG4gICAgICAgICAgZGVwbG95UHJldmlldz17ZGVwbG95UHJldmlld31cbiAgICAgICAgLz5cbiAgICAgICAgPEVkaXRvciBrZXk9e2RyYWZ0S2V5fT5cbiAgICAgICAgICA8Vmlld0NvbnRyb2xzPlxuICAgICAgICAgICAge2NvbGxlY3Rpb25QcmV2aWV3RW5hYmxlZCAmJiAoXG4gICAgICAgICAgICAgIDxFZGl0b3JUb2dnbGVcbiAgICAgICAgICAgICAgICBpc0FjdGl2ZT17cHJldmlld1Zpc2libGV9XG4gICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVUb2dnbGVQcmV2aWV3fVxuICAgICAgICAgICAgICAgIHNpemU9XCJsYXJnZVwiXG4gICAgICAgICAgICAgICAgdHlwZT1cImV5ZVwiXG4gICAgICAgICAgICAgICAgdGl0bGU9XCJUb2dnbGUgcHJldmlld1wiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAge2NvbGxlY3Rpb25QcmV2aWV3RW5hYmxlZCAmJiBwcmV2aWV3VmlzaWJsZSAmJiAoXG4gICAgICAgICAgICAgIDxFZGl0b3JUb2dnbGVcbiAgICAgICAgICAgICAgICBpc0FjdGl2ZT17c2Nyb2xsU3luY0VuYWJsZWR9XG4gICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVUb2dnbGVTY3JvbGxTeW5jfVxuICAgICAgICAgICAgICAgIHNpemU9XCJsYXJnZVwiXG4gICAgICAgICAgICAgICAgdHlwZT1cInNjcm9sbFwiXG4gICAgICAgICAgICAgICAgdGl0bGU9XCJTeW5jIHNjcm9sbGluZ1wiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvVmlld0NvbnRyb2xzPlxuICAgICAgICAgIHtjb2xsZWN0aW9uUHJldmlld0VuYWJsZWQgJiYgdGhpcy5zdGF0ZS5wcmV2aWV3VmlzaWJsZSA/IChcbiAgICAgICAgICAgIGVkaXRvcldpdGhQcmV2aWV3XG4gICAgICAgICAgKSA6IChcbiAgICAgICAgICAgIDxOb1ByZXZpZXdDb250YWluZXI+e2VkaXRvcn08L05vUHJldmlld0NvbnRhaW5lcj5cbiAgICAgICAgICApfVxuICAgICAgICA8L0VkaXRvcj5cbiAgICAgIDwvRWRpdG9yQ29udGFpbmVyPlxuICAgICk7XG4gIH1cbn1cblxuRWRpdG9ySW50ZXJmYWNlLnByb3BUeXBlcyA9IHtcbiAgY29sbGVjdGlvbjogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICBlbnRyeTogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICBmaWVsZHM6IEltbXV0YWJsZVByb3BUeXBlcy5saXN0LmlzUmVxdWlyZWQsXG4gIGZpZWxkc01ldGFEYXRhOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gIGZpZWxkc0Vycm9yczogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgb25WYWxpZGF0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgb25QZXJzaXN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBzaG93RGVsZXRlOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICBvbkRlbGV0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgb25EZWxldGVVbnB1Ymxpc2hlZENoYW5nZXM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG9uUHVibGlzaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgdW5QdWJsaXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvbkR1cGxpY2F0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgb25DaGFuZ2VTdGF0dXM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIHVzZXI6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgaGFzQ2hhbmdlZDogUHJvcFR5cGVzLmJvb2wsXG4gIGRpc3BsYXlVcmw6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGhhc1dvcmtmbG93OiBQcm9wVHlwZXMuYm9vbCxcbiAgdXNlT3BlbkF1dGhvcmluZzogUHJvcFR5cGVzLmJvb2wsXG4gIGhhc1VucHVibGlzaGVkQ2hhbmdlczogUHJvcFR5cGVzLmJvb2wsXG4gIGlzTmV3RW50cnk6IFByb3BUeXBlcy5ib29sLFxuICBpc01vZGlmaWNhdGlvbjogUHJvcFR5cGVzLmJvb2wsXG4gIGN1cnJlbnRTdGF0dXM6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG9uTG9nb3V0Q2xpY2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGRlcGxveVByZXZpZXc6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAsXG4gIGxvYWREZXBsb3lQcmV2aWV3OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBkcmFmdEtleTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgRWRpdG9ySW50ZXJmYWNlO1xuIl19 */"))
});

const StyledSplitPane = ( /*#__PURE__*/0, _styledBase.default)(_reactSplitPane.default, {
  target: "e1pxf6c41",
  label: "StyledSplitPane"
})(styles.splitPane, ";.Pane{height:100%;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JJbnRlcmZhY2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNER5QyIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9FZGl0b3IvRWRpdG9ySW50ZXJmYWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgSW1tdXRhYmxlUHJvcFR5cGVzIGZyb20gJ3JlYWN0LWltbXV0YWJsZS1wcm9wdHlwZXMnO1xuaW1wb3J0IHsgY3NzLCBHbG9iYWwgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCBTcGxpdFBhbmUgZnJvbSAncmVhY3Qtc3BsaXQtcGFuZSc7XG5pbXBvcnQgeyBjb2xvcnMsIGNvbG9yc1JhdywgY29tcG9uZW50cywgdHJhbnNpdGlvbnMsIEljb25CdXR0b24gfSBmcm9tICduZXRsaWZ5LWNtcy11aS1kZWZhdWx0JztcbmltcG9ydCB7IFNjcm9sbFN5bmMsIFNjcm9sbFN5bmNQYW5lIH0gZnJvbSAncmVhY3Qtc2Nyb2xsLXN5bmMnO1xuaW1wb3J0IEVkaXRvckNvbnRyb2xQYW5lIGZyb20gJy4vRWRpdG9yQ29udHJvbFBhbmUvRWRpdG9yQ29udHJvbFBhbmUnO1xuaW1wb3J0IEVkaXRvclByZXZpZXdQYW5lIGZyb20gJy4vRWRpdG9yUHJldmlld1BhbmUvRWRpdG9yUHJldmlld1BhbmUnO1xuaW1wb3J0IEVkaXRvclRvb2xiYXIgZnJvbSAnLi9FZGl0b3JUb29sYmFyJztcblxuY29uc3QgUFJFVklFV19WSVNJQkxFID0gJ2Ntcy5wcmV2aWV3LXZpc2libGUnO1xuY29uc3QgU0NST0xMX1NZTkNfRU5BQkxFRCA9ICdjbXMuc2Nyb2xsLXN5bmMtZW5hYmxlZCc7XG5jb25zdCBTUExJVF9QQU5FX1BPU0lUSU9OID0gJ2Ntcy5zcGxpdC1wYW5lLXBvc2l0aW9uJztcblxuY29uc3Qgc3R5bGVzID0ge1xuICBzcGxpdFBhbmU6IGNzc2BcbiAgICAke2NvbXBvbmVudHMuY2FyZH07XG4gICAgYm9yZGVyLXJhZGl1czogMDtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gIGAsXG4gIHBhbmU6IGNzc2BcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgb3ZlcmZsb3cteTogYXV0bztcbiAgYCxcbn07XG5cbmNvbnN0IEVkaXRvclRvZ2dsZSA9IHN0eWxlZChJY29uQnV0dG9uKWBcbiAgbWFyZ2luLWJvdHRvbTogMTJweDtcbmA7XG5cbmNvbnN0IFJlYWN0U3BsaXRQYW5lR2xvYmFsU3R5bGVzID0gKCkgPT4gKFxuICA8R2xvYmFsXG4gICAgc3R5bGVzPXtjc3NgXG4gICAgICAuUmVzaXplci52ZXJ0aWNhbCB7XG4gICAgICAgIHdpZHRoOiAyMXB4O1xuICAgICAgICBjdXJzb3I6IGNvbC1yZXNpemU7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAke3RyYW5zaXRpb25zLm1haW59O1xuXG4gICAgICAgICY6YmVmb3JlIHtcbiAgICAgICAgICBjb250ZW50OiAnJztcbiAgICAgICAgICB3aWR0aDogMnB4O1xuICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICAgbGVmdDogMTBweDtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy50ZXh0RmllbGRCb3JkZXJ9O1xuICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICB9XG5cbiAgICAgICAgJjpob3ZlcixcbiAgICAgICAgJjphY3RpdmUge1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzUmF3LkdyYXlMaWdodH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBgfVxuICAvPlxuKTtcblxuY29uc3QgU3R5bGVkU3BsaXRQYW5lID0gc3R5bGVkKFNwbGl0UGFuZSlgXG4gICR7c3R5bGVzLnNwbGl0UGFuZX07XG5cbiAgLyoqXG4gICAqIFF1aWNrIGZpeCBmb3IgcHJldmlldyBwYW5lIG5vdCBmdWxseSBkaXNwbGF5aW5nIGluIFNhZmFyaVxuICAgKi9cbiAgLlBhbmUge1xuICAgIGhlaWdodDogMTAwJTtcbiAgfVxuYDtcblxuY29uc3QgTm9QcmV2aWV3Q29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgJHtzdHlsZXMuc3BsaXRQYW5lfTtcbmA7XG5cbmNvbnN0IEVkaXRvckNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiAxMDAlO1xuICBtaW4td2lkdGg6IDgwMHB4O1xuICBoZWlnaHQ6IDEwMCU7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBwYWRkaW5nLXRvcDogNjZweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuYmFja2dyb3VuZH07XG5gO1xuXG5jb25zdCBFZGl0b3IgPSBzdHlsZWQuZGl2YFxuICBoZWlnaHQ6IDEwMCU7XG4gIG1hcmdpbjogMCBhdXRvO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG5gO1xuXG5jb25zdCBQcmV2aWV3UGFuZUNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIGhlaWdodDogMTAwJTtcbiAgb3ZlcmZsb3cteTogYXV0bztcbiAgcG9pbnRlci1ldmVudHM6ICR7cHJvcHMgPT4gKHByb3BzLmJsb2NrRW50cnkgPyAnbm9uZScgOiAnYXV0bycpfTtcbmA7XG5cbmNvbnN0IENvbnRyb2xQYW5lQ29udGFpbmVyID0gc3R5bGVkKFByZXZpZXdQYW5lQ29udGFpbmVyKWBcbiAgcGFkZGluZzogMCAxNnB4O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIG92ZXJmbG93LXg6IGhpZGRlbjtcbmA7XG5cbmNvbnN0IFZpZXdDb250cm9scyA9IHN0eWxlZC5kaXZgXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAxMHB4O1xuICByaWdodDogMTBweDtcbiAgei1pbmRleDogMjk5O1xuYDtcblxuY2xhc3MgRWRpdG9ySW50ZXJmYWNlIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGUgPSB7XG4gICAgc2hvd0V2ZW50QmxvY2tlcjogZmFsc2UsXG4gICAgcHJldmlld1Zpc2libGU6IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFBSRVZJRVdfVklTSUJMRSkgIT09ICdmYWxzZScsXG4gICAgc2Nyb2xsU3luY0VuYWJsZWQ6IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFNDUk9MTF9TWU5DX0VOQUJMRUQpICE9PSAnZmFsc2UnLFxuICB9O1xuXG4gIGhhbmRsZVNwbGl0UGFuZURyYWdTdGFydCA9ICgpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHsgc2hvd0V2ZW50QmxvY2tlcjogdHJ1ZSB9KTtcbiAgfTtcblxuICBoYW5kbGVTcGxpdFBhbmVEcmFnRmluaXNoZWQgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHNob3dFdmVudEJsb2NrZXI6IGZhbHNlIH0pO1xuICB9O1xuXG4gIGhhbmRsZU9uUGVyc2lzdCA9IChvcHRzID0ge30pID0+IHtcbiAgICBjb25zdCB7IGNyZWF0ZU5ldyA9IGZhbHNlLCBkdXBsaWNhdGUgPSBmYWxzZSB9ID0gb3B0cztcbiAgICB0aGlzLmNvbnRyb2xQYW5lUmVmLnZhbGlkYXRlKCk7XG4gICAgdGhpcy5wcm9wcy5vblBlcnNpc3QoeyBjcmVhdGVOZXcsIGR1cGxpY2F0ZSB9KTtcbiAgfTtcblxuICBoYW5kbGVPblB1Ymxpc2ggPSAob3B0cyA9IHt9KSA9PiB7XG4gICAgY29uc3QgeyBjcmVhdGVOZXcgPSBmYWxzZSwgZHVwbGljYXRlID0gZmFsc2UgfSA9IG9wdHM7XG4gICAgdGhpcy5jb250cm9sUGFuZVJlZi52YWxpZGF0ZSgpO1xuICAgIHRoaXMucHJvcHMub25QdWJsaXNoKHsgY3JlYXRlTmV3LCBkdXBsaWNhdGUgfSk7XG4gIH07XG5cbiAgaGFuZGxlVG9nZ2xlUHJldmlldyA9ICgpID0+IHtcbiAgICBjb25zdCBuZXdQcmV2aWV3VmlzaWJsZSA9ICF0aGlzLnN0YXRlLnByZXZpZXdWaXNpYmxlO1xuICAgIHRoaXMuc2V0U3RhdGUoeyBwcmV2aWV3VmlzaWJsZTogbmV3UHJldmlld1Zpc2libGUgfSk7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oUFJFVklFV19WSVNJQkxFLCBuZXdQcmV2aWV3VmlzaWJsZSk7XG4gIH07XG5cbiAgaGFuZGxlVG9nZ2xlU2Nyb2xsU3luYyA9ICgpID0+IHtcbiAgICBjb25zdCBuZXdTY3JvbGxTeW5jRW5hYmxlZCA9ICF0aGlzLnN0YXRlLnNjcm9sbFN5bmNFbmFibGVkO1xuICAgIHRoaXMuc2V0U3RhdGUoeyBzY3JvbGxTeW5jRW5hYmxlZDogbmV3U2Nyb2xsU3luY0VuYWJsZWQgfSk7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oU0NST0xMX1NZTkNfRU5BQkxFRCwgbmV3U2Nyb2xsU3luY0VuYWJsZWQpO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBjb2xsZWN0aW9uLFxuICAgICAgZW50cnksXG4gICAgICBmaWVsZHMsXG4gICAgICBmaWVsZHNNZXRhRGF0YSxcbiAgICAgIGZpZWxkc0Vycm9ycyxcbiAgICAgIG9uQ2hhbmdlLFxuICAgICAgc2hvd0RlbGV0ZSxcbiAgICAgIG9uRGVsZXRlLFxuICAgICAgb25EZWxldGVVbnB1Ymxpc2hlZENoYW5nZXMsXG4gICAgICBvbkNoYW5nZVN0YXR1cyxcbiAgICAgIG9uUHVibGlzaCxcbiAgICAgIHVuUHVibGlzaCxcbiAgICAgIG9uRHVwbGljYXRlLFxuICAgICAgb25WYWxpZGF0ZSxcbiAgICAgIHVzZXIsXG4gICAgICBoYXNDaGFuZ2VkLFxuICAgICAgZGlzcGxheVVybCxcbiAgICAgIGhhc1dvcmtmbG93LFxuICAgICAgdXNlT3BlbkF1dGhvcmluZyxcbiAgICAgIGhhc1VucHVibGlzaGVkQ2hhbmdlcyxcbiAgICAgIGlzTmV3RW50cnksXG4gICAgICBpc01vZGlmaWNhdGlvbixcbiAgICAgIGN1cnJlbnRTdGF0dXMsXG4gICAgICBvbkxvZ291dENsaWNrLFxuICAgICAgbG9hZERlcGxveVByZXZpZXcsXG4gICAgICBkZXBsb3lQcmV2aWV3LFxuICAgICAgZHJhZnRLZXksXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCB7IHByZXZpZXdWaXNpYmxlLCBzY3JvbGxTeW5jRW5hYmxlZCwgc2hvd0V2ZW50QmxvY2tlciB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGNvbnN0IGNvbGxlY3Rpb25QcmV2aWV3RW5hYmxlZCA9IGNvbGxlY3Rpb24uZ2V0SW4oWydlZGl0b3InLCAncHJldmlldyddLCB0cnVlKTtcblxuICAgIGNvbnN0IGVkaXRvciA9IChcbiAgICAgIDxDb250cm9sUGFuZUNvbnRhaW5lciBibG9ja0VudHJ5PXtzaG93RXZlbnRCbG9ja2VyfT5cbiAgICAgICAgPEVkaXRvckNvbnRyb2xQYW5lXG4gICAgICAgICAgY29sbGVjdGlvbj17Y29sbGVjdGlvbn1cbiAgICAgICAgICBlbnRyeT17ZW50cnl9XG4gICAgICAgICAgZmllbGRzPXtmaWVsZHN9XG4gICAgICAgICAgZmllbGRzTWV0YURhdGE9e2ZpZWxkc01ldGFEYXRhfVxuICAgICAgICAgIGZpZWxkc0Vycm9ycz17ZmllbGRzRXJyb3JzfVxuICAgICAgICAgIG9uQ2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgICAgICBvblZhbGlkYXRlPXtvblZhbGlkYXRlfVxuICAgICAgICAgIHJlZj17YyA9PiAodGhpcy5jb250cm9sUGFuZVJlZiA9IGMpfVxuICAgICAgICAvPlxuICAgICAgPC9Db250cm9sUGFuZUNvbnRhaW5lcj5cbiAgICApO1xuXG4gICAgY29uc3QgZWRpdG9yV2l0aFByZXZpZXcgPSAoXG4gICAgICA8U2Nyb2xsU3luYyBlbmFibGVkPXt0aGlzLnN0YXRlLnNjcm9sbFN5bmNFbmFibGVkfT5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8UmVhY3RTcGxpdFBhbmVHbG9iYWxTdHlsZXMgLz5cbiAgICAgICAgICA8U3R5bGVkU3BsaXRQYW5lXG4gICAgICAgICAgICBtYXhTaXplPXstMTAwfVxuICAgICAgICAgICAgZGVmYXVsdFNpemU9e3BhcnNlSW50KGxvY2FsU3RvcmFnZS5nZXRJdGVtKFNQTElUX1BBTkVfUE9TSVRJT04pLCAxMCkgfHwgJzUwJSd9XG4gICAgICAgICAgICBvbkNoYW5nZT17c2l6ZSA9PiBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShTUExJVF9QQU5FX1BPU0lUSU9OLCBzaXplKX1cbiAgICAgICAgICAgIG9uRHJhZ1N0YXJ0ZWQ9e3RoaXMuaGFuZGxlU3BsaXRQYW5lRHJhZ1N0YXJ0fVxuICAgICAgICAgICAgb25EcmFnRmluaXNoZWQ9e3RoaXMuaGFuZGxlU3BsaXRQYW5lRHJhZ0ZpbmlzaGVkfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxTY3JvbGxTeW5jUGFuZT57ZWRpdG9yfTwvU2Nyb2xsU3luY1BhbmU+XG4gICAgICAgICAgICA8UHJldmlld1BhbmVDb250YWluZXIgYmxvY2tFbnRyeT17c2hvd0V2ZW50QmxvY2tlcn0+XG4gICAgICAgICAgICAgIDxFZGl0b3JQcmV2aWV3UGFuZVxuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb249e2NvbGxlY3Rpb259XG4gICAgICAgICAgICAgICAgZW50cnk9e2VudHJ5fVxuICAgICAgICAgICAgICAgIGZpZWxkcz17ZmllbGRzfVxuICAgICAgICAgICAgICAgIGZpZWxkc01ldGFEYXRhPXtmaWVsZHNNZXRhRGF0YX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvUHJldmlld1BhbmVDb250YWluZXI+XG4gICAgICAgICAgPC9TdHlsZWRTcGxpdFBhbmU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9TY3JvbGxTeW5jPlxuICAgICk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPEVkaXRvckNvbnRhaW5lcj5cbiAgICAgICAgPEVkaXRvclRvb2xiYXJcbiAgICAgICAgICBpc1BlcnNpc3Rpbmc9e2VudHJ5LmdldCgnaXNQZXJzaXN0aW5nJyl9XG4gICAgICAgICAgaXNQdWJsaXNoaW5nPXtlbnRyeS5nZXQoJ2lzUHVibGlzaGluZycpfVxuICAgICAgICAgIGlzVXBkYXRpbmdTdGF0dXM9e2VudHJ5LmdldCgnaXNVcGRhdGluZ1N0YXR1cycpfVxuICAgICAgICAgIGlzRGVsZXRpbmc9e2VudHJ5LmdldCgnaXNEZWxldGluZycpfVxuICAgICAgICAgIG9uUGVyc2lzdD17dGhpcy5oYW5kbGVPblBlcnNpc3R9XG4gICAgICAgICAgb25QZXJzaXN0QW5kTmV3PXsoKSA9PiB0aGlzLmhhbmRsZU9uUGVyc2lzdCh7IGNyZWF0ZU5ldzogdHJ1ZSB9KX1cbiAgICAgICAgICBvblBlcnNpc3RBbmREdXBsaWNhdGU9eygpID0+IHRoaXMuaGFuZGxlT25QZXJzaXN0KHsgY3JlYXRlTmV3OiB0cnVlLCBkdXBsaWNhdGU6IHRydWUgfSl9XG4gICAgICAgICAgb25EZWxldGU9e29uRGVsZXRlfVxuICAgICAgICAgIG9uRGVsZXRlVW5wdWJsaXNoZWRDaGFuZ2VzPXtvbkRlbGV0ZVVucHVibGlzaGVkQ2hhbmdlc31cbiAgICAgICAgICBvbkNoYW5nZVN0YXR1cz17b25DaGFuZ2VTdGF0dXN9XG4gICAgICAgICAgc2hvd0RlbGV0ZT17c2hvd0RlbGV0ZX1cbiAgICAgICAgICBvblB1Ymxpc2g9e29uUHVibGlzaH1cbiAgICAgICAgICB1blB1Ymxpc2g9e3VuUHVibGlzaH1cbiAgICAgICAgICBvbkR1cGxpY2F0ZT17b25EdXBsaWNhdGV9XG4gICAgICAgICAgb25QdWJsaXNoQW5kTmV3PXsoKSA9PiB0aGlzLmhhbmRsZU9uUHVibGlzaCh7IGNyZWF0ZU5ldzogdHJ1ZSB9KX1cbiAgICAgICAgICBvblB1Ymxpc2hBbmREdXBsaWNhdGU9eygpID0+IHRoaXMuaGFuZGxlT25QdWJsaXNoKHsgY3JlYXRlTmV3OiB0cnVlLCBkdXBsaWNhdGU6IHRydWUgfSl9XG4gICAgICAgICAgdXNlcj17dXNlcn1cbiAgICAgICAgICBoYXNDaGFuZ2VkPXtoYXNDaGFuZ2VkfVxuICAgICAgICAgIGRpc3BsYXlVcmw9e2Rpc3BsYXlVcmx9XG4gICAgICAgICAgY29sbGVjdGlvbj17Y29sbGVjdGlvbn1cbiAgICAgICAgICBoYXNXb3JrZmxvdz17aGFzV29ya2Zsb3d9XG4gICAgICAgICAgdXNlT3BlbkF1dGhvcmluZz17dXNlT3BlbkF1dGhvcmluZ31cbiAgICAgICAgICBoYXNVbnB1Ymxpc2hlZENoYW5nZXM9e2hhc1VucHVibGlzaGVkQ2hhbmdlc31cbiAgICAgICAgICBpc05ld0VudHJ5PXtpc05ld0VudHJ5fVxuICAgICAgICAgIGlzTW9kaWZpY2F0aW9uPXtpc01vZGlmaWNhdGlvbn1cbiAgICAgICAgICBjdXJyZW50U3RhdHVzPXtjdXJyZW50U3RhdHVzfVxuICAgICAgICAgIG9uTG9nb3V0Q2xpY2s9e29uTG9nb3V0Q2xpY2t9XG4gICAgICAgICAgbG9hZERlcGxveVByZXZpZXc9e2xvYWREZXBsb3lQcmV2aWV3fVxuICAgICAgICAgIGRlcGxveVByZXZpZXc9e2RlcGxveVByZXZpZXd9XG4gICAgICAgIC8+XG4gICAgICAgIDxFZGl0b3Iga2V5PXtkcmFmdEtleX0+XG4gICAgICAgICAgPFZpZXdDb250cm9scz5cbiAgICAgICAgICAgIHtjb2xsZWN0aW9uUHJldmlld0VuYWJsZWQgJiYgKFxuICAgICAgICAgICAgICA8RWRpdG9yVG9nZ2xlXG4gICAgICAgICAgICAgICAgaXNBY3RpdmU9e3ByZXZpZXdWaXNpYmxlfVxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuaGFuZGxlVG9nZ2xlUHJldmlld31cbiAgICAgICAgICAgICAgICBzaXplPVwibGFyZ2VcIlxuICAgICAgICAgICAgICAgIHR5cGU9XCJleWVcIlxuICAgICAgICAgICAgICAgIHRpdGxlPVwiVG9nZ2xlIHByZXZpZXdcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIHtjb2xsZWN0aW9uUHJldmlld0VuYWJsZWQgJiYgcHJldmlld1Zpc2libGUgJiYgKFxuICAgICAgICAgICAgICA8RWRpdG9yVG9nZ2xlXG4gICAgICAgICAgICAgICAgaXNBY3RpdmU9e3Njcm9sbFN5bmNFbmFibGVkfVxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuaGFuZGxlVG9nZ2xlU2Nyb2xsU3luY31cbiAgICAgICAgICAgICAgICBzaXplPVwibGFyZ2VcIlxuICAgICAgICAgICAgICAgIHR5cGU9XCJzY3JvbGxcIlxuICAgICAgICAgICAgICAgIHRpdGxlPVwiU3luYyBzY3JvbGxpbmdcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L1ZpZXdDb250cm9scz5cbiAgICAgICAgICB7Y29sbGVjdGlvblByZXZpZXdFbmFibGVkICYmIHRoaXMuc3RhdGUucHJldmlld1Zpc2libGUgPyAoXG4gICAgICAgICAgICBlZGl0b3JXaXRoUHJldmlld1xuICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICA8Tm9QcmV2aWV3Q29udGFpbmVyPntlZGl0b3J9PC9Ob1ByZXZpZXdDb250YWluZXI+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9FZGl0b3I+XG4gICAgICA8L0VkaXRvckNvbnRhaW5lcj5cbiAgICApO1xuICB9XG59XG5cbkVkaXRvckludGVyZmFjZS5wcm9wVHlwZXMgPSB7XG4gIGNvbGxlY3Rpb246IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgZW50cnk6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgZmllbGRzOiBJbW11dGFibGVQcm9wVHlwZXMubGlzdC5pc1JlcXVpcmVkLFxuICBmaWVsZHNNZXRhRGF0YTogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICBmaWVsZHNFcnJvcnM6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG9uVmFsaWRhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG9uUGVyc2lzdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgc2hvd0RlbGV0ZTogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgb25EZWxldGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG9uRGVsZXRlVW5wdWJsaXNoZWRDaGFuZ2VzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvblB1Ymxpc2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIHVuUHVibGlzaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgb25EdXBsaWNhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG9uQ2hhbmdlU3RhdHVzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB1c2VyOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gIGhhc0NoYW5nZWQ6IFByb3BUeXBlcy5ib29sLFxuICBkaXNwbGF5VXJsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBoYXNXb3JrZmxvdzogUHJvcFR5cGVzLmJvb2wsXG4gIHVzZU9wZW5BdXRob3Jpbmc6IFByb3BUeXBlcy5ib29sLFxuICBoYXNVbnB1Ymxpc2hlZENoYW5nZXM6IFByb3BUeXBlcy5ib29sLFxuICBpc05ld0VudHJ5OiBQcm9wVHlwZXMuYm9vbCxcbiAgaXNNb2RpZmljYXRpb246IFByb3BUeXBlcy5ib29sLFxuICBjdXJyZW50U3RhdHVzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBvbkxvZ291dENsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBkZXBsb3lQcmV2aWV3OiBJbW11dGFibGVQcm9wVHlwZXMubWFwLFxuICBsb2FkRGVwbG95UHJldmlldzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZHJhZnRLZXk6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEVkaXRvckludGVyZmFjZTtcbiJdfQ== */"));
const NoPreviewContainer = (0, _styledBase.default)("div", {
  target: "e1pxf6c42",
  label: "NoPreviewContainer"
})(styles.splitPane, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const EditorContainer = (0, _styledBase.default)("div", {
  target: "e1pxf6c43",
  label: "EditorContainer"
})("width:100%;min-width:800px;height:100%;position:absolute;top:0;left:0;overflow:hidden;padding-top:66px;background-color:", _netlifyCmsUiDefault.colors.background, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const Editor = (0, _styledBase.default)("div", {
  target: "e1pxf6c44",
  label: "Editor"
})(process.env.NODE_ENV === "production" ? {
  name: "1gs40ov",
  styles: "height:100%;margin:0 auto;position:relative;"
} : {
  name: "1gs40ov",
  styles: "height:100%;margin:0 auto;position:relative;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const PreviewPaneContainer = (0, _styledBase.default)("div", {
  target: "e1pxf6c45",
  label: "PreviewPaneContainer"
})("height:100%;overflow-y:auto;pointer-events:", props => props.blockEntry ? 'none' : 'auto', ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ControlPaneContainer = ( /*#__PURE__*/0, _styledBase.default)(PreviewPaneContainer, {
  target: "e1pxf6c46",
  label: "ControlPaneContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "pjxpm9",
  styles: "padding:0 16px;position:relative;overflow-x:hidden;"
} : {
  name: "pjxpm9",
  styles: "padding:0 16px;position:relative;overflow-x:hidden;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const ViewControls = (0, _styledBase.default)("div", {
  target: "e1pxf6c47",
  label: "ViewControls"
})(process.env.NODE_ENV === "production" ? {
  name: "1hu71zb",
  styles: "position:absolute;top:10px;right:10px;z-index:299;"
} : {
  name: "1hu71zb",
  styles: "position:absolute;top:10px;right:10px;z-index:299;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

class EditorInterface extends _react.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      showEventBlocker: false,
      previewVisible: localStorage.getItem(PREVIEW_VISIBLE) !== 'false',
      scrollSyncEnabled: localStorage.getItem(SCROLL_SYNC_ENABLED) !== 'false'
    });

    _defineProperty(this, "handleSplitPaneDragStart", () => {
      this.setState({
        showEventBlocker: true
      });
    });

    _defineProperty(this, "handleSplitPaneDragFinished", () => {
      this.setState({
        showEventBlocker: false
      });
    });

    _defineProperty(this, "handleOnPersist", (opts = {}) => {
      const {
        createNew = false,
        duplicate = false
      } = opts;
      this.controlPaneRef.validate();
      this.props.onPersist({
        createNew,
        duplicate
      });
    });

    _defineProperty(this, "handleOnPublish", (opts = {}) => {
      const {
        createNew = false,
        duplicate = false
      } = opts;
      this.controlPaneRef.validate();
      this.props.onPublish({
        createNew,
        duplicate
      });
    });

    _defineProperty(this, "handleTogglePreview", () => {
      const newPreviewVisible = !this.state.previewVisible;
      this.setState({
        previewVisible: newPreviewVisible
      });
      localStorage.setItem(PREVIEW_VISIBLE, newPreviewVisible);
    });

    _defineProperty(this, "handleToggleScrollSync", () => {
      const newScrollSyncEnabled = !this.state.scrollSyncEnabled;
      this.setState({
        scrollSyncEnabled: newScrollSyncEnabled
      });
      localStorage.setItem(SCROLL_SYNC_ENABLED, newScrollSyncEnabled);
    });
  }

  render() {
    const {
      collection,
      entry,
      fields,
      fieldsMetaData,
      fieldsErrors,
      onChange,
      showDelete,
      onDelete,
      onDeleteUnpublishedChanges,
      onChangeStatus,
      onPublish,
      unPublish,
      onDuplicate,
      onValidate,
      user,
      hasChanged,
      displayUrl,
      hasWorkflow,
      useOpenAuthoring,
      hasUnpublishedChanges,
      isNewEntry,
      isModification,
      currentStatus,
      onLogoutClick,
      loadDeployPreview,
      deployPreview,
      draftKey
    } = this.props;
    const {
      previewVisible,
      scrollSyncEnabled,
      showEventBlocker
    } = this.state;
    const collectionPreviewEnabled = collection.getIn(['editor', 'preview'], true);
    const editor = (0, _core.jsx)(ControlPaneContainer, {
      blockEntry: showEventBlocker
    }, (0, _core.jsx)(_EditorControlPane.default, {
      collection: collection,
      entry: entry,
      fields: fields,
      fieldsMetaData: fieldsMetaData,
      fieldsErrors: fieldsErrors,
      onChange: onChange,
      onValidate: onValidate,
      ref: c => this.controlPaneRef = c
    }));
    const editorWithPreview = (0, _core.jsx)(_reactScrollSync.ScrollSync, {
      enabled: this.state.scrollSyncEnabled
    }, (0, _core.jsx)("div", null, (0, _core.jsx)(ReactSplitPaneGlobalStyles, null), (0, _core.jsx)(StyledSplitPane, {
      maxSize: -100,
      defaultSize: parseInt(localStorage.getItem(SPLIT_PANE_POSITION), 10) || '50%',
      onChange: size => localStorage.setItem(SPLIT_PANE_POSITION, size),
      onDragStarted: this.handleSplitPaneDragStart,
      onDragFinished: this.handleSplitPaneDragFinished
    }, (0, _core.jsx)(_reactScrollSync.ScrollSyncPane, null, editor), (0, _core.jsx)(PreviewPaneContainer, {
      blockEntry: showEventBlocker
    }, (0, _core.jsx)(_EditorPreviewPane.default, {
      collection: collection,
      entry: entry,
      fields: fields,
      fieldsMetaData: fieldsMetaData
    })))));
    return (0, _core.jsx)(EditorContainer, null, (0, _core.jsx)(_EditorToolbar.default, {
      isPersisting: entry.get('isPersisting'),
      isPublishing: entry.get('isPublishing'),
      isUpdatingStatus: entry.get('isUpdatingStatus'),
      isDeleting: entry.get('isDeleting'),
      onPersist: this.handleOnPersist,
      onPersistAndNew: () => this.handleOnPersist({
        createNew: true
      }),
      onPersistAndDuplicate: () => this.handleOnPersist({
        createNew: true,
        duplicate: true
      }),
      onDelete: onDelete,
      onDeleteUnpublishedChanges: onDeleteUnpublishedChanges,
      onChangeStatus: onChangeStatus,
      showDelete: showDelete,
      onPublish: onPublish,
      unPublish: unPublish,
      onDuplicate: onDuplicate,
      onPublishAndNew: () => this.handleOnPublish({
        createNew: true
      }),
      onPublishAndDuplicate: () => this.handleOnPublish({
        createNew: true,
        duplicate: true
      }),
      user: user,
      hasChanged: hasChanged,
      displayUrl: displayUrl,
      collection: collection,
      hasWorkflow: hasWorkflow,
      useOpenAuthoring: useOpenAuthoring,
      hasUnpublishedChanges: hasUnpublishedChanges,
      isNewEntry: isNewEntry,
      isModification: isModification,
      currentStatus: currentStatus,
      onLogoutClick: onLogoutClick,
      loadDeployPreview: loadDeployPreview,
      deployPreview: deployPreview
    }), (0, _core.jsx)(Editor, {
      key: draftKey
    }, (0, _core.jsx)(ViewControls, null, collectionPreviewEnabled && (0, _core.jsx)(EditorToggle, {
      isActive: previewVisible,
      onClick: this.handleTogglePreview,
      size: "large",
      type: "eye",
      title: "Toggle preview"
    }), collectionPreviewEnabled && previewVisible && (0, _core.jsx)(EditorToggle, {
      isActive: scrollSyncEnabled,
      onClick: this.handleToggleScrollSync,
      size: "large",
      type: "scroll",
      title: "Sync scrolling"
    })), collectionPreviewEnabled && this.state.previewVisible ? editorWithPreview : (0, _core.jsx)(NoPreviewContainer, null, editor)));
  }

}

EditorInterface.propTypes = {
  collection: _reactImmutableProptypes.default.map.isRequired,
  entry: _reactImmutableProptypes.default.map.isRequired,
  fields: _reactImmutableProptypes.default.list.isRequired,
  fieldsMetaData: _reactImmutableProptypes.default.map.isRequired,
  fieldsErrors: _reactImmutableProptypes.default.map.isRequired,
  onChange: _propTypes.default.func.isRequired,
  onValidate: _propTypes.default.func.isRequired,
  onPersist: _propTypes.default.func.isRequired,
  showDelete: _propTypes.default.bool.isRequired,
  onDelete: _propTypes.default.func.isRequired,
  onDeleteUnpublishedChanges: _propTypes.default.func.isRequired,
  onPublish: _propTypes.default.func.isRequired,
  unPublish: _propTypes.default.func.isRequired,
  onDuplicate: _propTypes.default.func.isRequired,
  onChangeStatus: _propTypes.default.func.isRequired,
  user: _reactImmutableProptypes.default.map.isRequired,
  hasChanged: _propTypes.default.bool,
  displayUrl: _propTypes.default.string,
  hasWorkflow: _propTypes.default.bool,
  useOpenAuthoring: _propTypes.default.bool,
  hasUnpublishedChanges: _propTypes.default.bool,
  isNewEntry: _propTypes.default.bool,
  isModification: _propTypes.default.bool,
  currentStatus: _propTypes.default.string,
  onLogoutClick: _propTypes.default.func.isRequired,
  deployPreview: _reactImmutableProptypes.default.map,
  loadDeployPreview: _propTypes.default.func.isRequired,
  draftKey: _propTypes.default.string.isRequired
};
var _default = EditorInterface;
exports.default = _default;